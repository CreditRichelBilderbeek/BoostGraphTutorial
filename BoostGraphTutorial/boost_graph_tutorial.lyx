#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{tikz}
\usepackage{tkz-graph}
\usepackage{pgf}
\usetikzlibrary{arrows,automata}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
A well-connected C++11 Boost.Graph tutorial
\end_layout

\begin_layout Author
Richèl Bilderbeek
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename title_graph.svg
	lyxscale 50
	width 50text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This is 'A well-connected C++11 Boost.Graph tutorial', version 1.4.
\end_layout

\begin_layout Subsection
Why this tutorial
\end_layout

\begin_layout Standard
I needed this tutorial already in 2006, when I started experimenting with
 Boost.Graph.
 More specifically, I needed a tutorial that:
\end_layout

\begin_layout Itemize
Orders concepts chronologically
\end_layout

\begin_layout Itemize
Increases complexity gradually
\end_layout

\begin_layout Itemize
Shows complete pieces of code
\end_layout

\begin_layout Standard
What I had were the book 
\begin_inset CommandInset citation
LatexCommand cite
key "siek2001boost"

\end_inset

 and the Boost.Graph website, both did not satisfy these requirements.
 
\end_layout

\begin_layout Standard
This tutorial is intended to take the reader to the level of understanding
 the book 
\begin_inset CommandInset citation
LatexCommand cite
key "siek2001boost"

\end_inset

 and the Boost.Graph website require.
 It is about basic graph manipulation, not the more advanced graph algorithms.
 An analogy with std::vector: it teaches the std::vector member functions,
 but not the algorithms that work on.
\end_layout

\begin_layout Subsection
Code snippets
\end_layout

\begin_layout Standard
For every concept, I will show
\end_layout

\begin_layout Itemize
the 'do' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
'do' function
\end_layout

\end_inset

: a function that achieves a goal, for example 'create_empty_undirected_graph'
\end_layout

\begin_layout Itemize
the 'demo' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
'demo' function
\end_layout

\end_inset

: a function that demonstrates how to call the first, for example 'create_empty_
undirected_graph_demo'
\end_layout

\begin_layout Standard
I enjoy to show concepts by putting those in (long-named) functions.
 These functions sometimes border the trivial, by, for example, only calling
 a single Boost.Graph function.
 On the other hand, these functions have more English-sounding names, resulting
 in demonstration code that is readable.
 Additionally, they explicitly mention their return type (in a simpler way),
 which may be considered informative.
\end_layout

\begin_layout Standard
All coding snippets are taken from compiled C++ code.
 All code is tested to compile cleanly under GCC at the highest warning
 level.
 The code, as well as this tutorial, can be downloaded from the GitHub at
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

www.github.com/richelbilderbeek/BoostGraphTutorial
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Coding style
\end_layout

\begin_layout Standard
I use the coding style from the Core C++ Guidelines.
 At the time of this writing, the Core C++ Guidelines were still in early
 development, so I can only hope the conventions I then chose to follow
 are still Good Ideas.
\end_layout

\begin_layout Standard
Most functions are documented by three slashes '///', which allows tools
 like Doxygen to create documentation from it.
 
\end_layout

\begin_layout Standard
Due to my long function names and the limitation of ≈50 characters per line,
 sometimes the code does get to look a bit awkward.
 I am sorry for this.
\end_layout

\begin_layout Standard
I prefer to use the keyword auto over doubling the lines of code for using
 statements.
 Because the 'do' functions return an explicit data type, these can be used
 for reference (until 'decltype(auto)'
\begin_inset Index idx
status open

\begin_layout Plain Layout
decltype(auto)
\end_layout

\end_inset

 gets into fashion as a return type).
 If you really want to know a type, you can use the 'get_type_name' function
 (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_type_name"

\end_inset

).
 
\end_layout

\begin_layout Standard
On the other hand, I am explicit in the namespaces of functions and classes
 I use, so to distinguish between types like 'std::array' and 'boost::array'.
 Some functions (for example, 'get'
\begin_inset Index idx
status open

\begin_layout Plain Layout
get
\end_layout

\end_inset

) reside in the namespace of the graph to work on.
 In this tutorial, this is in the global namespace.
 Thus, I will write 'get', instead of 'boost::get'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::get does not exist
\end_layout

\end_inset

, as the latter does not compile.
\end_layout

\begin_layout Subsection
Tutorial style
\end_layout

\begin_layout Standard
In the index, I did first put all my long-named functions there literally,
 but this resulted in a very sloppy layout.
 Instead, the function 'do_something' can be found as 'Do something' in
 the index.
 On the other hand, STL and Boost functions like 'std::do_something' and
 'boost::do_something' can be found as such in the index.
\end_layout

\begin_layout Subsection
License
\end_layout

\begin_layout Standard
This tutorial is licensed under Creative Commons license 4.0.
 All C++ code is licensed under GPL 3.0.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename CC-BY-SA_icon.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creative Commons license 4.0
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Feedback
\end_layout

\begin_layout Standard
This tutorial is not intended to be perfect yet.
 For that, I need help and feedback from the community.
 All referenced feedback is welcome, as well as any constructive feedback.
 
\end_layout

\begin_layout Standard
I have tried hard to strictly follow the style as described above.
 If you find I deviated from these decisions somewhere, I would be grateful
 if you'd let know.
 Next to this, there are some sections that need to be coded or have its
 code improved.
 
\end_layout

\begin_layout Subsection
Help
\end_layout

\begin_layout Standard
There are some pieces of code I could use help with:
\end_layout

\begin_layout Itemize
Issue #1: Some types are hardcoded, for example, the function 'get_vertex_names'
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_names"

\end_inset

) returns a std::vector<std::string>, where std::string is the only supported
 vertex' name data type.
 It would be better if, instead of using std::string, deduce the type of
 the vertex' name data type from the graph
\end_layout

\begin_layout Itemize
Issue #12: Loading a directed graph with a name, function 'load_directed_graph_w
ith_graph_name_from_dot' as shown in chapters 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_directed_graph_with_graph_name_from_dot"

\end_inset

.
 Perhaps the function 'save_graph_with_graph_name_to_dot' (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:save_graph_with_graph_name_to_dot"

\end_inset

) needs to rewritten as well
\end_layout

\begin_layout Itemize
Issue #16: Loading a directed graph with bundled vertices, function 'load_direct
ed_bundled_vertices_graph_from_dot' as shown in chapters 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_directed_bundled_vertices_graph_from_dot"

\end_inset

.
 Perhaps the function 'save_bundled_vertices_graph_to_dot' (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:save_bundled_vertices_graph_to_dot"

\end_inset

) needs to rewritten as well
\end_layout

\begin_layout Standard
I have already put the tests in place, so you/I can easily check if your
 solution works.
 If the program crashes with the message 'assertion failed: !
\begin_inset Quotes erd
\end_inset

Fixed #
\begin_inset Quotes erd
\end_inset

', a problem has been solved.
\end_layout

\begin_layout Subsection
Outline
\end_layout

\begin_layout Standard
The chapters of this tutorial are also like a well-connected graph (as shown
 in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-relations-between-chapters"

\end_inset

).
 To allow for quicker learners to skim chapters, or for beginners looking
 to find the patterns, some chapters are repetitions of each other (for
 example, getting an edge its name is very similar to getting a vertex its
 name)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
There was even copy-pasting involved!
\end_layout

\end_inset

.
 This tutorial is not about being short, but being complete, at the risk
 of being called bloated.
\end_layout

\begin_layout Standard
The distinction between the chapter is in the type of edges and vertices.
 They can have:
\end_layout

\begin_layout Itemize
no properties: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Building-graphs-without-properties"

\end_inset


\end_layout

\begin_layout Itemize
have a name: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Building-graphs-with-named-vertices"

\end_inset


\end_layout

\begin_layout Itemize
have a bundled property: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Building-graphs-with-bundled-vertices"

\end_inset


\end_layout

\begin_layout Itemize
have a custom property: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Building-graphs-with-custom-properties"

\end_inset


\end_layout

\begin_layout Standard
The differences between graphs with bundled and custom prorties are shown
 in table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Difference-between-bundled-and-custom-properties"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="33text%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bundled
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Custom
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Meaning
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Edges/vertices are of your type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Edges/vertices have an additional custom property
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Directly
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Via property map
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Class members
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Must be public
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Can be private
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
File I/O mechanism
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Via public class members
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Via stream operators
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
File I/O success
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fails, please help!
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Works, with encoding/decoding
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Difference between bundled and custom properties
\begin_inset CommandInset label
LatexCommand label
name "tab:Difference-between-bundled-and-custom-properties"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
A pivotal chapter is chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:find_first_vertex_with_name"

\end_inset

, 'Finding the first vertex with a name', as this opens up the door to finding
 a vertex and manipulating it.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways true
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_tutorial_chapters_graph.svg
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The relations between chapters
\begin_inset CommandInset label
LatexCommand label
name "fig:The-relations-between-chapters"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
All chapters have a rather similar structure in themselves, as depicted
 in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-relations-between-subchapters"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways true
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_tutorial_subchapters_graph.svg
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The relations between sub-chapters
\begin_inset CommandInset label
LatexCommand label
name "fig:The-relations-between-subchapters"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Building graphs without properties
\begin_inset CommandInset label
LatexCommand label
name "sec:Building-graphs-without-properties"

\end_inset


\end_layout

\begin_layout Standard
Boost.Graph is about creating graphs.
 In this chapter we create the simplest of graphs, in which edges and nodes
 have no properties (e.g.
 having a name).
 
\end_layout

\begin_layout Standard
Still, there are two types of graphs that can be constructed: undirected
 and directed graphs.
 The difference between directed and undirected graphs is in the edges:
 in an undirected graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
undirected graph
\end_layout

\end_inset

, an edge connects two vertices without any directionality, as displayed
 in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:undirected_graph_example"

\end_inset

.
 In a directed graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
directed graph
\end_layout

\end_inset

, an edge goes from a certain vertex, its source, to another (which may
 actually be the same), its target.
 A directed graph is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:directed_graph_example"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (0,0) node[fill=black,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

    -- (5,2) node[fill=black,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

    -- (10,1) node[fill=black,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Example of an undirected graph
\begin_inset CommandInset label
LatexCommand label
name "fig:undirected_graph_example"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}   
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{ 
\end_layout

\begin_layout Plain Layout

  VertexStyle/.append style = { fill=black,shape=circle },
\end_layout

\begin_layout Plain Layout

  EdgeStyle/.append style = {->, bend left} }
\end_layout

\begin_layout Plain Layout


\backslash
SetGraphUnit{5}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex{A}   
\end_layout

\begin_layout Plain Layout


\backslash
EA(A){B}   
\end_layout

\begin_layout Plain Layout


\backslash
EA(B){C}   
\end_layout

\begin_layout Plain Layout


\backslash
Edge[](A)(B)   
\end_layout

\begin_layout Plain Layout


\backslash
Edge[](B)(A)   
\end_layout

\begin_layout Plain Layout


\backslash
Loop[dist = 4cm, dir = NO](A.west)
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{EdgeStyle/.append style = {bend left = 0}}
\end_layout

\begin_layout Plain Layout


\backslash
Edge[](C)(B)   
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Example of a directed graph
\begin_inset CommandInset label
LatexCommand label
name "fig:directed_graph_example"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this chapter, we will build two directed and two undirected graphs:
\end_layout

\begin_layout Itemize
An empty (directed) graph, which is the default type: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_graph"

\end_inset


\end_layout

\begin_layout Itemize
An empty (undirected) graph: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_undirected_graph"

\end_inset


\end_layout

\begin_layout Itemize
A two-state Markov chain, a directed graph with two vertices and four edges,
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_markov_chain_graph"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{2}$
\end_inset

, an undirected graph with two vertices and one edge, chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_k2_graph"

\end_inset


\end_layout

\begin_layout Standard
Creating an empty graph may sound trivial, it is not, thanks to the versatility
 of the Boost.Graph library.
\end_layout

\begin_layout Standard
In the process of creating graphs, some basic (sometimes bordering trivial)
 functions are encountered:
\end_layout

\begin_layout Itemize
Counting the number of vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_n_vertices"

\end_inset


\end_layout

\begin_layout Itemize
Counting the number of edges: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_n_edges"

\end_inset


\end_layout

\begin_layout Itemize
Adding a vertex: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_vertex"

\end_inset


\end_layout

\begin_layout Itemize
Getting all vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertices"

\end_inset


\end_layout

\begin_layout Itemize
Getting all vertex descriptors: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_descriptors"

\end_inset


\end_layout

\begin_layout Itemize
Adding an edge: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_edge"

\end_inset


\end_layout

\begin_layout Itemize
Getting all edges: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_edge_iterators"

\end_inset


\end_layout

\begin_layout Itemize
Getting all edge descriptors: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_edge_descriptors"

\end_inset


\end_layout

\begin_layout Standard
These functions are mostly there for completion and showing which data types
 are used.
\end_layout

\begin_layout Standard
The chapter also introduces some important concepts:
\end_layout

\begin_layout Itemize
Vertex descriptors: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset


\end_layout

\begin_layout Itemize
Edge insertion result: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:boost::add_edge result"

\end_inset


\end_layout

\begin_layout Itemize
Edge descriptors: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Edge-descriptors"

\end_inset


\end_layout

\begin_layout Subsection
Creating an empty (directed) graph
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_directed_graph"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Create an empty directed graph
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Empty directed graph, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's create an empty graph!
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_directed_graph"

\end_inset

 shows the function to create an empty graph.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty (directed) graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty directed graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code consists out of an #include and a function definition.
 The #include
\begin_inset Index idx
status open

\begin_layout Plain Layout
#include
\end_layout

\end_inset

 tells the compiler to read the header file 'adjacency_list.hpp'.
 A header file
\begin_inset Index idx
status open

\begin_layout Plain Layout
header file
\end_layout

\end_inset

 (often with a '.h' or '.hpp' extension) contains class and functions declarations
 and/or definitions.
 The header file 'adjacency_list.hpp' contains the boost::adjacency_list
 class definition.
 Without including this file, you will get compile errors like 'definition
 of boost::adjacency_list unknown'
\begin_inset Foot
status open

\begin_layout Plain Layout
In practice, these compiler error messages will be longer, bordering the
 unreadable
\end_layout

\end_inset

.
 The function 'create_empty_directed_graph' has:
\end_layout

\begin_layout Itemize
a return type: The return type is 'boost::adjacency_list<>', that is a 'boost::a
djacency_list with all template arguments set at their defaults
\end_layout

\begin_layout Itemize
a noexcept specification
\begin_inset Index idx
status open

\begin_layout Plain Layout
noexcept specification
\end_layout

\end_inset

: the function should not throw
\begin_inset Foot
status open

\begin_layout Plain Layout
if the function would throw because it cannot allocate this little piece
 of memory, you are already in big trouble
\end_layout

\end_inset

, so it is preferred to mark it noexcept
\begin_inset Index idx
status open

\begin_layout Plain Layout
noexcept
\end_layout

\end_inset

 (
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup2013"

\end_inset

 chapter 13.7).
\end_layout

\begin_layout Itemize
a function body: all the function body does is create a 'boost::adjacency_list<>
' by calling its constructor, by using the round brackets
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_directed_graph_demo"

\end_inset

 demonstrates the 'create_empty_directed_graph' function.
 Note that it includes a header file with the same name as the function
\begin_inset Foot
status open

\begin_layout Plain Layout
I do not think it is important to have creative names
\end_layout

\end_inset

 first, to be able to use it.
 'auto' is used, as this is preferred over explicit type declarations (
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup2013"

\end_inset

 chapter 31.6).
 The keyword 'auto'
\begin_inset Index idx
status open

\begin_layout Plain Layout
auto
\end_layout

\end_inset

 lets the compiler figure out the type itself.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'create_empty_directed_graph'
\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Congratulations, you've just created a boost::adjacency_list
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::adjacency_list
\end_layout

\end_inset

 with its default template arguments.
 We do not do anything with it yet, but still, you've just created a graph,
 in which:
\end_layout

\begin_layout Itemize
The out edges and vertices are stored in a std::vector
\end_layout

\begin_layout Itemize
The edges have a direction
\end_layout

\begin_layout Itemize
The vertices, edges and graph have no properties
\end_layout

\begin_layout Itemize
The edges are stored in a std::list
\end_layout

\begin_layout Standard
The boost::adjacency_list is the most commonly used graph type, the other
 is the boost::adjacency_matrix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::adjacency_matrix
\end_layout

\end_inset

.
 It stores its edges, out edges and vertices in a two different STL
\begin_inset Index idx
status open

\begin_layout Plain Layout
STL
\end_layout

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Standard Template Library, the standard library
\end_layout

\end_inset

 containers.
 std::vector
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::vector
\end_layout

\end_inset

 is the container you should use by default (
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup2013"

\end_inset

 chapter 31.6, 
\begin_inset CommandInset citation
LatexCommand cite
key "sutter_and_alexandrescu2004"

\end_inset

 chapter 76), as it has constant time look-up and back insertion.
 The std::list
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::list
\end_layout

\end_inset

 is used for storing the edges, as it is better suited at inserting elements
 at any position.
\end_layout

\begin_layout Standard
I use const
\begin_inset Index idx
status open

\begin_layout Plain Layout
const
\end_layout

\end_inset

 to store the empty graph as we do not modify it.
 Correct use of const is called const-correct.
 Prefer to be const-correct
\begin_inset Index idx
status open

\begin_layout Plain Layout
const-correctness
\end_layout

\end_inset

 (
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup1997"

\end_inset

 chapter 7.9.3, 
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup2013"

\end_inset

 chapter 12.7, 
\begin_inset CommandInset citation
LatexCommand cite
key "meyers2005effective"

\end_inset

 item 3, 
\begin_inset CommandInset citation
LatexCommand cite
key "hollingworth2000cpp_builder_dev_guide"

\end_inset

 chapter 3, 
\begin_inset CommandInset citation
LatexCommand cite
key "sutter_and_alexandrescu2004"

\end_inset

 item 15, 
\begin_inset CommandInset citation
LatexCommand cite
key "cline1998cpp_faqs"

\end_inset

 FAQ 14.05, 
\begin_inset CommandInset citation
LatexCommand cite
key "eckel2002thinking_cpp"

\end_inset

 item 8, 
\begin_inset CommandInset citation
LatexCommand cite
key "lakos1996large"

\end_inset

 9.1.6).
 
\end_layout

\begin_layout Subsection
Creating an empty undirected graph
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_undirected_graph"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Create an empty graph
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Empty graph, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's create another empty graph! This time, we even make it undirected!
\end_layout

\begin_layout Standard
Algorith 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_undirected_graph"

\end_inset

 shows how to create an undirected graph.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty undirected graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty undirected graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_undirected_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This algorith differs from the 'create_empty_directed_graph' function (algoritm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_directed_graph"

\end_inset

) in that there are three template arguments that need to be specified in
 the creation of the boost::adjancency_list:
\end_layout

\begin_layout Itemize
the first 'boost::vecS'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

: select (that is what the 'S
\begin_inset Index idx
status open

\begin_layout Plain Layout
S
\end_layout

\end_inset

' means) that out edges are stored in a std::vector.
 This is the default way.
\end_layout

\begin_layout Itemize
the second 'boost::vecS'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

: select that the graph vertices are stored in a std::vector.
 This is the default way.
\end_layout

\begin_layout Itemize
'boost::undirectedS'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS
\end_layout

\end_inset

: select that the graph is undirected.
 This is all we needed to change.
 By default, this argument is boost::directed 
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::directedS
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_undirected_graph_demo"

\end_inset

 demonstrates the 'create_empty_undirected_graph' function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'create_empty_undirected_graph'
\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_undirected_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Congratulations, with algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_undirected_graph_demo"

\end_inset

, you've just created an undirected graph in which:
\end_layout

\begin_layout Itemize
The out edges and vertices are stored in a std::vector
\end_layout

\begin_layout Itemize
The graph is undirected
\end_layout

\begin_layout Itemize
Vertices, edges and graph have no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list 
\end_layout

\begin_layout Subsection
Counting the number of vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:get_n_vertices"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertices, counting
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Counting the number of vertices
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's count all zero vertices of an empty graph!
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_n_vertices.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Count the number of vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get n vertices
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_n_vertices"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function 'get_n_vertices' takes the result of boost::num_vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::num_vertices
\end_layout

\end_inset

, converts it to int and checks if there was conversion error.
 We do so, as one should prefer using signed data types over unsigned ones
 in an interface (
\begin_inset CommandInset citation
LatexCommand cite
key "lakos1996large"

\end_inset

 chapter 9.2.2).
 To do so, in the function body its first stament, the unsigned long
\begin_inset Index idx
status open

\begin_layout Plain Layout
unsigned long
\end_layout

\end_inset

 produced by boost::num_vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::num_vertices
\end_layout

\end_inset

 get converted to an int using a static_cast
\begin_inset Index idx
status open

\begin_layout Plain Layout
static_cast
\end_layout

\end_inset

.
 Using an unsigned integer over a (signed) integer for the sake of gaining
 that one more bit (
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup1997"

\end_inset

 chapter 4.4) should be avoided.
 The integer 'n' is initialized using list-initialization, which is preferred
 over the other initialization syntaxes (
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup2013"

\end_inset

 chapter 17.7.6).
 
\end_layout

\begin_layout Standard
The assert checks if the conversion back to unsigned long re-creates the
 original value, to check if no information has been lost.
 If information is lost, the program crashes.
 Use assert
\begin_inset Index idx
status open

\begin_layout Plain Layout
assert
\end_layout

\end_inset

 extensively (
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup1997"

\end_inset

 chapter 24.5.18, 
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup2013"

\end_inset

 chapter 30.5, 
\begin_inset CommandInset citation
LatexCommand cite
key "sutter_and_alexandrescu2004"

\end_inset

 chapter 68, 
\begin_inset CommandInset citation
LatexCommand cite
key "mcconnell2004code"

\end_inset

 chapter 8.2, 
\begin_inset CommandInset citation
LatexCommand cite
key "liberty2001sams"

\end_inset

 hour 24, 
\begin_inset CommandInset citation
LatexCommand cite
key "lakos1996large"

\end_inset

 chapter 2.6).
\end_layout

\begin_layout Standard
The function 'get_n_vertices' is demonstrated in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_n_vertices_demo"

\end_inset

, to measure the number of vertices of both the directed and undirected
 graph we are already able to create.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_n_vertices_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'get_n_vertices' function
\begin_inset CommandInset label
LatexCommand label
name "alg:get_n_vertices_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that the type of graph does not matter here.
 One can count the number of vertices of every graph, as all graphs have
 vertices.
 Boost.Graph is very good at detecting operations that are not allowed, during
 compile time.
\end_layout

\begin_layout Subsection
Counting the number of edges
\begin_inset CommandInset label
LatexCommand label
name "sub:get_n_edges"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edges, counting
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Counting the number of edges
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's count all zero edges of an empty graph!
\end_layout

\begin_layout Standard
This is very similar to the previous chapter, only it uses boost::num_edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::num_edges
\end_layout

\end_inset

 instead:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_n_edges.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Count the number of edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get n edges
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_n_edges"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This code is similar to the 'get_n_vertices' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_n_vertices"

\end_inset

, see rationale there) except 'boost::num_edges'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::num_edges
\end_layout

\end_inset

 is used, instead of 'boost::num_vertices', which also returns an unsigned
 long.
\end_layout

\begin_layout Standard
The function 'get_n_edges' is demonstrated in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_n_edges_demo"

\end_inset

, to measure the number of edges of an empty directed and undirected graph.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_n_edges_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'get_n_edges' function
\begin_inset CommandInset label
LatexCommand label
name "alg:get_n_edges_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Adding a vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:add_vertex"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Add a vertex
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex, add
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Empty graphs are nice, now its time to add a vertex!
\end_layout

\begin_layout Standard
To add a vertex to a graph, the boost::add_vertex
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::add_vertex
\end_layout

\end_inset

 function is used as shows in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_vertex"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Adding a vertex to a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
Add vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that boost::add_vertex (in the 'add_vertex' function) returns a vertex
 descriptor, which is ignored for now.
 Vertex descriptors are looked at in more details at the chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

, as we need these to add an edge.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_vertex_demo"

\end_inset

 shows how to add a vertex to a directed and undirected graph.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'add_vertex' function
\begin_inset CommandInset label
LatexCommand label
name "alg:add_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration code creates two empty graphs, adds one vertex to each
 and then asserts that the number of vertices in each graph is one.
 This works for both types of graphs, as all graphs have vertices.
\end_layout

\begin_layout Subsection
Vertex descriptors
\begin_inset CommandInset label
LatexCommand label
name "sub:Vertex-descriptors"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex descriptor
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A vertex descriptor is a handle to a vertex within a graph.
 
\end_layout

\begin_layout Standard
Vertex descriptors can be obtained by dereferencing a vertex iterator (see
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_descriptors"

\end_inset

).
 To do so, we first obtain some vertex iterators in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertices"

\end_inset

).
 
\end_layout

\begin_layout Standard
Vertex descriptors are used to:
\end_layout

\begin_layout Itemize
add and edge between two vertices, see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_edge"

\end_inset


\end_layout

\begin_layout Itemize
obtain properties of vertex a vertex, for example the vertex its out degrees
 (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_out_degrees"

\end_inset

), the vertex its name (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_names"

\end_inset

), or a custom vertex property (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_my_vertexes"

\end_inset

)
\end_layout

\begin_layout Standard
In this tutorial, vertex descriptors have named prefixed with 'vd_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
vd_
\end_layout

\end_inset

, for example 'vd_1'.
\end_layout

\begin_layout Subsection
Get the vertex iterators
\begin_inset CommandInset label
LatexCommand label
name "sub:get_vertices"

\end_inset


\end_layout

\begin_layout Standard
You cannot get the vertices.
 This may sound unexpected, as it must be possible to work on the vertices
 of a graph.
 Working on the vertices of a graph is done throught these steps:
\end_layout

\begin_layout Itemize
Obtain a vertex iterator pair from the graph
\end_layout

\begin_layout Itemize
Dereferencing a vertex iterator to obtain a vertex descriptor
\end_layout

\begin_layout Standard
'boost::vertices'
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::vertices
\end_layout

\end_inset

 is used to obtain a vertex iterator pair
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex iterator pair
\end_layout

\end_inset

, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_iterators"

\end_inset

.
 The first vertex iterator
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex iterator
\end_layout

\end_inset

 points to the first vertex (its descriptor, to be precise), the second
 points to beyond the last vertex (its descriptor, to be precise).
 In this tutorial, vertex iterator pairs have named prefixed with 'vip_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
vip_
\end_layout

\end_inset

, for example 'vip_1'.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_iterators.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the vertex iterators of a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get vertices
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_iterators"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a somewhat trivial function, as it forwards the function call to
 'boost::vertices'.
\end_layout

\begin_layout Standard
These vertex iterators can be dereferenced to obtain the vertex descriptors.
 Note that 'get_vertex_iterators' will not be used often in isolation: usually
 one obtains the vertex descriptors immediatly.
 Just for your reference, algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_iterators_demo"

\end_inset

 demonstrates of the 'get_vertices' function, by showing that the vertex
 iterators of an empty graph point to the same location.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_iterators_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'get_vertex_iterators'
\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_iterators_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Get all vertex descriptors
\begin_inset CommandInset label
LatexCommand label
name "sub:get_vertex_descriptors"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex descriptors, get
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Vertex descriptors are the way to manipulate those vertices.
 Let's go get the all!
\end_layout

\begin_layout Standard
Vertex descriptors are obtained from dereferencing vertex iterators.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_descriptors"

\end_inset

 shows how to obtain all vertex descriptors from a graph.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_descriptors.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get all vertex descriptors of a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get vertex descriptors
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_descriptors"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is the first more complex piece of code.
 In the first lines, some 'using' statements allow for shorter type names
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
which may be necessary just to create a tutorial with code snippets that
 are readable
\end_layout

\end_inset

.
 The function 'vertices'
\begin_inset Index idx
status open

\begin_layout Plain Layout
vertices
\end_layout

\end_inset

 (not boost::vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertices does not exist
\end_layout

\end_inset

!) returns a vertex iterator pair.
 The two iterators are extracted, of which the first iterator, 'i', points
 to the first vertex, and the second, 'j', points to beyond the last vertex.
 In the for-loop, 'i' loops from begin to end.
 Dereferencing it produces a vertex descriptor, which is stored in the std::vect
or using emplace_back.
 Prefer using emplace_back (
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup2013"

\end_inset

 chapter 31.6, items 25 and 27).
 
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_descriptors_demo"

\end_inset

 demonstrates that an empty graph has no vertex descriptors:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_descriptors_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'get_vertex_descriptors'
\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_descriptors_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Because all graphs have vertices and thus vertex descriptors, the type of
 graph is unimportant for this code to compile.
\end_layout

\begin_layout Subsection
Add an edge
\begin_inset CommandInset label
LatexCommand label
name "sub:add_edge"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Add an edge
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge, add
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To add an edge to a graph, two vertex descriptors are needed.
 A vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex descriptor
\end_layout

\end_inset

 is a handle to the vertex within a graph (vertex descriptors are looked
 at in more details in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

).
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_edge"

\end_inset

 adds two vertices to a graph, and connects these two using boost::add_edge
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::add_edge
\end_layout

\end_inset

: 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Adding (two vertices and) an edge to a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
add_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_edge"

\end_inset

 shows how to add an isolated edge to a graph (instead of allowing for graphs
 with higher connectivities).
 First, two vertices are created, using the function 'boost::add_vertex'.
 'boost::add_vertex' returns a vertex descriptor (which I prefix with 'vd'
\begin_inset Index idx
status open

\begin_layout Plain Layout
vd
\end_layout

\end_inset

), both of which are stored.
 The vertex descriptors are used to add an edge to the graph, using 'boost::add_
edge'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge
\end_layout

\end_inset

.
 'boost::add_edge'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge
\end_layout

\end_inset

 returns returns a std::pair
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::pair
\end_layout

\end_inset

, consisting of an edge descriptor and a boolean success indicator.
 The success of adding the edge is checked by an assert statement.
 Here we assert
\begin_inset Index idx
status open

\begin_layout Plain Layout
assert
\end_layout

\end_inset

 that this insertion was successfull.
 Insertion can fail if an edge is already present and duplicates are not
 allowed.
\end_layout

\begin_layout Standard
A demonstration of add_edge is shown in algorith 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_edge_demo"

\end_inset

, in which an edge is added to both a directed and undirected graph, after
 which the number of edges and vertices is checked.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'add_edge'
\begin_inset CommandInset label
LatexCommand label
name "alg:add_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The graph type is unimportant: as all graph types have vertices and edges,
 edges can be added without possible compile problems.
\end_layout

\begin_layout Subsection
boost::add_edge result
\begin_inset CommandInset label
LatexCommand label
name "sub:boost::add_edge result"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge result
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When using the function 'boost::add_edge', a 'std::pair<edge_descriptor,bool>'
 is returned.
 It contains both the edge descriptor (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Edge-descriptors"

\end_inset

) and a boolean, which indicates insertion success.
\end_layout

\begin_layout Standard
In this tutorial, boost::add_edge results have named prefixed with 'aer_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
aer_
\end_layout

\end_inset

, for example 'aer_1'.
\end_layout

\begin_layout Subsection
Getting the edge iterators
\begin_inset CommandInset label
LatexCommand label
name "sub:get_edge_iterators"

\end_inset


\end_layout

\begin_layout Standard
You cannot get the edges directly.
 Instead, working on the edges of a graph is done throught these steps:
\end_layout

\begin_layout Itemize
Obtain an edge iterator pair from the graph
\end_layout

\begin_layout Itemize
Dereference an edge iterator to obtain an edge descriptor
\end_layout

\begin_layout Standard
'edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
edges
\end_layout

\end_inset

' (not boost::edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edges does not exist
\end_layout

\end_inset

!) is used to obtain an edge iterator pair
\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge iterator pair
\end_layout

\end_inset

.
 The first edge iterator
\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge iterator
\end_layout

\end_inset

 points to the first edge (its descriptor, to be precise), the second points
 to beyond the last edge (its descriptor, to be precise).
 In this tutorial, edge iterator pairs have named prefixed with 'eip_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
eip_
\end_layout

\end_inset

, for example 'eip_1'.
 Algoritm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_edge_iterators"

\end_inset

 shows how to obtain these:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_iterators.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the edge iterators of a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get edge iterators
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_iterators"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a somewhat trivial function, as all it does is forward to function
 call to 'edges' (not boost::edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edges does not exist
\end_layout

\end_inset

!) These edge iterators can be dereferenced to obtain the edge descriptors.
 Note that this function will not be used often in isolation: usually one
 obtains the edge descriptors immediatly.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_edge_iterators_demo"

\end_inset

 demonstrates 'get_edge_iterators' by showing that both iterators of the
 edge iterator pair point to the same location, when the graph is empty.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_iterators_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'get_edge_iterators'
\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_iterators_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Edge descriptors
\begin_inset CommandInset label
LatexCommand label
name "sub:Edge-descriptors"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge descriptor
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An edge descriptor is a handle to an edge within a graph.
 They are similar to vertex descriptors (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

).
 
\end_layout

\begin_layout Standard
Edge descriptors are used to obtain the name, or other properties, of an
 edge
\end_layout

\begin_layout Standard
In this tutorial, edge descriptors have named prefixed with 'ed_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
ed_
\end_layout

\end_inset

, for example 'ed_1'.
\end_layout

\begin_layout Subsection
Get all edge descriptors
\begin_inset CommandInset label
LatexCommand label
name "sub:get_edge_descriptors"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge descriptors, get
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Get edge descriptors
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Obtaining all edge descriptors is similar to obtaining all vertex descriptors
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_descriptors"

\end_inset

), as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_edge_descriptors"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_descriptors.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get all edge descriptors of a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get edge descriptors
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_descriptors"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The only difference is that instead of the function 'vertices' (not boost::verti
ces
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertices does not exist
\end_layout

\end_inset

!), 'edges'
\begin_inset Index idx
status open

\begin_layout Plain Layout
edges
\end_layout

\end_inset

 (not boost::edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edges does not exist
\end_layout

\end_inset

!) is used.
 
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_edge_descriptors_demo"

\end_inset

 demonstrates the 'get_edge_descriptor', by showing that empty graphs do
 not have any edge descriptors.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_descriptors_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of get_edge_descriptors
\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_descriptors_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Creating a directed graph
\begin_inset CommandInset label
LatexCommand label
name "sub:create_markov_chain_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create directed graph
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Directed graph, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, we are going to create a directed non-empty graph! 
\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
This directed graph is a two-state Markov chain, with two vertices and four
 edges, as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:markov_chain"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}   
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{ 
\end_layout

\begin_layout Plain Layout

  VertexStyle/.append style = { fill=black,shape=circle },
\end_layout

\begin_layout Plain Layout

  EdgeStyle/.append style = {->, bend left} }
\end_layout

\begin_layout Plain Layout


\backslash
SetGraphUnit{5}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex{A}   
\end_layout

\begin_layout Plain Layout


\backslash
EA(A){B}   
\end_layout

\begin_layout Plain Layout


\backslash
Edge[](A)(B)   
\end_layout

\begin_layout Plain Layout


\backslash
Edge[](B)(A)   
\end_layout

\begin_layout Plain Layout


\backslash
Loop[dist = 4cm, dir = NO](A.west)
\end_layout

\begin_layout Plain Layout


\backslash
Loop[dist = 4cm, dir = SO](B.east)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The two-state Markov chain
\begin_inset CommandInset label
LatexCommand label
name "fig:markov_chain"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that directed graphs can have edges that start and end in the same
 vertex.
 These are called self-loops.
\end_layout

\begin_layout Subsubsection
Function to create such a graph
\end_layout

\begin_layout Standard
To create this two-state Markov chain, the following code can be used:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_markov_chain.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating the two-state Markov chain as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:markov_chain"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create Markov chain
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_markov_chain_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Instead of typing the complete type, we call the 'create_empty_directed_graph'
 function, and let auto figure out the type.
 The vertex descriptors (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

) created by two boost::add_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_vertex
\end_layout

\end_inset

 calls are stored to add an edge to the graph.
 Then boost::add_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge
\end_layout

\end_inset

 is called four times.
 Every time, its return type (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:boost::add_edge result"

\end_inset

) is checked for a successfull insertion.
\end_layout

\begin_layout Standard
Note that the graph lacks all properties: nodes do not have names, nor do
 edges.
\end_layout

\begin_layout Subsubsection
Creating such a graph
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "create_markov_chain_demo"

\end_inset

 demonstrates the 'create_markov_chain_graph' function and checks if it
 has the correct amount of edges and vertices:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_markov_chain_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'create_markov_chain' 
\begin_inset CommandInset label
LatexCommand label
name "create_markov_chain_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .dot file produced
\begin_inset CommandInset label
LatexCommand label
name "sub:create_markov_chain.dot"

\end_inset


\end_layout

\begin_layout Standard
Running a bit ahead, this graph can be converted to a .dot file using the
 'save_graph_to_dot' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset

).
 The .dot file created is displayed in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_markov_chain.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_markov_chain.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 'create_markov_chain_graph' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_markov_chain_graph"

\end_inset

), converted from graph to .dot file using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_markov_chain.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
From the .dot file one can already see that the graph is directed, because:
\end_layout

\begin_layout Itemize
The first word, 'digraph', denotes a directed graph (where 'graph' would
 have indicated an undirectional graph)
\end_layout

\begin_layout Itemize
The edges are written as '->' (where undirected connections would be written
 as '--')
\end_layout

\begin_layout Subsubsection
The .svg file produced
\begin_inset CommandInset label
LatexCommand label
name "sub:create_markov_chain.svg"

\end_inset


\end_layout

\begin_layout Standard
The .svg file of this graph is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:create_markov_chain.svg"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_markov_chain.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the 'create_markov_chain' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_markov_chain_graph"

\end_inset

) its .dot file and converted from .dot file to .svg using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:create_markov_chain.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This figure shows that the graph in directed, as the edges have arrow heads.
 The vertices display the node index, which is the default behavior.
\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{2}$
\end_inset

, a fully connected undirected graph with two vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_k2_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create 
\begin_inset Formula $K_{2}$
\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, we are going to create an undirected non-empty graph!
\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
To create a fully connected undirected graph with two vertices (also called
 
\begin_inset Formula $K_{2}$
\end_inset

), one needs two vertices and one (undirected) edge, as depicted in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:k2_graph"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (0,0) node[fill=black,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

    -- (5,1) node[fill=black,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

: a fully connected undirected graph with two vertices
\begin_inset CommandInset label
LatexCommand label
name "fig:k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Function to create such a graph
\end_layout

\begin_layout Standard
To create 
\begin_inset Formula $K_{2}$
\end_inset

, the following code can be used:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_k2_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:k2_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create 
\begin_inset Formula $K_{2}$
\end_inset

 graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This code is very similar to the 'add_edge' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_edge"

\end_inset

).
 Instead of typing the graph its type, we call the 'create_empty_undirected_grap
h' function and let auto figure it out.
 The vertex descriptors (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

) created by two boost::add_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_vertex
\end_layout

\end_inset

 calls are stored to add an edge to the graph.
 From boost::add_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge
\end_layout

\end_inset

 its return type (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:boost::add_edge result"

\end_inset

), it is only checked that insertion has been successfull.
\end_layout

\begin_layout Standard
Note that the graph lacks all properties: nodes do not have names, nor do
 edges.
\end_layout

\begin_layout Subsubsection
Creating such a graph
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph_demo"

\end_inset

 demonstrates how to 'create_k2_graph' and checks if it has the correct
 amount of edges and vertices:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_k2_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'create_k2_graph' 
\begin_inset CommandInset label
LatexCommand label
name "alg:create_k2_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .dot file produced
\begin_inset CommandInset label
LatexCommand label
name "sub:create_k2.dot"

\end_inset


\end_layout

\begin_layout Standard
Running a bit ahead, this graph can be converted to the .dot file as shown
 in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 'create_k2_graph' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

), converted from graph to .dot file using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_k2_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
From the .dot file one can already see that the graph is undirected, because:
\end_layout

\begin_layout Itemize
The first word, 'graph', denotes an undirected graph (where 'digraph' would
 have indicated a directional graph)
\end_layout

\begin_layout Itemize
The edge between 0 and 1 is written as '--' (where directed connections
 would be written as '->', '<-' or '<>')
\end_layout

\begin_layout Subsubsection
The .svg file produced
\begin_inset CommandInset label
LatexCommand label
name "sub:create_k2.svg"

\end_inset


\end_layout

\begin_layout Standard
Continuing to running a bit ahead, this .dot file can be converted to the
 .svg as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:create_k2_graph.svg"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_k2_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the 'create_k2_graph' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:create_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Also this figure shows that the graph in undirected, otherwise the edge
 would have one or two arrow heads.
 The vertices display the node index, which is the default behavior.
\end_layout

\begin_layout Section
Working on graphs without properties
\begin_inset CommandInset label
LatexCommand label
name "sec:Working-on-graphs-without-properties"

\end_inset


\end_layout

\begin_layout Standard
Now that we can build a graph, there are some things we can do:
\end_layout

\begin_layout Itemize
Getting the vertices' out degrees: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_out_degrees"

\end_inset


\end_layout

\begin_layout Itemize
Saving a graph without properties to .dot file: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:save_graph_to_dot"

\end_inset


\end_layout

\begin_layout Itemize
Loading an undirected graph without properties from .dot file: see chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_undirected_graph_from_dot"

\end_inset


\end_layout

\begin_layout Itemize
Loading a directed graph without properties from .dot file: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_directed_graph_from_dot"

\end_inset


\end_layout

\begin_layout Subsection
Getting the vertices' out degree
\begin_inset CommandInset label
LatexCommand label
name "sub:get_vertex_out_degrees"

\end_inset


\end_layout

\begin_layout Standard
Let's measure the out degree of all vertices in a graph! 
\end_layout

\begin_layout Standard
The out degree of a vertex is the number of edges that originate at it.
 
\end_layout

\begin_layout Standard
The number of connections is called the 'degree' of the vertex.
 There are three types of degrees:
\end_layout

\begin_layout Itemize
in degree: the number of incoming connections, using boost::in_degree
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::in_degree
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
out degree: the number of outgoing connections, using boost::in_degree
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::out_degree
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
degree: sum of the in degree and out degree, using boost::in_degree
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::degree
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_out_degrees"

\end_inset

 shows how to obtain these:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_out_degrees.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the vertices' out degrees
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get vertex out degrees
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_out_degrees"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The structure of this algorithm is similar to get_vertex_descriptors (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_descriptors"

\end_inset

), except that the out degrees from the vertex descriptors are stored.
 The out degree of a vertex iterator is obtained from the function 'out_degree'
\begin_inset Index idx
status open

\begin_layout Plain Layout
out_degree
\end_layout

\end_inset

 (not boost::out_degree
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::out_degree does not exist
\end_layout

\end_inset

!).
 
\end_layout

\begin_layout Standard
Albeit that the 
\begin_inset Formula $K_{2}$
\end_inset

 graph and the two-state Markov chain are rather simple, we can use it to
 demonstrate 'get_vertex_out_degrees' on, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_out_degrees_demo"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_out_degrees_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'get_vertex_out_degrees' function
\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_out_degrees_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is expected that 
\begin_inset Formula $K_{2}$
\end_inset

 has one out-degree for every vertex, where the two-state Markov chain is
 expected to have two out-degrees per vertex.
\end_layout

\begin_layout Subsection
Saving a graph to a .dot file
\begin_inset CommandInset label
LatexCommand label
name "sub:save_graph_to_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Save graph as .dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create .dot from graph
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Graph are easily saved to a file, thanks to Graphviz.
 Graphviz (short for Graph Visualization Software) is a package of open-source
 tools for drawing graphs.
 It uses the DOT language for describing graphs, and these are commonly
 stored in (plain-text) .dot files (I show .dot file of every non-empty graph
 created, e.g.
 chapters 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_markov_chain.dot"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_k2.dot"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_graph_to_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Saving a graph to a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Save graph to dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the code does is create an std::ofstream
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::ofstream
\end_layout

\end_inset

 (an output-to-file stream) and use boost::write_graphviz
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::write_graphviz
\end_layout

\end_inset

 to write the DOT description of our graph to that stream.
 Instead of 'std::ofstream', one could use std::cout
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::cout
\end_layout

\end_inset

 (a related output stream) to display the DOT language on screen directly.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot_demo"

\end_inset

 shows how to use the 'save_graph_to_dot' function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_graph_to_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'save_graph_to_dot' function
\begin_inset CommandInset label
LatexCommand label
name "alg:save_graph_to_dot_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When using the 'save_graph_to_dot' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset

), only the structure of the graph is saved: all other properties like names
 are not stored.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_vertices_graph_to_dot"

\end_inset

 shows how to do so.
\end_layout

\begin_layout Subsection
Loading a directed graph from a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:load_directed_graph_from_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Load directed graph from .dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create directed graph from .dot
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
When loading a graph from file, one needs to specify a type of graph.
 In this example, an directed graph is loaded, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_directed_graph_from_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loading a directed graph from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load directed graph from dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:load_directed_graph_from_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this algorithm, first it is checked if the file to load exists, using
 the 'is_regular_file' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:is_regular_file"

\end_inset

), after which an std::ifstream
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::ifstream
\end_layout

\end_inset

 is opened.
 Then an empty directed graph is created.
 Next to this, a boost::dynamic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties
\end_layout

\end_inset

 is created with the 'boost::ignore_other_properties'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::ignore_other_properties
\end_layout

\end_inset

 in its constructor (using a default constructor here results in the run-time
 error 'property not found: node_id', see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:property_not_found_node_id"

\end_inset

).
 From this and the empty graph, 'boost::read_graphviz'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::read_graphviz
\end_layout

\end_inset

 is called to build up the graph.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_directed_graph_from_dot_demo"

\end_inset

 shows how to use the 'load_directed_graph_from_dot' function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'load_directed_graph_from_dot' function
\begin_inset CommandInset label
LatexCommand label
name "alg:load_directed_graph_from_dot_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration shows how the Markov chain is created using the 'create_marko
v_chain_graph' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_markov_chain_graph"

\end_inset

), saved and then loaded.
 The loaded graph is then checked to be a two-state Markov chain.
\end_layout

\begin_layout Subsection
Loading an undirected graph from a .dot file
\begin_inset CommandInset label
LatexCommand label
name "sub:load_undirected_graph_from_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected graph from .dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create undirected graph from .dot
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Loading an undirected graph from a .dot file is very similar to loading a
 directed graph from a .dot file, as shown in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_directed_graph_from_dot"

\end_inset

.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_undirected_graph_from_dot"

\end_inset

 show how to do so:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loading an undirected graph from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected graph from_dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:load_undirected_graph_from_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The only difference with loading a directed graph, is that the initial empty
 graph is undirected instead.
 Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_directed_graph_from_dot"

\end_inset

 describes the rationale of this function.
 
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_undirected_graph_from_dot_demo"

\end_inset

 shows how to use the 'load_undirected_graph_from_dot' function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'load_undirected_graph_from_dot' function
\begin_inset CommandInset label
LatexCommand label
name "alg:load_undirected_graph_from_dot_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration shows how the 
\begin_inset Formula $K_{2}$
\end_inset

 graph is created using the 'create_k2_graph' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

), saved and then loaded.
 The loaded graph is checked to be a 
\begin_inset Formula $K_{2}$
\end_inset

 graph.
\end_layout

\begin_layout Section
Building graphs with named vertices
\begin_inset CommandInset label
LatexCommand label
name "sec:Building-graphs-with-named-vertices"

\end_inset


\end_layout

\begin_layout Standard
Up until now, the graphs created have had edges and vertices without any
 propery.
 In this chapter, graphs will be created, in which the vertices can have
 a name.
 This name will be of the std::string data type, but other types are possible
 as well.
 There are many more built-in properties edges and nodes can have (see chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:all_properties"

\end_inset

 for a list).
\end_layout

\begin_layout Standard
In this chapter, we will build the following graphs:
\end_layout

\begin_layout Itemize
An empty directed graph that allows for vertices with names: see chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_named_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
An empty undirected graph that allows for vertices with names: see chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_undirected_named_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
Two-state Markov chain with named vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_vertices_markov_chain"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_vertices_k2_graph"

\end_inset


\end_layout

\begin_layout Standard
In the process, some basic (sometimes bordering trivial) functions are shown:
\end_layout

\begin_layout Itemize
Adding a named vertex: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_named_vertex"

\end_inset


\end_layout

\begin_layout Itemize
Getting the vertices' names: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_names"

\end_inset


\end_layout

\begin_layout Subsection
Creating an empty directed graph with named vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_directed_named_vertices_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create an empty directed graph with named vertices
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Named vertices, create empty directed graph
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Empty directed graph with named vertices, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's create a trivial empty directed graph, in which the vertices can have
 a name:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_named_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty directed graph with named vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty directed named vertices graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_named_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Instead of using a boost::adjacency_list with default template argument,
 we will now have to specify four template arguments, where we only set
 the fourth to a non-default value.
\end_layout

\begin_layout Standard
Note there is some flexibility in this function: the data type of the vertex
 names is set to std::string by default, but can be of any other type if
 desired.
\end_layout

\begin_layout Standard
This graph:
\end_layout

\begin_layout Itemize
has its out edges stored in a std::vector (due to the first boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
has its vertices stored in a std::vector (due to the second boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
is directed (due to the boost::directedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::directedS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
The vertices have one property: they have a name, which is of data type
 vertex_name_type (due to the boost::property<boost::vertex_name_t, vertex_name_
type>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_name_t
\end_layout

\end_inset

')
\end_layout

\begin_layout Itemize
Edges and graph have no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list
\end_layout

\begin_layout Standard
The boost::adjacency_list
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::adjacency_list
\end_layout

\end_inset

 has a new, fourth template argument 'boost::property< boost::vertex_name_t,
 vertex_name_type>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_name_t
\end_layout

\end_inset

'.
 This can be read as: 
\begin_inset Quotes eld
\end_inset

vertices have the property 'boost::vertex_name_t', that is of data type
 vertex_name_type'
\begin_inset Quotes erd
\end_inset

.
 Or simply: 
\begin_inset Quotes eld
\end_inset

vertices have a name that is stored as a vertex_name_type
\begin_inset Quotes erd
\end_inset

, where the vertex_name_type is std::string by default.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_directed_named_vertices_graph_demo"

\end_inset

 shows how to create such a graph:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_named_vertices_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'create_empty_directed_named_vertices_graph' function
 
\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_named_vertices_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here, two empty graphs are created, one with the default vertex name type
 of std::string, and one that stores the vertex name as an integer.
\end_layout

\begin_layout Subsection
Creating an empty undirected graph with named vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_undirected_named_vertices_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create an empty undirected graph with named vertices
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Named vertices, create empty undirected graph
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Empty undirected graph with named vertices, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's create a trivial empty undirected graph, in which the vertices can
 have a name:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_named_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty undirected graph with named vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty undirected named vertices graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_undirected_named_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This code is very similar to the code described in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_named_vertices_graph"

\end_inset

, except that the directedness (the third template argument) is undirected
 (due to the boost::undirectedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS
\end_layout

\end_inset

).
 See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_named_vertices_graph"

\end_inset

 for most of the explanation.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_undirected_named_vertices_graph_demo"

\end_inset

 shows how to create such a graph:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_named_vertices_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'create_empty_undirected_named_vertices_graph' function
 
\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_undirected_named_vertices_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here, two empty graphs are created, one with the default vertex name type
 of std::string, and one that stores the vertex name as an integer.
\end_layout

\begin_layout Subsection
Add a vertex with a name
\begin_inset CommandInset label
LatexCommand label
name "sub:add_named_vertex"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Add named vertex
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Named vertex, add
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Vertex, add named
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Adding a vertex without a name was trivially easy (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_vertex"

\end_inset

).
 Adding a vertex with a name takes slightly more work, as shown by algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_named_vertex"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_named_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Adding a vertex with a name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Add named vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_named_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Instead of calling 'boost::add_vertex' with an additional argument containing
 the name of the vertex
\begin_inset Foot
status open

\begin_layout Plain Layout
I am unsure if this would have been a good interface.
 I am sure I expected this interface myself.
 I do see a problem with multiple properties and the order of initialization,
 but initialization could simply follow the same order as the the property
 list.
\end_layout

\end_inset

, multiple things need to be done.
 When adding a new vertex to the graph, the vertex descriptor (as described
 in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

) is stored.
 After obtaining the name map from the graph (using 'get(boost::vertex_name,g)
\begin_inset Index idx
status open

\begin_layout Plain Layout
get
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_name
\end_layout

\end_inset

'), the name of the vertex is set using that vertex descriptor.
 Note that 'get' has no 'boost::' prepending it, as it lives in the same
 (global) namespace the function is in.
 Using 'boost::get' will not compile
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::get does not exist
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Using 'add_named_vertex' is straightforward, as demonstrated by algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_named_vertex_demo"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_named_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'add_named_vertex'
\begin_inset CommandInset label
LatexCommand label
name "alg:add_named_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Getting the vertices' names
\begin_inset CommandInset label
LatexCommand label
name "sub:get_vertex_names"

\end_inset


\end_layout

\begin_layout Standard
When the vertices of a graph have named vertices
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: replace std::string as the hardcoded type of a vertex property
\end_layout

\end_inset

, one can extract them as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_names.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the vertices' names
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get vertex names
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_names"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This code is very similar to 'get_vertex_out_degrees' (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_out_degrees"

\end_inset

), as also there we iterated through all vertices, accessing all vertex
 descriptors sequentially.
\end_layout

\begin_layout Standard
The names of the vertices are obtained from a boost::property_map and then
 put into a std::vector.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset

Note that the std::vector has element type 'std::string', instead of extracting
 the type from the graph.
 If you know how to do so, please email me.
\end_layout

\begin_layout Standard
The order of the vertex names may be different after saving and loading.
\end_layout

\begin_layout Standard
When trying to get the vertices' names from a graph without vertices with
 names, you will get the error 'formed reference to void' (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:formed_reference_to_void"

\end_inset

).
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_names_demo"

\end_inset

 shows how to add two named vertices, and check if the added names are retrieved
 as expected.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_names_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'get_vertex_names'
\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_names_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Creating a Markov chain with named vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_named_vertices_markov_chain"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create Markov chain with named vertices
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Markov chain with named vertices, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's create a directed non-empty graph with named vertices! 
\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
We extend the Markov chain of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_markov_chain_graph"

\end_inset

 by naming the vertices 
\begin_inset Formula $Sunny$
\end_inset

 and 
\begin_inset Formula $Rainy$
\end_inset

, as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_vertices_markov_chain"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=4cm, semithick
]   
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{every state}=[]
\end_layout

\begin_layout Plain Layout


\backslash
node[state] (A)              {$Sunny$};   
\end_layout

\begin_layout Plain Layout


\backslash
node[state] (B) [right of=A] {$Rainy$};   
\end_layout

\begin_layout Plain Layout


\backslash
path (A) edge [bend  left] node {} (B)
\end_layout

\begin_layout Plain Layout

      (A) edge [loop  left] node {} (A)
\end_layout

\begin_layout Plain Layout

      (B) edge [bend  left] node {} (A)
\end_layout

\begin_layout Plain Layout

      (B) edge [loop right] node {} (B); 
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A two-state Markov chain where the vertices have texts 
\begin_inset Formula $Sunny$
\end_inset

 and 
\begin_inset Formula $Rainy$
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:named_vertices_markov_chain"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Function to create such a graph
\end_layout

\begin_layout Standard
To create this Markov chain, the following code can be used:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_named_vertices_markov_chain.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating a Markov chain with named vertices as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_vertices_markov_chain"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create named vertices Markov chain
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_vertices_markov_chain"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the code is a repeat of algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_markov_chain_graph"

\end_inset

, 'create_markov_chain_graph'.
 In the end of the function body, the names are obtained as a boost::property_ma
p and set to the desired values.
\end_layout

\begin_layout Subsubsection
Creating such a graph
\end_layout

\begin_layout Standard
Also the demonstration code (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_markov_chain_demo"

\end_inset

) is very similar to the demonstration code of the 'create_markov_chain_graph'
 function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "create_markov_chain_demo"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_named_vertices_markov_chain_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstrating the 'create_named_vertices_markov_chain' function
\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_vertices_markov_chain_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .dot file produced
\begin_inset CommandInset label
LatexCommand label
name "sub:create_named_vertices_markov_chain.dot"

\end_inset


\end_layout

\begin_layout Standard
Because the vertices now have a name, this should be visible in the .dot
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_named_vertices_markov_chain.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 'create_named_vertices_markov_chain' function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_markov_chain"

\end_inset

), converted from graph to .dot file using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_vertices_markov_chain.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As one can see, the names are stored as a label.
 Note that if a vertex name contains a space, the name will be surrounded
 by quotes, for example '0[label=
\begin_inset Quotes erd
\end_inset

Sometimes rainy
\begin_inset Quotes erd
\end_inset

];'.
\end_layout

\begin_layout Subsubsection
The .svg file produced
\begin_inset CommandInset label
LatexCommand label
name "sub:create_named_vertices_markov_chain.svg"

\end_inset


\end_layout

\begin_layout Standard
Now that the vertices have names, this should be reflected in the .svg:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_named_vertices_markov_chain.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the 'create_named_vertices_markov_chain' function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_markov_chain"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:create_named_vertices_markov_chain.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The .svg now shows the vertex names, instead of the vertex indices.
\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_named_vertices_k2_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's create an undirected non-empty graph with named vertices! 
\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
We extend 
\begin_inset Formula $K_{2}$
\end_inset

 of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_k2_graph"

\end_inset

 by naming the vertices 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

, as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_vertices_k2_graph"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (0,0) node[fill=black,shape=circle,text=white] {$A$} 
\end_layout

\begin_layout Plain Layout

    -- (5,0) node[fill=black,shape=circle,text=white] {$B$} 
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

: a fully connected graph with two vertices with the text 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:named_vertices_k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Function to create such a graph
\end_layout

\begin_layout Standard
To create 
\begin_inset Formula $K_{2}$
\end_inset

, the following code can be used:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_named_vertices_k2_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_vertices_k2_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create named vertices K2 graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_vertices_k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the code is a repeat of algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

.
 In the end, the names are obtained as a boost::property_map and set to
 the desired names.
\end_layout

\begin_layout Subsubsection
Creating such a graph
\end_layout

\begin_layout Standard
Also the demonstration code (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph_demo"

\end_inset

) is very similar to the demonstration code of the create_k2_graph function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_named_vertices_k2_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstrating the 'create_k2_graph' function
\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_vertices_k2_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .dot file produced
\begin_inset CommandInset label
LatexCommand label
name "sub:create_named_vertices_k2.dot"

\end_inset


\end_layout

\begin_layout Standard
Because the vertices now have a name, this should be visible in the .dot
 file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_named_vertices_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 'create_named_vertices_k2' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

), converted from graph to .dot file using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_vertices_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_vertices_k2_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As one can see, the names are stored as a label.
 Note that if a vertex name contains a space, the name will be surrounded
 by quotes, for example '0[label=
\begin_inset Quotes erd
\end_inset

A and B
\begin_inset Quotes erd
\end_inset

];'.
\end_layout

\begin_layout Subsubsection
The .svg file produced
\begin_inset CommandInset label
LatexCommand label
name "sub:create_named_vertices_k2_graph.svg"

\end_inset


\end_layout

\begin_layout Standard
Now that the vertices have names, this should be reflected in the .svg:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_named_vertices_k2_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the 'create_named_vertices_k2_graph' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_markov_chain"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_vertices_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:create_named_vertices_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The .svg now shows the vertex names, instead of the vertex indices.
\end_layout

\begin_layout Section
Working on graphs with named vertices
\begin_inset CommandInset label
LatexCommand label
name "sec:Working-on-graphs-with-named-vertices"

\end_inset


\end_layout

\begin_layout Standard
When vertices have names, this name gives a way to find a vertex and working
 with it.
 This chapter shows some basic operations on graphs with named vertices.
\end_layout

\begin_layout Itemize
Check if there exists a vertex with a certain name: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:has_vertex_with_name"

\end_inset


\end_layout

\begin_layout Itemize
Find a vertex by its name: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:find_first_vertex_with_name"

\end_inset


\end_layout

\begin_layout Itemize
Get a named vertex its degree, in degree and out degree: chapter: 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_first_vertex_with_name_out_degree"

\end_inset


\end_layout

\begin_layout Itemize
Get a vertex its name from its vertex descriptor: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_name"

\end_inset


\end_layout

\begin_layout Itemize
Set a vertex its name using its vertex descriptor: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:set_vertex_name"

\end_inset


\end_layout

\begin_layout Itemize
Setting all vertices' names: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:set_vertex_names"

\end_inset


\end_layout

\begin_layout Itemize
Clear a named vertex its edges: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:clear_first_vertex_with_name"

\end_inset


\end_layout

\begin_layout Itemize
Remove a named vertex: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:remove_first_vertex_with_name"

\end_inset


\end_layout

\begin_layout Itemize
Removing an edge between two named vertices: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:remove_edge_between_vertices_with_names"

\end_inset


\end_layout

\begin_layout Itemize
Saving an directed/undirected graph with named vertices to a .dot file: chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:save_named_vertices_graph_to_dot"

\end_inset


\end_layout

\begin_layout Itemize
Loading a directed graph with named vertices from a .dot file: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_directed_named_vertices_graph_from_dot"

\end_inset


\end_layout

\begin_layout Itemize
Loading an undirected graph with named vertices from a .dot file: chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_undirected_named_vertices_graph_from_dot"

\end_inset


\end_layout

\begin_layout Standard
Especially chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:find_first_vertex_with_name"

\end_inset

 is important: 'find_first_vertex_by_name' shows how to obtain a vertex
 descriptor, which is used in later algorithms.
\end_layout

\begin_layout Subsection
Check if there exists a vertex with a certain name
\begin_inset CommandInset label
LatexCommand label
name "sub:has_vertex_with_name"

\end_inset


\end_layout

\begin_layout Standard
Before modifying our vertices, let's first determine if we can find a vertex
 by its name in a graph.
 After obtaing a name map, we obtain the vertex iterators, dereference these
 to obtain the vertex descriptors and then compare each vertex its name
 with the one desired.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_vertex_with_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find if there is vertex with a certain name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Has vertex with name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:has_vertex_with_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This function can be demonstrated as in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:has_vertex_with_name_demo"

\end_inset

, where a certain name cannot be found in an empty graph.
 After adding the desired name, it is found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_vertex_with_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'has_vertex_with_name' function
\begin_inset CommandInset label
LatexCommand label
name "alg:has_vertex_with_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this function only finds if there is at least one vertex with
 that name: it does not tell how many vertices with that name exist in the
 graph.
\end_layout

\begin_layout Subsection
Find a vertex by its name
\begin_inset CommandInset label
LatexCommand label
name "sub:find_first_vertex_with_name"

\end_inset


\end_layout

\begin_layout Standard
Where STL functions work with iterators, here we obtain a vertex descriptor
 (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

) to obtain a handle to the desired vertex.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_vertex_with_name"

\end_inset

 shows how to obtain a vertex descriptor to the first (name) vertex found
 with a specific name.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_vertex_with_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find the first vertex by its name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Find first vertex with name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_vertex_with_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the vertex descriptor obtained, one can read and modify the vertex
 and the edges surrounding it.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_vertex_with_name_demo"

\end_inset

 shows some examples of how to do so.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_vertex_with_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'find_first_vertex_with_name' function
\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_vertex_with_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Get a (named) vertex its degree, in degree and out degree
\begin_inset CommandInset label
LatexCommand label
name "sub:get_first_vertex_with_name_out_degree"

\end_inset


\end_layout

\begin_layout Standard
We already obtained all out degrees of all vertices in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_out_degrees"

\end_inset

 by just collecting all vertex descriptors.
 Here, we will search for a vertex with a certain name, obtain its vertex
 descriptor and find the number of connections it has.
 
\end_layout

\begin_layout Standard
With a vertex descriptor, we can read a vertex its types of degrees.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_vertex_with_name"

\end_inset

 shows how to find a vertex, obtain its vertex descriptor and then obtain
 the out degree from it.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_first_vertex_with_name_out_degree.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the first vertex with a certain name its out degree from its vertex
 descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get first vertex with name out degree
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_first_vertex_with_name_out_degree"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_first_vertex_with_name_out_degree_demo"

\end_inset

 shows how to use this function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_first_vertex_with_name_out_degree_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'get_first_vertex_with_name_out_degree' function
\begin_inset CommandInset label
LatexCommand label
name "alg:get_first_vertex_with_name_out_degree_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Get a vertex its name from its vertex descriptor
\begin_inset CommandInset label
LatexCommand label
name "sub:get_vertex_name"

\end_inset


\end_layout

\begin_layout Standard
This may seem a trivial paragraph, as chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_names"

\end_inset

 describes the 'get_vertex_names' algorithm, in which we get all vertices'
 names.
 But it does not allow to first find a vertex of interest and subsequently
 getting only that one its name.
\end_layout

\begin_layout Standard
To obtain the name from a vertex descriptor, one needs to pull out the name
 map and then look up the vertex of interest (I like to compare it as such:
 the vertex descriptor is a last name, the name map is a phone book, the
 desired info a phone number).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get a vertex its name from its vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get vertex name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'get_vertex_name', one first needs to obtain a vertex descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_name_demo"

\end_inset

 shows a simple example:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'get_vertex_name' function
\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Set a (named) vertex its name from its vertex descriptor
\begin_inset CommandInset label
LatexCommand label
name "sub:set_vertex_name"

\end_inset


\end_layout

\begin_layout Standard
If you know how to get the name from a vertex descriptor, setting it is
 just as easy, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_vertex_name"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_vertex_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Set a vertex its name from its vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set vertex name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_vertex_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'set_vertex_name', one first needs to obtain a vertex descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_vertex_name_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_vertex_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'set_vertex_name' function
\begin_inset CommandInset label
LatexCommand label
name "alg:set_vertex_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Setting all vertices' names
\begin_inset CommandInset label
LatexCommand label
name "sub:set_vertex_names"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Set vertices names
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertices, set names
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the vertices of a graph have named vertices and you want to set all
 their names at once:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_vertex_names.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Setting the vertices' names
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set vertex names
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_vertex_names"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is not a very usefull function if the graph is complex.
 But for just creating graphs for debugging, it may come in handy.
\end_layout

\begin_layout Subsection
Clear the edges of a named vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:clear_first_vertex_with_name"

\end_inset


\end_layout

\begin_layout Standard
A vertex descriptor can be used to clear all in/out/both edges connected
 to a vertex.
 It is necessary to remove these connections before the vertex itself can
 be removed.
 There are three functions to remove the edges connected to a vertex:
\end_layout

\begin_layout Itemize
boost::clear_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::clear_vertex
\end_layout

\end_inset

: removes all edges to and from the vertex 
\end_layout

\begin_layout Itemize
boost::clear_out_edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::clear_out_edges
\end_layout

\end_inset

: removes all outgoing edges from the vertex (in directed graphs only, else
 you will get a 'error: no matching function for call to clear_out_edges',
 as described in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:no_matching_function_for_call_to_clear_out_edges"

\end_inset

)
\end_layout

\begin_layout Itemize
boost::clear_in_edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::clear_in_edges
\end_layout

\end_inset

: removes all incoming edges from the vertex (in directed graphs only, else
 you will get a 'error: no matching function for call to clear_in_edges',
 as described in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:no_matching_function_for_call_to_clear_in_edges"

\end_inset

)
\end_layout

\begin_layout Standard
In the algorithm 'clear_first_vertex_with_name' the 'boost::clear_vertex'
 algorithm is used, as the graph used is undirectional:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "clear_first_vertex_with_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Clear the first vertex with a certain name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Clear first vertex with name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:clear_first_vertex_with_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:clear_first_vertex_with_name_demo"

\end_inset

 shows the clearing of the first named vertex found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "clear_first_vertex_with_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'clear_first_vertex_with_name' function
\begin_inset CommandInset label
LatexCommand label
name "alg:clear_first_vertex_with_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Remove a named vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:remove_first_vertex_with_name"

\end_inset


\end_layout

\begin_layout Standard
A vertex descriptor can be used to remove a vertex from a graph.
 It is necessary to remove these connections (e.g.
 using clear_first_vertex_with_name', algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:clear_first_vertex_with_name"

\end_inset

) before the vertex itself can be removed.
 
\end_layout

\begin_layout Standard
Removing a named vertex goes as follows: use the name of the vertex to get
 a first vertex descriptor, then call 'boost::remove_vertex'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::remove_vertex
\end_layout

\end_inset

, shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:clear_first_vertex_with_name"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "remove_first_vertex_with_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Remove the first vertex with a certain name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Remove first vertex with name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:remove_first_vertex_with_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:remove_first_vertex_with_name_demo"

\end_inset

 shows the removal of the first named vertex found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "remove_first_vertex_with_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'remove_first_vertex_with_name' function
\begin_inset CommandInset label
LatexCommand label
name "alg:remove_first_vertex_with_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Again, be sure that the vertex removed does not have any connections!
\end_layout

\begin_layout Subsection
Removing the edge between two named vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:remove_edge_between_vertices_with_names"

\end_inset


\end_layout

\begin_layout Standard
Instead of looking for an edge descriptor, one can also remove an edge from
 two vertex descriptors (which is: the edge between the two vertices).
 Removing an edge between two named vertices named edge goes as follows:
 use the names of the vertices to get both vertex descriptors, then call
 'boost::remove_edge'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::remove_edge
\end_layout

\end_inset

 on those two, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:remove_edge_between_vertices_with_names"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "remove_edge_between_vertices_with_names.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Remove the first edge with a certain name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Remove edge between vertices with names
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:remove_edge_between_vertices_with_names"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:remove_edge_between_vertices_with_names_demo"

\end_inset

 shows the removal of the first named edge found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "remove_edge_between_vertices_with_names_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'remove_edge_between_vertices_with_names' function
\begin_inset CommandInset label
LatexCommand label
name "alg:remove_edge_between_vertices_with_names_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Saving an directed/undirected graph with named vertices to a .dot file
\begin_inset CommandInset label
LatexCommand label
name "sub:save_named_vertices_graph_to_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Save graph with named vertices as .dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create .dot from graph with named vertices
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
If you used the 'create_named_vertices_k2_graph' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{2}$
\end_inset

 graph with named vertices, you can store these names in multiple ways:
\end_layout

\begin_layout Itemize
Using boost::make_label_writer
\end_layout

\begin_layout Itemize
Using a C++11 lambda function
\end_layout

\begin_layout Itemize
Using a C++14 lambda function
\end_layout

\begin_layout Standard
I show all three ways, because you may need all of them.
\end_layout

\begin_layout Standard
The created .dot file is shown at algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph.dot"

\end_inset

.
 
\end_layout

\begin_layout Standard
You can use all characters in the vertex without problems (for example:
 comma's, quotes, whitespace).
 This will not hold anymore for bundled and custom vertices in later chapters.
\end_layout

\begin_layout Standard
The 'save_named_vertices_graph_to_dot' functions below only save the structure
 of the graph and its vertex names.
 It ignores other edge and vertex properties.
\end_layout

\begin_layout Subsubsection
Using boost::make_label_writer
\end_layout

\begin_layout Standard
The first implemention uses boost::make_label_writer, as shown in algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_vertices_graph_to_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_named_vertices_graph_to_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Saving a graph with named vertices to a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Save named vertices graph to dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_vertices_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here, the function boost::write_graphviz
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::write_graphviz
\end_layout

\end_inset

 is called with a new, third argument.
 After collecting all names, these are used by boost::make_label_writer
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::make_label_writer
\end_layout

\end_inset

 to write the names as labels.
 
\end_layout

\begin_layout Subsubsection
Using a C++11 lambda function
\end_layout

\begin_layout Standard
An equivalent algorithm is algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_vertices_graph_to_dot_using_lambda_cpp11"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_named_vertices_graph_to_dot_using_lambda_cpp11.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Saving a graph with named vertices to a .dot file using a lambda expression
 and C++11
\begin_inset Index idx
status open

\begin_layout Plain Layout
Save named vertices graph to dot using lambda function C++11
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_vertices_graph_to_dot_using_lambda_cpp11"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this C++11 code, a lambda function is used as a third argument.
 
\end_layout

\begin_layout Standard
A lambda function is an on-the-fly function that has these parts:
\end_layout

\begin_layout Itemize
the capture brackets '[]', to take variables within the lambda function
\end_layout

\begin_layout Itemize
the function argument parentheses '()', to put the function arguments in
\end_layout

\begin_layout Itemize
the function body '{}', where to write what it does
\end_layout

\begin_layout Standard
First we create a shorthand for the vertex descriptor type, that we'll need
 to use a lambda function argument (in C++14 you can use auto).
\end_layout

\begin_layout Standard
We then create a vertex name map at function scope (in C++14 this can be
 at lambda function scope) and pass it to the lambda function using its
 capture section.
\end_layout

\begin_layout Standard
The lambda function arguments need to be two: a std::ostream& (a reference
 to a general out-stream) and a vertex descriptor.
 In the function body, we get the name of the vertex the same as the 'get_vertex
_name' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_name"

\end_inset

) and stream it to the out stream.
\end_layout

\begin_layout Subsubsection
Using a C++14 lambda function
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_named_vertices_graph_to_dot_using_lambda_cpp14.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Saving a graph with named vertices to a .dot file using a lambda expression
 and C++14
\begin_inset Index idx
status open

\begin_layout Plain Layout
Save named vertices graph to dot using lambda C++14
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_vertices_graph_to_dot_using_lambda_cpp14"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this C++14 code, a lambda function is used as a third argument.
 
\end_layout

\begin_layout Standard
A lambda function is an on-the-fly function that has these parts:
\end_layout

\begin_layout Itemize
the capture brackets '[]', to take variables within the lambda function
\end_layout

\begin_layout Itemize
the function argument parentheses '()', to put the function arguments in
\end_layout

\begin_layout Itemize
the function body '{}', where to write what it does
\end_layout

\begin_layout Standard
We create a vertex name map at lambda function scope in its capture section.
\end_layout

\begin_layout Standard
The lambda function arguments need to be two: a std::ostream& (a reference
 to a general out-stream) and a vertex descriptor.
 In the function body, we get the name of the vertex the same as the 'get_vertex
_name' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_name"

\end_inset

) and stream it to the out stream.
\end_layout

\begin_layout Subsubsection
Demonstration
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_vertices_graph_to_dot_demo"

\end_inset

 shows how to use (one of) the 'save_named_vertices_graph_to_dot' function(s):
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_named_vertices_graph_to_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'save_named_vertices_graph_to_dot' function
\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_vertices_graph_to_dot_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When using the 'save_named_vertices_graph_to_dot' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_vertices_graph_to_dot"

\end_inset

), only the structure of the graph and the vertex names are saved: all other
 properties like edge name are not stored.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_edges_and_vertices_graph_to_dot"

\end_inset

 shows how to do so.
\end_layout

\begin_layout Subsection
Loading a directed graph with named vertices from a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:load_directed_named_vertices_graph_from_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Load directed graph with named vertices from .dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create directed graph with named vertices from .dot
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
When loading a graph from file, one needs to specify a type of graph.
 In this example, an directed graph with named vertices is loaded, as shown
 in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_directed_named_vertices_graph_from_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_named_vertices_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loading a directed graph with named vertices from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load directed named vertices graph from dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:load_directed_named_vertices_graph_from_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this algorithm, first it is checked if the file to load exists.
 Then an empty directed graph is created.
 Next to this, a boost::dynamic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties
\end_layout

\end_inset

 is created with its default constructor, after which we direct the boost::dynam
ic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties
\end_layout

\end_inset

 to find a 'node_id' and 'label' in the vertex name map.
 From this and the empty graph, 'boost::read_graphviz'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::read_graphviz
\end_layout

\end_inset

 is called to build up the graph.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_directed_named_vertices_graph_from_dot_demo"

\end_inset

 shows how to use the 'load_directed_graph_from_dot' function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_named_vertices_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'load_directed_named_vertices_graph_from_dot' function
\begin_inset CommandInset label
LatexCommand label
name "alg:load_directed_named_vertices_graph_from_dot_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration shows how the Markov chain is created using the 'create_named
_vertices_markov_chain' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_markov_chain_graph"

\end_inset

), saved and then loaded.
 The loaded graph is checked to be a directed graph similar to the Markov
 chain with the same vertex names (using the 'get_vertex_names' function,
 algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_names"

\end_inset

).
\end_layout

\begin_layout Subsection
Loading an undirected graph with named vertices from a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:load_undirected_named_vertices_graph_from_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected graph with named vertices from .dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create undirected graph with named vertices from .dot
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When loading a graph from file, one needs to specify a type of graph.
 In this example, an undirected graph with named vertices is loaded, as
 shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_undirected_named_vertices_graph_from_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_named_vertices_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loading an undirected graph with named vertices from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected named vertices graph from dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:load_undirected_named_vertices_graph_from_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The only difference with loading a directed graph, is that the initial empty
 graph is undirected instead.
 Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_directed_named_vertices_graph_from_dot"

\end_inset

 describes the rationale of this function.
 
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_undirected_named_vertices_graph_from_dot_demo"

\end_inset

 shows how to use the 'load_undirected_graph_from_dot' function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_named_vertices_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'load_undirected_graph_from_dot' function
\begin_inset CommandInset label
LatexCommand label
name "alg:load_undirected_named_vertices_graph_from_dot_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration shows how 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices is created using the 'create_named_vertices_k2_graph'
 function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

), saved and then loaded.
 The loaded graph is checked to be an undirected graph similar to 
\begin_inset Formula $K_{2}$
\end_inset

 , with the same vertex names (using the 'get_vertex_names' function, algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_names"

\end_inset

).
\end_layout

\begin_layout Section
Building graphs with named edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sec:Building-graphs-with-named-edges-and-vertices"

\end_inset


\end_layout

\begin_layout Standard
Up until now, the graphs created have had edges and vertices without any
 propery.
 In this chapter, graphs will be created, in which edges vertices can have
 a name.
 This name will be of the std::string data type, but other types are possible
 as well.
 There are many more built-in properties edges and nodes can have (see the
 boost/graph/properties.hpp file for these).
\end_layout

\begin_layout Standard
In this chapter, we will build the following graphs:
\end_layout

\begin_layout Itemize
An empty directed graph that allows for edges and vertices with names: see
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_named_edges_and_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
An empty undirected graph that allows for edges and vertices with names:
 see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_undirected_named_edges_and_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
Markov chain with named edges and vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_edges_and_vertices_markov_chain"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{3}$
\end_inset

 with named edges and vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_edges_and_vertices_k3"

\end_inset


\end_layout

\begin_layout Standard
In the process, some basic (sometimes bordering trivial) functions are shown:
\end_layout

\begin_layout Itemize
Adding an named edge: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_named_edge"

\end_inset


\end_layout

\begin_layout Itemize
Getting the edges' names: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_edge_names"

\end_inset


\end_layout

\begin_layout Standard
These functions are mostly there for completion and showing which data types
 are used.
\end_layout

\begin_layout Subsection
Creating an empty directed graph with named edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_directed_named_edges_and_vertices_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create an empty directed graph with named edges and vertices
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Named edges and vertices, create empty directed graph
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Empty directed graph with named edges and vertices, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's create a trivial empty directed graph, in which the both the edges
 and vertices can have a name:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_named_edges_and_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty directed graph with named edges and vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty directed named edges and vertices graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_named_edges_and_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This graph:
\end_layout

\begin_layout Itemize
has its out edges stored in a std::vector (due to the first boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
has its vertices stored in a std::vector (due to the second boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
is directed (due to the boost::directedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::directedS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
The vertices have one property: they have a name, that is of data type std::stri
ng (due to the boost::property< boost::vertex_name_t,std::string>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_name_t
\end_layout

\end_inset

')
\end_layout

\begin_layout Itemize
The edges have one property: they have a name, that is of data type std::string
 (due to the boost::property< boost::edge_name_t,std::string>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edge_name_t
\end_layout

\end_inset

')
\end_layout

\begin_layout Itemize
The graph has no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list
\end_layout

\begin_layout Standard
The boost::adjacency_list
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::adjacency_list
\end_layout

\end_inset

 has a new, fifth template argument 'boost::property< boost::edge_name_t,std::st
ring>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edge_name_t
\end_layout

\end_inset

'.
 This can be read as: 
\begin_inset Quotes eld
\end_inset

edges have the property 'boost::edge_name_t', that is of data type 'std::string'
\begin_inset Quotes erd
\end_inset

.
 Or simply: 
\begin_inset Quotes eld
\end_inset

edges have a name that is stored as a std::string
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_directed_named_edges_and_vertices_graph_demo"

\end_inset

 shows how to create this graph.
 Note that all the earlier functions defined in this tutorial keep working
 as expected.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_named_edges_and_vertices_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'create_empty_directed_named_edges_and_vertices_graph'
 function 
\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_named_edges_and_vertices_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Creating an empty undirected graph with named edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_undirected_named_edges_and_vertices_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create an empty graph with named edges and vertices
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Named edges and vertices, create empty graph
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Empty graph with named edges and vertices, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's create a trivial empty undirected graph, in which the both the edges
 and vertices can have a name:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_named_edges_and_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty undirected graph with named edges and vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty undirected named edges and vertices graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_undirected_named_edges_and_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This graph:
\end_layout

\begin_layout Itemize
has its out edges stored in a std::vector (due to the first boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
has its vertices stored in a std::vector (due to the second boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
is undirected (due to the boost::undirectedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
The vertices have one property: they have a name, that is of data type std::stri
ng (due to the boost::property< boost::vertex_name_t,std::string>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_name_t
\end_layout

\end_inset

')
\end_layout

\begin_layout Itemize
The edges have one property: they have a name, that is of data type std::string
 (due to the boost::property< boost::edge_name_t,std::string>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edge_name_t
\end_layout

\end_inset

')
\end_layout

\begin_layout Itemize
The graph has no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list
\end_layout

\begin_layout Standard
The boost::adjacency_list
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::adjacency_list
\end_layout

\end_inset

 has a new, fifth template argument 'boost::property< boost::edge_name_t,std::st
ring>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edge_name_t
\end_layout

\end_inset

'.
 This can be read as: 
\begin_inset Quotes eld
\end_inset

edges have the property 'boost::edge_name_t', that is of data type 'std::string'
\begin_inset Quotes erd
\end_inset

.
 Or simply: 
\begin_inset Quotes eld
\end_inset

edges have a name that is stored as a std::string
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_undirected_named_edges_and_vertices_graph_demo"

\end_inset

 shows how to create this graph.
 Note that all the earlier functions defined in this tutorial keep working
 as expected.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_named_edges_and_vertices_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'create_empty_undirected_named_edges_and_vertices_graph'
 function 
\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_undirected_named_edges_and_vertices_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Adding a named edge
\begin_inset CommandInset label
LatexCommand label
name "sub:add_named_edge"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Add named edge
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Named edge, add
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Adding an edge with a name:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_named_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Add a vertex with a name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Add named edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_named_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this code snippet, the edge descriptor (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Edge-descriptors"

\end_inset

 if you need to refresh your memory) when using 'boost::add_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge
\end_layout

\end_inset

' is used as a key to change the edge its name map.
\end_layout

\begin_layout Standard
The algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_named_edge_demo"

\end_inset

 shows how to add a named edge to an empty graph.
 When trying to add named vertices to graph without this property, you will
 get the error 'formed reference to void' (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:formed_reference_to_void"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_named_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'add_named_edge' function
\begin_inset CommandInset label
LatexCommand label
name "alg:add_named_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Getting the edges' names
\begin_inset CommandInset label
LatexCommand label
name "sub:get_edge_names"

\end_inset


\end_layout

\begin_layout Standard
When the edges of a graph have named vertices
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: replace std::string as the hardcoded type of a vertex property
\end_layout

\end_inset

, one can extract them as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_names.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the edges' names
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
get_edge_names
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_names"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The names of the edges are obtained from a boost::property_map and then
 put into a std::vector.
 The algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_edge_names_demo"

\end_inset

 shows how to apply this function.
 
\end_layout

\begin_layout Standard
The order of the edge names may be different after saving and loading.
\end_layout

\begin_layout Standard
Would you dare to try to get the edges' names from a graph without vertices
 with names, you will get the error 'formed reference to void' (see chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:formed_reference_to_void"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_names_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'get_edge_names' function
\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_names_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Creating Markov chain with named edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_named_edges_and_vertices_markov_chain"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create Markov chain with named edges and vertices
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Markov chain with named edges and vertices, create
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
We build this graph:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=4cm, semithick
]   
\end_layout

\begin_layout Plain Layout

  
\backslash
tikzstyle{every state}=[]
\end_layout

\begin_layout Plain Layout

  
\backslash
node[state] (A)              {$Sunny$};   
\end_layout

\begin_layout Plain Layout

  
\backslash
node[state] (B) [right of=A] {$Rainy$};   
\end_layout

\begin_layout Plain Layout

  
\backslash
path (A) edge [loop  left] node {$Sometimes$} (A)
\end_layout

\begin_layout Plain Layout

        (A) edge [bend  left] node {    $Often$} (B)
\end_layout

\begin_layout Plain Layout

        (B) edge [bend  left] node {   $Rarely$} (A)
\end_layout

\begin_layout Plain Layout

        (B) edge [loop right] node {   $Mostly$} (B); 
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A two-state Markov chain where the vertices have texts 
\begin_inset Formula $Sunny$
\end_inset

 and 
\begin_inset Formula $Rainy$
\end_inset

, and the edges have texts 
\begin_inset Formula $Sometimes$
\end_inset

, 
\begin_inset Formula $Often$
\end_inset

, 
\begin_inset Formula $Rarely$
\end_inset

 and 
\begin_inset Formula $Mostly$
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:named_edges_and_vertices_markov_chain"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Function to create such a graph
\end_layout

\begin_layout Standard
Here is the code:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_named_edges_and_vertices_markov_chain.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating the two-state Markov chain as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_edges_and_vertices_markov_chain"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create named edges and vertices Markov chain
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_edges_and_vertices_markov_chain"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Creating such a graph
\end_layout

\begin_layout Standard
Here is the demo:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_named_edges_and_vertices_markov_chain_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demo of the 'create_named_edges_and_vertices_markov_chain' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_markov_chain"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_edges_and_vertices_markov_chain_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .dot file produced
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_named_edges_and_vertices_markov_chain.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 'create_named_edges_and_vertices_markov_chain'
 function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_markov_chain"

\end_inset

), converted from graph to .dot file using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_edges_and_vertices_markov_chain.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .svg file produced
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_named_edges_and_vertices_markov_chain.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the 'create_named_edges_and_vertices_markov_chain'
 function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_markov_chain"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:create_named_edges_and_vertices_markov_chain.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 with named edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_named_edges_and_vertices_k3"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create 
\begin_inset Formula $K_{3}$
\end_inset

 with named edges and vertices
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $K_{3}$
\end_inset

 with named edges and vertices, create
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
We extend the graph 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_vertices_k2_graph"

\end_inset

 by adding names to the edges, as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_edges_and_vertices_k3"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (2,4) node[fill=black,shape=circle,text=white] {top} 
\end_layout

\begin_layout Plain Layout

   -- (3,2) node[anchor=west] {AB} 
\end_layout

\begin_layout Plain Layout

   -- (4,0) node[fill=black,shape=circle,text=white] {right} 
\end_layout

\begin_layout Plain Layout

   -- (2,0) node[anchor=north] {BC} 
\end_layout

\begin_layout Plain Layout

   -- (0,0) node[fill=black,shape=circle,text=white] {left} 
\end_layout

\begin_layout Plain Layout

   -- (1,2) node[anchor=east] {CA} 
\end_layout

\begin_layout Plain Layout

   -- (2,4)
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Formula $K_{3}$
\end_inset

: a fully connected graph with three named edges and vertices 
\begin_inset CommandInset label
LatexCommand label
name "fig:named_edges_and_vertices_k3"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Function to create such a graph
\end_layout

\begin_layout Standard
To create 
\begin_inset Formula $K_{3}$
\end_inset

, the following code can be used:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_named_edges_and_vertices_k3_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_edges_and_vertices_k3"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create named edges and vertices K3 graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_edges_and_vertices_k3_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the code is a repeat of algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

.
 In the end, the edge names are obtained as a boost::property_map and set.
 
\end_layout

\begin_layout Subsubsection
Creating such a graph
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3_graph_demo"

\end_inset

 shows how to create the graph and measure its edge and vertex names.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_named_edges_and_vertices_k3_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'create_named_edges_and_vertices_k3' function
\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_edges_and_vertices_k3_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .dot file produced
\begin_inset CommandInset label
LatexCommand label
name "sub:create_named_edges_and_vertices_k3_graph.dot"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_named_edges_and_vertices_k3_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 'create_named_edges_and_vertices_k3_graph' function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3_graph"

\end_inset

), converted from graph to .dot file using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_edges_and_vertices_k3_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .svg file produced
\begin_inset CommandInset label
LatexCommand label
name "sub:create_named_edges_and_vertices_k3_graph.svg"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_named_edges_and_vertices_k3_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the 'create_named_edges_and_vertices_k3_graph' function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3_graph"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:create_named_edges_and_vertices_k3_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Working on graphs with named edges and vertices
\end_layout

\begin_layout Standard
Working with named edges...
\end_layout

\begin_layout Itemize
Check if there exists an edge with a certain name: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:has_edge_with_name"

\end_inset


\end_layout

\begin_layout Itemize
Find a (named) edge by its name: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:find_first_edge_with_name"

\end_inset


\end_layout

\begin_layout Itemize
Get a (named) edge its name from its edge descriptor: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_edge_name"

\end_inset


\end_layout

\begin_layout Itemize
Set a (named) edge its name using its edge descriptor: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:set_edge_name"

\end_inset

 
\end_layout

\begin_layout Itemize
Remove a named edge: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:remove_first_edge_with_name"

\end_inset


\end_layout

\begin_layout Itemize
Saving a graph with named edges and vertices to a .dot file: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:save_named_edges_and_vertices_undirected_graph_to_dot"

\end_inset


\end_layout

\begin_layout Itemize
Loading a directed graph with named edges and vertices from a .dot file:
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_directed_named_edges_and_vertices_graph_from_dot"

\end_inset


\end_layout

\begin_layout Itemize
Loading an undirected graph with named edges and vertices from a .dot file:
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_undirected_named_edges_and_vertices_graph_from_dot"

\end_inset


\end_layout

\begin_layout Standard
Especially chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:find_first_edge_with_name"

\end_inset

 with the 'find_first_edge_by_name' algorithm shows how to obtain an edge
 descriptor, which is used in later algorithms.
\end_layout

\begin_layout Subsection
Check if there exists an edge with a certain name
\begin_inset CommandInset label
LatexCommand label
name "sub:has_edge_with_name"

\end_inset


\end_layout

\begin_layout Standard
Before modifying our edges, let's first determine if we can find an edge
 by its name in a graph.
 After obtaing a name map, we obtain the edge iterators, dereference these
 to obtain the edge descriptors and then compare each edge its name with
 the one desired.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_edge_with_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find if there is an edge with a certain name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Has edge with name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:has_edge_with_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This function can be demonstrated as in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:has_edge_with_name_demo"

\end_inset

, where a certain name cannot be found in an empty graph.
 After adding the desired name, it is found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_edge_with_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'has_edge_with_name' function
\begin_inset CommandInset label
LatexCommand label
name "alg:has_edge_with_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this function only finds if there is at least one edge with that
 name: it does not tell how many edges with that name exist in the graph.
\end_layout

\begin_layout Subsection
Find an edge by its name
\begin_inset CommandInset label
LatexCommand label
name "sub:find_first_edge_with_name"

\end_inset


\end_layout

\begin_layout Standard
Where STL functions work with iterators, here we obtain an edge descriptor
 (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Edge-descriptors"

\end_inset

) to obtain a handle to the desired edge.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_edge_with_name"

\end_inset

 shows how to obtain an edge descriptor to the first (name) edge found with
 a specific name.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_edge_with_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find the first edge by its name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Find first edge by name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_edge_with_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the edge descriptor obtained, one can read and modify the graph.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_edge_with_name_demo"

\end_inset

 shows some examples of how to do so.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_edge_with_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'find_first_edge_by_name' function
\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_edge_with_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Get a (named) edge its name from its edge descriptor
\begin_inset CommandInset label
LatexCommand label
name "sub:get_edge_name"

\end_inset


\end_layout

\begin_layout Standard
This may seem a trivial paragraph, as chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_edge_names"

\end_inset

 describes the 'get_edge_names' algorithm, in which we get all edges' names.
 But it does not allow to first find an edge of interest and subsequently
 getting only that one its name.
\end_layout

\begin_layout Standard
To obtain the name from an edgedescriptor, one needs to pull out the name
 map and then look up the edge of interest.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get an edge its name from its edge descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get edge name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'get_edge_name', one first needs to obtain an edge descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_edge_name_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'get_edge_name' function
\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Set a (named) edge its name from its edge descriptor
\begin_inset CommandInset label
LatexCommand label
name "sub:set_edge_name"

\end_inset


\end_layout

\begin_layout Standard
If you know how to get the name from an edge descriptor, setting it is just
 as easy, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_edge_name"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_edge_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Set an edge its name from its edge descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set edge name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_edge_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'set_edge_name', one first needs to obtain an edge descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_edge_name_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_edge_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'set_edge_name' function
\begin_inset CommandInset label
LatexCommand label
name "alg:set_edge_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Removing the first edge with a certain name
\begin_inset CommandInset label
LatexCommand label
name "sub:remove_first_edge_with_name"

\end_inset


\end_layout

\begin_layout Standard
An edge descriptor can be used to remove an edge from a graph.
 
\end_layout

\begin_layout Standard
Removing a named edge goes as follows: use the name of the edge to get a
 first edge descriptor, then call 'boost::remove_edge'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::remove_edge
\end_layout

\end_inset

, shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:remove_first_vertex_with_name"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "remove_first_edge_with_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Remove the first edge with a certain name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Remove first edge with name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:remove_first_edge_with_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:remove_first_edge_with_name_demo"

\end_inset

 shows the removal of the first named edge found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "remove_first_edge_with_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'remove_first_edge_with_name' function
\begin_inset CommandInset label
LatexCommand label
name "alg:remove_first_edge_with_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Saving an undirected graph with named edges and vertices as a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:save_named_edges_and_vertices_undirected_graph_to_dot"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Save graph with name edges and vertices as .dot
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Create .dot from graph with named edges and vertices
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you used the create_named_edges_and_vertices_k3_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{3}$
\end_inset

 graph with named edges and vertices, you can store these names additionally
 with algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_edges_and_vertices_graph_to_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_named_edges_and_vertices_graph_to_dot_cpp11.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Saving an undirected graph with named edges and vertices to a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Save named edges and vertices graph to dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_edges_and_vertices_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This a C++11
\begin_inset Index idx
status open

\begin_layout Plain Layout
C++11
\end_layout

\end_inset

 implementation.
\end_layout

\begin_layout Standard
The .dot file created is displayed in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_edges_and_vertices_graph_to_dot_test_named_vertices_k3_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_named_edges_and_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the create_named_edges_and_vertices_k3_graph function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_edges_and_vertices_graph_to_dot_test_named_vertices_k3_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .dot file corresponds to figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:save_named_edges_and_vertices_graph_to_dot_test_named_vertices_k2_graph.svg"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename save_named_edges_and_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the create_named_edges_and_vertices_k3_graph function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

) and converted to .svg using the 'convert_dot_to_svg' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "fig:save_named_edges_and_vertices_graph_to_dot_test_named_vertices_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you created a graph with edges more complex than just a name, you will
 still just write these to the .dot file.
 Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:save_custom_vertices_graph_to_dot"

\end_inset

 shows how to write custom vertices to a .dot file.
\end_layout

\begin_layout Standard
So, the 'save_named_edges_and_vertices_graph_to_dot' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset

) saves only the structure of the graph and its edge and vertex names.
\end_layout

\begin_layout Subsection
Loading a directed graph with named edges and vertices from a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:load_directed_named_edges_and_vertices_graph_from_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Load directed graph with named edges and vertices from .dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create directed graph with named edges and vertices from .dot
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
When loading a graph from file, one needs to specify a type of graph.
 In this example, an directed graph with named edges and vertices is loaded,
 as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_directed_named_edges_and_vertices_graph_from_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_named_edges_and_vertices_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loading a directed graph with named edges and vertices from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load directed named edges and vertices graph from dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:load_directed_named_edges_and_vertices_graph_from_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this algorithm, first it is checked if the file to load exists.
 Then an empty directed graph is created.
 Next to this, a boost::dynamic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties
\end_layout

\end_inset

 is created with its default constructor, after which we direct the boost::dynam
ic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties
\end_layout

\end_inset

 to find a 'node_id' and 'label' in the vertex name map, 'edge_id' and 'label
 to the edge name map.
 From this and the empty graph, 'boost::read_graphviz'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::read_graphviz
\end_layout

\end_inset

 is called to build up the graph.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_directed_named_edges_and_vertices_graph_from_dot_demo"

\end_inset

 shows how to use the 'load_directed_graph_from_dot' function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_named_edges_and_vertices_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'load_directed_named_edges_and_vertices_graph_from_dot'
 function
\begin_inset CommandInset label
LatexCommand label
name "alg:load_directed_named_edges_and_vertices_graph_from_dot_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration shows how the Markov chain is created using the 'create_named
_edges_and_vertices_markov_chain' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_markov_chain"

\end_inset

), saved and then loaded.
 The loaded graph is checked to be a directed graph similar to the Markov
 chain with the same edge and vertex names (using the 'get_edge_names' function
 , algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_edge_names"

\end_inset

, and the 'get_vertex_names' function, algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_names"

\end_inset

).
\end_layout

\begin_layout Subsection
Loading an undirected graph with named edges and vertices from a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:load_undirected_named_edges_and_vertices_graph_from_dot"

\end_inset


\end_layout

\begin_layout Standard
When loading a graph from file, one needs to specify a type of graph.
 In this example, an undirected graph with named edges and vertices is loaded,
 as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_undirected_named_edges_and_vertices_graph_from_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_named_edges_and_vertices_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loading an undirected graph with named edges and vertices from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected named edges and vertices graph from dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:load_undirected_named_edges_and_vertices_graph_from_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The only difference with loading a directed graph, is that the initial empty
 graph is undirected instead.
 Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_directed_named_edges_and_vertices_graph_from_dot"

\end_inset

 describes the rationale of this function.
 
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_undirected_named_edges_and_vertices_graph_from_dot_demo"

\end_inset

 shows how to use the 'load_undirected_graph_from_dot' function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_named_edges_and_vertices_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'load_undirected_named_edges_and_vertices_graph_from_dot'
 function
\begin_inset CommandInset label
LatexCommand label
name "alg:load_undirected_named_edges_and_vertices_graph_from_dot_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration shows how 
\begin_inset Formula $K_{3}$
\end_inset

 with named edges and vertices is created using the 'create_named_edges_and_vert
ices_k3_graph' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3_graph"

\end_inset

), saved and then loaded.
 The loaded graph is checked to be an undirected graph similar to 
\begin_inset Formula $K_{3}$
\end_inset

 , with the same edge and vertex names (using the 'get_edge_names' function
 , algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_edge_names"

\end_inset

, and the 'get_vertex_names' function, algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_names"

\end_inset

).
\end_layout

\begin_layout Section
Building graphs with bundled vertices
\begin_inset CommandInset label
LatexCommand label
name "sec:Building-graphs-with-bundled-vertices"

\end_inset


\end_layout

\begin_layout Standard
Up until now, the graphs created have had edges and vertices with the built-in
 name propery.
 In this chapter, graphs will be created, in which the vertices can have
 a bundled 'my_bundled_vertex' type
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
I do not intend to be original in naming my data types
\end_layout

\end_inset

.
 The following graphs will be created:
\end_layout

\begin_layout Itemize
An empty directed graph that allows for bundled vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_directed_bundled_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
An empty undirected graph that allows for bundled vertices: see chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_bundled_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
A two-state Markov chain with bundled vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_bundled_vertices_markov_chain"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{2}$
\end_inset

with bundled vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_bundled_vertices_k2_graph"

\end_inset


\end_layout

\begin_layout Standard
In the process, some basic (sometimes bordering trivial) functions are shown:
\end_layout

\begin_layout Itemize
Create the vertex class, called 'my_bundled_vertex': see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:my_bundled_vertex"

\end_inset


\end_layout

\begin_layout Itemize
Adding a 'my_bundled_vertex': see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_bundled_vertex"

\end_inset


\end_layout

\begin_layout Itemize
Getting the vertices 'my_bundled_vertex'-es: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_bundled_vertex_my_vertexes"

\end_inset


\end_layout

\begin_layout Standard
These functions are mostly there for completion and showing which data types
 are used.
\end_layout

\begin_layout Subsection
Creating the bundled vertex class
\begin_inset CommandInset label
LatexCommand label
name "sub:my_bundled_vertex"

\end_inset


\end_layout

\begin_layout Standard
Before creating an empty graph with bundled vertices, that bundled vertex
 class must be created.
 In this tutorial, it is called 'my_bundled_vertex'.
 'my_bundled_vertex' is a class that is nonsensical, but it can be replaced
 by any other class type.
\end_layout

\begin_layout Standard
Here I will show the header file of 'my_bundled_vertex', as the implementation
 of it is not important:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "my_bundled_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Declaration of my_bundled_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_vertex
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_vertex.h
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_vertex declaration
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Declaration, my_bundled_vertex 
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:my_bundled_vertex_h"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
'my_bundled_vertex' is a class that has multiple properties: 
\end_layout

\begin_layout Itemize
It has four public member variables: the double 'm_x' ('m_
\begin_inset Index idx
status open

\begin_layout Plain Layout
m_
\end_layout

\end_inset

' stands for member
\begin_inset Index idx
status open

\begin_layout Plain Layout
member
\end_layout

\end_inset

), the double 'm_y', the std::string m_name and the std::string m_description.
 These variables must be public
\end_layout

\begin_layout Itemize
It has a default constructor
\end_layout

\begin_layout Itemize
It is copyable
\end_layout

\begin_layout Itemize
It is comparable for equality (it has operator==), which is needed for searching
\end_layout

\begin_layout Standard
'my_bundled_vertex' does not have to have the stream operators defined for
 file I/O, as this goes via the public member variables.
\end_layout

\begin_layout Subsection
Create the empty directed graph with bundled vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_directed_bundled_vertices_graph"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_bundled_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty directed graph with bundled vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty directed bundled vertices graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_bundled_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This graph:
\end_layout

\begin_layout Itemize
has its out edges stored in a std::vector (due to the first boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
has its vertices stored in a std::vector (due to the second boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
is directed (due to the boost::directedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::directedS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
The vertices have one property: they have a bundled type, that is of data
 type 'my_bundled_vertex'
\end_layout

\begin_layout Itemize
The edges and graph have no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list
\end_layout

\begin_layout Standard
The boost::adjacency_list has a new, fourth template argument 'my_bundled_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_vertex
\end_layout

\end_inset

'.
 This can be read as: 
\begin_inset Quotes eld
\end_inset

vertices have the bundled property 'my_bundled_vertex'
\begin_inset Quotes erd
\end_inset

.
 Or simply: 
\begin_inset Quotes eld
\end_inset

vertices have a bundled type called my_bundled_vertex
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Create the empty undirected graph with bundled vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_undirected_bundled_vertices_graph"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_bundled_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty undirected graph with bundled vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty undirected bundled vertices graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_undirected_bundled_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This code is very similar to the code described in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_bundled_vertices_graph"

\end_inset

, except that the directedness (the third template argument) is undirected
 (due to the boost::undirectedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS
\end_layout

\end_inset

).
\end_layout

\begin_layout Subsection
Add a bundled vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:add_bundled_vertex"

\end_inset


\end_layout

\begin_layout Standard
Adding a bundled vertex is very similar to adding a named vertex (chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_named_vertex"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_bundled_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Add a bundled vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
Add bundled vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_bundled_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When having added a new (abstract) vertex to the graph, the vertex descriptor
 is used to set the 'my_bundled_vertex' in the graph.
\end_layout

\begin_layout Subsection
Getting the bundled vertices' my_vertexes
\begin_inset Foot
status open

\begin_layout Plain Layout
the name 'my_vertexes' is chosen to indicate this function returns a container
 of my_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:get_bundled_vertex_my_vertexes"

\end_inset


\end_layout

\begin_layout Standard
When the vertices of a graph have any bundled 'my_bundled_vertex', one can
 extract these as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_bundled_vertex_my_vertexes.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the bundled vertices' my_vertexes
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get bundled vertex my_vertexes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_bundled_vertex_my_vertexes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 'my_bundled_vertex' bundled in each vertex is obtained from a vertex
 descriptor and then put into a std::vector.
\end_layout

\begin_layout Standard
The order of the 'my_bundled_vertex' objects may be different after saving
 and loading.
\end_layout

\begin_layout Standard
When trying to get the vertices' my_bundled_vertex from a graph without
 these, you will get the error 'formed reference to void' (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:formed_reference_to_void"

\end_inset

).
\end_layout

\begin_layout Subsection
Creating a two-state Markov chain with bundled vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_bundled_vertices_markov_chain"

\end_inset


\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:bundled_vertices_markov_chain"

\end_inset

 shows the graph that will be reproduced:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=4cm, semithick
]   
\end_layout

\begin_layout Plain Layout

  
\backslash
tikzstyle{every state}=[]
\end_layout

\begin_layout Plain Layout

  
\backslash
node[state] (A) 
\end_layout

\begin_layout Plain Layout

    {Sunny, Yellow thing, 1.0, 2.0};   
\end_layout

\begin_layout Plain Layout

  
\backslash
node[state] (B) [right of=A] 
\end_layout

\begin_layout Plain Layout

    {Rainy, Grey things, 3.0, 4.0}
\end_layout

\begin_layout Plain Layout

  ;   
\end_layout

\begin_layout Plain Layout

  
\backslash
path (A) edge [loop  left] node {} (A)
\end_layout

\begin_layout Plain Layout

        (A) edge [bend  left] node {} (B)
\end_layout

\begin_layout Plain Layout

        (B) edge [bend  left] node {} (A)
\end_layout

\begin_layout Plain Layout

        (B) edge [loop right] node {} (B); 
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A two-state Markov chain where the vertices have bundled properies and the
 edges have no properties.
 The vertices' properties are nonsensical
\begin_inset CommandInset label
LatexCommand label
name "fig:bundled_vertices_markov_chain"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Function to create such a graph
\end_layout

\begin_layout Standard
Here is the code creating a two-state Markov chain with bundled vertices:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_bundled_vertices_markov_chain.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating the two-state Markov chain as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:bundled_vertices_markov_chain"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create bundled vertices Markov chain
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_bundled_vertices_markov_chain"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Creating such a graph
\end_layout

\begin_layout Standard
Here is the demo:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_bundled_vertices_markov_chain_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demo of the 'create_bundled_vertices_markov_chain' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_bundled_vertices_markov_chain"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:create_bundled_and_vertices_markov_chain_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .dot file produced
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
:-( 
\begin_inset Note Note
status open

\begin_layout Plain Layout
create_bundled_vertices_markov_chain.dot cannot be created
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 'create_bundled_vertices_markov_chain' function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_bundled_vertices_markov_chain"

\end_inset

), converted from graph to .dot file using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_bundled_vertices_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_bundled_vertices_markov_chain.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
I am unaware how to convert this graph to a .dot file in such a way it can
 be correctly converted back again.
 The problem is in the function 'load_directed_bundled_vertices_graph_from_dot'
 (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_directed_bundled_vertices_graph_from_dot"

\end_inset

).
\end_layout

\begin_layout Subsubsection
The .svg file produced
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
:-( 
\begin_inset Note Note
status open

\begin_layout Plain Layout
create_bundled_vertices_markov_chain.svg cannot be created
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the 'create_bundled_vertices_markov_chain' function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_bundled_vertices_markov_chain"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:create_bundled_vertices_markov_chain.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
No .dot file, no .svg file...
\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 with bundled vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_bundled_vertices_k2_graph"

\end_inset


\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
We reproduce the 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_vertices_k2_graph"

\end_inset

 , but with our bundled vertices intead.
\end_layout

\begin_layout Subsubsection
Function to create such a graph
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_bundled_vertices_k2_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_vertices_k2_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create bundled vertices K2 graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_bundled_vertices_k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the code is a slight modification of the 'create_named_vertices_k2_graph
' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

).
 In the end, (references to) the my_bundled_vertices are obtained and set
 with two bundled my_bundled_vertex objects.
\end_layout

\begin_layout Subsubsection
Creating such a graph
\end_layout

\begin_layout Standard
Demo:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_bundled_vertices_k2_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demo of the 'create_bundled_vertices_k2_graph' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_bundled_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:create_bundled_vertices_k2_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .dot file produced
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
:-( 
\begin_inset Note Note
status open

\begin_layout Plain Layout
create_bundled_vertices_k2_graph.dot cannot be created
\end_layout

\end_inset

 
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 'create_bundled_vertices_k2_graph' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_bundled_vertices_k2_graph"

\end_inset

), converted from graph to .dot file using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_bundled_vertices_k2_graph.dot-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .svg file produced
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
:-( 
\begin_inset Note Note
status open

\begin_layout Plain Layout
create_bundled_vertices_k2_graph.svg cannot be created
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the 'create_bundled_vertices_k2_graph' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_bundled_vertices_k2_graph"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:create_bundled_vertices_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Working on graphs with bundled vertices
\begin_inset CommandInset label
LatexCommand label
name "sec:Working-on-graphs-with-bundled-vertices"

\end_inset


\end_layout

\begin_layout Standard
When using graphs with bundled vertices, their state gives a way to find
 a vertex and working with it.
 This chapter shows some basic operations on graphs with bundled vertices.
\end_layout

\begin_layout Itemize
Check if there exists a vertex with a certain 'my_bundled_vertex': chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:has_bundled_vertex_with_my_vertex"

\end_inset


\end_layout

\begin_layout Itemize
Find a vertex with a certain 'my_bundled_vertex': chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:find_bundled_vertex_with_my_vertex"

\end_inset


\end_layout

\begin_layout Itemize
Get a vertex its 'my_bundled_vertex' from its vertex descriptor: chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_bundled_vertex_my_vertex"

\end_inset


\end_layout

\begin_layout Itemize
Set a vertex its 'my_bundled_vertex' using its vertex descriptor: chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:set_bundled_vertex_my_vertex"

\end_inset


\end_layout

\begin_layout Itemize
Setting all vertices their 'my_bundled_vertex'-es: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:set_bundled_vertex_my_vertexes"

\end_inset


\end_layout

\begin_layout Itemize
Storing an directed/undirected graph with bundled vertices as a .dot file:
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:save_bundled_vertices_graph_to_dot"

\end_inset


\end_layout

\begin_layout Itemize
Loading a directed graph with bundled vertices from a .dot file: chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_directed_bundled_vertices_graph_from_dot"

\end_inset


\end_layout

\begin_layout Itemize
Loading an undirected directed graph with bundled vertices from a .dot file:
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_undirected_bundled_vertices_graph_from_dot"

\end_inset


\end_layout

\begin_layout Subsection
Has a bundled vertex with a my_bundled_vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:has_bundled_vertex_with_my_vertex"

\end_inset


\end_layout

\begin_layout Standard
Before modifying our vertices, let's first determine if we can find a vertex
 by its bundled type ('my_bundled_vertex') in a graph.
 After obtain the vertex iterators, we can dereference each these to obtain
 the vertex descriptors and then compare each vertex its 'my_bundled_vertex'
 with the one desired.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_bundled_vertex_with_my_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find if there is vertex with a certain my_bundled_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
Has bundled vertex with my_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:has_bundled_vertex_with_my_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This function can be demonstrated as in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:has_bundled_vertex_with_my_vertex_demo"

\end_inset

, where a certain my_bundled_vertex cannot be found in an empty graph.
 After adding the desired my_bundled_vertex, it is found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_bundled_vertex_with_my_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'has_bundled_vertex_with_my_vertex' function
\begin_inset CommandInset label
LatexCommand label
name "alg:has_bundled_vertex_with_my_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this function only finds if there is at least one bundled vertex
 with that my_bundled_vertex: it does not tell how many bundled vertices
 with that my_bundled_vertex exist in the graph.
\end_layout

\begin_layout Subsection
Find a bundled vertex with a certain my_bundled_vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:find_bundled_vertex_with_my_vertex"

\end_inset


\end_layout

\begin_layout Standard
Where STL functions work with iterators, here we obtain a vertex descriptor
 (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

) to obtain a handle to the desired vertex.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_bundled_vertex_with_my_vertex"

\end_inset

 shows how to obtain a vertex descriptor to the first vertex found with
 a specific 'my_bundled_vertex' value.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_bundled_vertex_with_my_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find the first vertex with a certain my_bundled_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
Find first bundled vertex with my_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_bundled_vertex_with_my_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the vertex descriptor obtained, one can read and modify the vertex
 and the edges surrounding it.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_bundled_vertex_with_my_vertex_demo"

\end_inset

 shows some examples of how to do so.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_bundled_vertex_with_my_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'find_first_bundled_vertex_with_my_vertex' function
\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_bundled_vertex_with_my_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Get a bundled vertex its 'my_bundled_vertex'
\begin_inset CommandInset label
LatexCommand label
name "sub:get_bundled_vertex_my_vertex"

\end_inset


\end_layout

\begin_layout Standard
To obtain the 'my_bundled_vertex' from a vertex descriptor is simple:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_bundled_vertex_my_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get a bundled vertex its my_vertex from its vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get bundled vertex my_bundled_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_bundled_vertex_my_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
One can just use the graph as a property map and let it be looked-up.
\end_layout

\begin_layout Standard
To use 'get_bundled_vertex_my_vertex', one first needs to obtain a vertex
 descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_bundled_vertex_my_vertex_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_bundled_vertex_my_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'get_bundled_vertex_my_vertex' function
\begin_inset CommandInset label
LatexCommand label
name "alg:get_bundled_vertex_my_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Set a bundled vertex its my_vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:set_bundled_vertex_my_vertex"

\end_inset


\end_layout

\begin_layout Standard
If you know how to get the 'my_bundled_vertex' from a vertex descriptor,
 setting it is just as easy, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_bundled_vertex_my_vertex"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_bundled_vertex_my_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Set a bundled vertex its my_vertex from its vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set vertex my_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_bundled_vertex_my_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'set_bundled_vertex_my_vertex', one first needs to obtain a vertex
 descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_bundled_vertex_my_vertex_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_bundled_vertex_my_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'set_bundled_vertex_my_vertex' function
\begin_inset CommandInset label
LatexCommand label
name "alg:set_bundled_vertex_my_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Setting all bundled vertices' my_vertex objects
\begin_inset CommandInset label
LatexCommand label
name "sub:set_bundled_vertex_my_vertexes"

\end_inset


\end_layout

\begin_layout Standard
When the vertices of a graph are 'my_bundled_vertex' objects, one can set
 these as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_bundled_vertex_my_vertexes.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Setting the bundled vertices' 'my_bundled_vertex'-es
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set bundled vertex my_bundled_vertexes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_bundled_vertex_my_vertexes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Storing a graph with bundled vertices as a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:save_bundled_vertices_graph_to_dot"

\end_inset


\end_layout

\begin_layout Standard
If you used the 'create_bundled_vertices_k2_graph' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_bundled_vertices_k2_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{2}$
\end_inset

 graph with vertices associated with 'my_bundled_vertex' objects, you can
 store these with algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_bundled_vertices_graph_to_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_bundled_vertices_graph_to_dot_cpp14.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing a graph with bundled vertices as a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Save bundled vertices graph to dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_bundled_vertices_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For saving to and loading for a .dot file to work without problems, there
 are some restrictions: any data type that is written to file, must not
 have comma's, quotes, nor spaces.
 The function 'graphviz_encode' (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:graphviz_encode"

\end_inset

) shows how to encode std::string to a Graphviz-friendly format.
\end_layout

\begin_layout Subsection
Loading a directed graph with bundled vertices from a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:load_directed_bundled_vertices_graph_from_dot"

\end_inset


\end_layout

\begin_layout Standard
When loading a graph from file, one needs to specify a type of graph.
 In this example, an directed graph with bundled vertices is loaded, as
 shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_directed_bundled_vertices_graph_from_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_bundled_vertices_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loading a directed graph with bundled vertices from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load directed bundled vertices graph from dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:load_directed_bundled_vertices_graph_from_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this algorithm, first it is checked if the file to load exists.
 Then an empty directed graph is created.
 Next to this, a boost::dynamic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties
\end_layout

\end_inset

 is created with its default constructor, after which [we set up the boost::dyna
mic_properties properly somehow, issue #16].
 From this and the empty graph, 'boost::read_graphviz'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::read_graphviz
\end_layout

\end_inset

 is called to build up the graph.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_directed_bundled_vertices_graph_from_dot_demo"

\end_inset

 shows how to use the 'load_directed_bundled_vertices_graph_from_dot' function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_bundled_vertices_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'load_directed_bundled_vertices_graph_from_dot' function
\begin_inset CommandInset label
LatexCommand label
name "alg:load_directed_bundled_vertices_graph_from_dot_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration shows how the Markov chain is created using the 'create_bundl
ed_vertices_markov_chain' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_bundled_vertices_markov_chain"

\end_inset

), saved and then loaded.
 The loaded graph is checked to be the same as the original.
\end_layout

\begin_layout Subsection
Loading an undirected graph with bundled vertices from a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:load_undirected_bundled_vertices_graph_from_dot"

\end_inset


\end_layout

\begin_layout Standard
When loading a graph from file, one needs to specify a type of graph.
 In this example, an undirected graph with bundled vertices is loaded, as
 shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_undirected_bundled_vertices_graph_from_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_bundled_vertices_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loading an undirected graph with bundled vertices from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected bundled vertices graph from dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:load_undirected_bundled_vertices_graph_from_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The only difference with loading a directed graph, is that the initial empty
 graph is undirected instead.
 Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_directed_bundled_vertices_graph_from_dot"

\end_inset

 describes the rationale of this function.
 
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_undirected_bundled_vertices_graph_from_dot_demo"

\end_inset

 shows how to use the 'load_undirected_bundled_vertices_graph_from_dot'
 function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_bundled_vertices_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'load_undirected_bundled_vertices_graph_from_dot' function
\begin_inset CommandInset label
LatexCommand label
name "alg:load_undirected_bundled_vertices_graph_from_dot_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration shows how 
\begin_inset Formula $K_{2}$
\end_inset

 with bundled vertices is created using the 'create_bundled_vertices_k2_graph'
 function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_bundled_vertices_k2_graph"

\end_inset

), saved and then loaded.
 The loaded graph is checked to be the same as the original.
\end_layout

\begin_layout Section
Building graphs with bundled edges and vertices
\end_layout

\begin_layout Standard
Up until now, the graphs created have had only bundled vertices.
 In this chapter, graphs will be created, in which both the edges and vertices
 have a bundled 'my_bundled_edge' and 'my_bundled_edge' type
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
I do not intend to be original in naming my data types
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
An empty directed graph that allows for bundled edges and vertices: see
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_bundled_edges_and_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
An empty undirected graph that allows for bundled edges and vertices: see
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_undirected_bundled_edges_and_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
A two-state Markov chain with bundled edges and vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_bundled_edges_and_vertices_markov_chain"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{3}$
\end_inset

with bundled edges and vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_bundled_edges_and_vertices_k3"

\end_inset


\end_layout

\begin_layout Standard
In the process, some basic (sometimes bordering trivial) functions are shown:
\end_layout

\begin_layout Itemize
Creating the 'my_bundled_edge' class: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:my_bundled_edge"

\end_inset


\end_layout

\begin_layout Itemize
Adding a bundled 'my_bundled_edge': see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_bundled_edge"

\end_inset


\end_layout

\begin_layout Standard
These functions are mostly there for completion and showing which data types
 are used.
\end_layout

\begin_layout Subsection
Creating the bundled edge class
\begin_inset CommandInset label
LatexCommand label
name "sub:my_bundled_edge"

\end_inset


\end_layout

\begin_layout Standard
In this example, I create a 'my_bundled_edge' class.
 Here I will show the header file of it, as the implementation of it is
 not important yet.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "my_bundled_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Declaration of my_bundled_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_edge
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_edge.h
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_edge declaration
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Declaration, my_bundled_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:my_bundled_edge_h"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
my_bundled_edge is a class that has multiple properties: two doubles 'm_width'
 ('m_
\begin_inset Index idx
status open

\begin_layout Plain Layout
m_
\end_layout

\end_inset

' stands for member
\begin_inset Index idx
status open

\begin_layout Plain Layout
member
\end_layout

\end_inset

) and 'm_height', and two std::strings m_name and m_description.
 'my_bundled_edge' is copyable, but cannot trivially be converted to a std::stri
ng.' 'my_bundled_edge' is comparable for equality (that is, operator== is
 defined).
\end_layout

\begin_layout Standard
'my_bundled_edge' does not have to have the stream operators defined for
 file I/O, as this goes via the public member variables.
\end_layout

\begin_layout Subsection
Create an empty directed graph with bundled edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_directed_bundled_edges_and_vertices_graph"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_bundled_edges_and_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty directed graph with bundled edges and vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty directed bundled edges and vertices graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_bundled_edges_and_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This code is very similar to the code described in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_custom_vertices_graph"

\end_inset

, except that there is a new, fifth template argument:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

boost::property<boost::edge_bundled_type_t, my_edge>
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edge_bundled_type_t
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_edge
\end_layout

\end_inset

This can be read as: 
\begin_inset Quotes eld
\end_inset

edges have the property 'boost::edge_bundled_type_t', which is of data type
 'my_bundled_edge'
\begin_inset Quotes erd
\end_inset

.
 Or simply: 
\begin_inset Quotes eld
\end_inset

edges have a bundled type called my_bundled_edge
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Demo:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_bundled_edges_and_vertices_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'create_empty_directed_bundled_edges_and_vertices_graph'
 function
\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_bundled_edges_and_vertices_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Create an empty undirected graph with bundled edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_undirected_bundled_edges_and_vertices_graph"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_bundled_edges_and_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty undirected graph with bundled edges and vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty undirected bundled edges and vertices graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_undirected_bundled_edges_and_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This code is very similar to the code described in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_bundled_edges_and_vertices_graph"

\end_inset

, except that the directedness (the third template argument) is undirected
 (due to the boost::undirectedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
Demo:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_bundled_edges_and_vertices_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'create_empty_undirected_bundled_edges_and_vertices_graph'
 function
\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_undirected_bundled_edges_and_vertices_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Add a bundled edge
\begin_inset CommandInset label
LatexCommand label
name "sub:add_bundled_edge"

\end_inset


\end_layout

\begin_layout Standard
Adding a bundled edge is very similar to adding a named edge (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_named_edge"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_bundled_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Add a bundled edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
Add bundled edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_bundled_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When having added a new (abstract) edge to the graph, the edge descriptor
 is used to set the my_edge in the graph.
\end_layout

\begin_layout Standard
Here is the demo:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_bundled_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demo of 'add_bundled_edge'
\begin_inset CommandInset label
LatexCommand label
name "alg:add_bundled_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Getting the bundled edges my_edges
\begin_inset CommandInset label
LatexCommand label
name "sub:get_bundled_edge_my_edges"

\end_inset


\end_layout

\begin_layout Standard
When the edges of a graph are 'my_bundled_edge' objects, one can extract
 these all as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_bundled_edge_my_edges.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the edges' my_bundled_edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get edge my_bundled_edges
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_bundled_edge_my_edges"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 'my_bundled_edge' object associated with the edges are obtained from
 the graph its property_map and then put into a std::vector.
\end_layout

\begin_layout Standard
Note: the order of the my_bundled_edge objects may be different after saving
 and loading.
\end_layout

\begin_layout Standard
When trying to get the edges' my_bundled_edge objects from a graph without
 bundled edges objects associated, you will get the error 'formed reference
 to void' (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:formed_reference_to_void"

\end_inset

).
\end_layout

\begin_layout Subsection
Creating a Markov-chain with bundled edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_bundled_edges_and_vertices_markov_chain"

\end_inset


\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:bundled_edges_and_vertices_markov_chain"

\end_inset

 shows the graph that will be reproduced:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=5cm, semithick
]   
\end_layout

\begin_layout Plain Layout

  
\backslash
tikzstyle{every state}=[]
\end_layout

\begin_layout Plain Layout

  
\backslash
node[state] (A) 
\end_layout

\begin_layout Plain Layout

    {Sunny, You [...], 1.0, 2.0};   
\end_layout

\begin_layout Plain Layout

  
\backslash
node[state] (B) [right of=A] 
\end_layout

\begin_layout Plain Layout

    {Rainy, Many [...], 3.0, 4.0}
\end_layout

\begin_layout Plain Layout

  ;   
\end_layout

\begin_layout Plain Layout

  
\backslash
path (A) edge [loop above] node {AA,self,1,2} (A)
\end_layout

\begin_layout Plain Layout

        (A) edge [bend  left] node {AB,nonself,3,4} (B)
\end_layout

\begin_layout Plain Layout

        (B) edge [bend  left] node {BA,nonself,4,5} (A)
\end_layout

\begin_layout Plain Layout

        (B) edge [loop above] node {BB,self,6,7} (B); 
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A two-state Markov chain where the edges and vertices have bundled properies.
 The edges' and vertices' properties are nonsensical
\begin_inset CommandInset label
LatexCommand label
name "fig:bundled_edges_and_vertices_markov_chain"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Function to create such a graph
\end_layout

\begin_layout Standard
Here is the code creating a two-state Markov chain with bundled edges and
 vertices:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_bundled_edges_and_vertices_markov_chain.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating the two-state Markov chain as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:bundled_edges_and_vertices_markov_chain"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create bundled edges and vertices Markov chain
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_bundled_edges_and_vertices_markov_chain"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Creating such a graph
\end_layout

\begin_layout Standard
Here is the demo:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_bundled_edges_and_vertices_markov_chain_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demo of the 'create_bundled_edges_and_vertices_markov_chain' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_bundled_edges_and_vertices_markov_chain"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:create_bundled_edges_and_vertices_markov_chain_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .dot file produced
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_bundled_edges_and_vertices_markov_chain.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 'create_bundled_edges_and_vertices_markov_chain'
 function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_bundled_edges_and_vertices_markov_chain"

\end_inset

), converted from graph to .dot file using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_bundled_edges_and_vertices_markov_chain.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .svg file produced
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
:-(
\begin_inset Note Note
status open

\begin_layout Plain Layout
create_bundled_edges_and_vertices_markov_chain.svg cannot be created
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the 'create_bundled_edges_and_vertices_markov_chain'
 function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_markov_chain"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:create_bundled_edges_and_vertices_markov_chain.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 with bundled edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_bundled_edges_and_vertices_k3"

\end_inset


\end_layout

\begin_layout Standard
Instead of using edges with a name, or other properties, here we use a bundled
 edge class called 'my_bundled_edge'.
\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
We reproduce the 
\begin_inset Formula $K_{3}$
\end_inset

 with named edges and vertices of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_edges_and_vertices_k3"

\end_inset

 , but with our bundled edges and vertices intead:
\end_layout

\begin_layout Standard
[graph here]
\end_layout

\begin_layout Subsubsection
Function to create such a graph
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_bundled_edges_and_vertices_k3_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_edges_and_vertices_k3"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create bundled edges and vertices K3 graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_bundled_edges_and_vertices_k3_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the code is a slight modification of algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3_graph"

\end_inset

.
 In the end, the my_edges and my_vertices are obtained as the graph its
 property_map and set with the 'my_bundled_edge' and 'my_bundled_vertex'
 objects.
\end_layout

\begin_layout Subsubsection
Creating such a graph
\end_layout

\begin_layout Standard
Here is the demo:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_bundled_edges_and_vertices_k3_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demo of the 'create_bundled_edges_and_vertices_k3_graph' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_bundled_edges_and_vertices_k3_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:create_bundled_edges_and_vertices_k3_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .dot file produced
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
:-( 
\begin_inset Note Note
status open

\begin_layout Plain Layout
create_bundled_edges_and_vertices_k3_graph.dot cannot be created
\end_layout

\end_inset

 
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 'create_bundled_edges_and_vertices_markov_chain'
 function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_bundled_edges_and_vertices_k3_graph"

\end_inset

), converted from graph to .dot file using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_bundled_edges_and_vertices_k3_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .svg file produced
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
:-( 
\begin_inset Note Note
status open

\begin_layout Plain Layout
create_bundled_edges_and_vertices_k3_graph.svg cannot be created
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the 'create_bundled_edges_and_vertices_k3_graph' function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_markov_chain"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:create_bundled_edges_and_vertices_k3_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Working on graphs with bundled edges and vertices
\end_layout

\begin_layout Subsection
Has a my_bundled_edge
\begin_inset CommandInset label
LatexCommand label
name "sub:has_bundled_edge_with_my_edge"

\end_inset


\end_layout

\begin_layout Standard
Before modifying our edges, let's first determine if we can find an edge
 by its bundled type ('my_bundled_edge') in a graph.
 After obtaing a my_bundled_edge map, we obtain the edge iterators, dereference
 these to obtain the edge descriptors and then compare each edge its my_bundled_
edge with the one desired.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_bundled_edge_with_my_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find if there is a bundled edge with a certain my_bundled_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
Has bundled edge with my_bundled_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:has_bundled_edge_with_my_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This function can be demonstrated as in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:has_bundled_edge_with_my_edge_demo"

\end_inset

, where a certain 'my_bundled_edge' cannot be found in an empty graph.
 After adding the desired my_bundled_edge, it is found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_bundled_edge_with_my_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'has_bundled_edge_with_my_edge' function
\begin_inset CommandInset label
LatexCommand label
name "alg:has_bundled_edge_with_my_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this function only finds if there is at least one edge with that
 my_bundled_edge: it does not tell how many edges with that my_bundled_edge
 exist in the graph.
\end_layout

\begin_layout Subsection
Find a my_bundled_edge
\begin_inset CommandInset label
LatexCommand label
name "sub:find_first_bundled_edge_with_my_edge"

\end_inset


\end_layout

\begin_layout Standard
Where STL functions work with iterators, here we obtain an edge descriptor
 (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Edge-descriptors"

\end_inset

) to obtain a handle to the desired edge.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_bundled_edge_with_my_edge"

\end_inset

 shows how to obtain an edge descriptor to the first edge found with a specific
 my_bundled_edge value.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_bundled_edge_with_my_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find the first bundled edge with a certain my_bundled_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
Find first bundled edge with my_bundled_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_bundled_edge_with_my_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the edge descriptor obtained, one can read and modify the edge and
 the vertices surrounding it.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_bundled_edge_with_my_edge_demo"

\end_inset

 shows some examples of how to do so.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_bundled_edge_with_my_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'find_first_bundled_edge_with_my_edge' function
\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_bundled_edge_with_my_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Get an edge its my_bundled_edge
\begin_inset CommandInset label
LatexCommand label
name "sub:get_bundled_edge_my_edge"

\end_inset


\end_layout

\begin_layout Standard
To obtain the my_edeg from an edge descriptor, one needs to pull out the
 my_bundled_edges map and then look up the my_edge of interest.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_custom_edge_my_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get a vertex its my_bundled_vertex from its vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get bundled edge my_bundled_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_bundled_edge_my_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'get_bundled_edge_my_bundled_edge', one first needs to obtain an
 edge descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_bundled_edge_my_edge_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_bundled_edge_my_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'get_bundled_edge_my_edge' function
\begin_inset CommandInset label
LatexCommand label
name "alg:get_bundled_edge_my_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Set an edge its my_bundled_edge
\begin_inset CommandInset label
LatexCommand label
name "sub:set_bundled_edge_my_edge"

\end_inset


\end_layout

\begin_layout Standard
If you know how to get the my_bundled_edge from an edge descriptor, setting
 it is just as easy, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_bundled_edge_my_edge"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_bundled_edge_my_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Set a bundled edge its my_bundled_edge from its edge descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set bundled edge my_bundled_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_bundled_edge_my_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'set_bundled_edge_my_edge', one first needs to obtain an edge descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_bundled_edge_my_edge_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_bundled_edge_my_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'set_bundled_edge_my_edge' function
\begin_inset CommandInset label
LatexCommand label
name "alg:set_bundled_edge_my_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Storing a graph with bundled edges and vertices as a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:save_bundled_edges_and_vertices_graph_to_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Save graph with bundled edges and vertices as .dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create .dot from graph with bundled edges and vertices
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
If you used the create_bundled_edges_and_vertices_k3_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_bundled_edges_and_vertices_k3_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{3}$
\end_inset

 graph with edges and vertices associated with my_bundled_edge and my_bundled_ve
rtex objects, you can store these my_bundled_edges and my_bundled_vertex-es
 additionally with algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_bundled_edges_and_vertices_graph_to_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_bundled_edges_and_vertices_graph_to_dot_cpp14.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing a graph with bundled edges and vertices as a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Save bundled edges and vertices graph to dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_bundled_edges_and_vertices_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this algorithm uses C++14
\begin_inset Index idx
status open

\begin_layout Plain Layout
C++14
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Load a directed graph with bundled edges and vertices from a .dot file
\begin_inset CommandInset label
LatexCommand label
name "sub:sub:load_directed_bundled_edges_and_vertices_graph_from_dot"

\end_inset


\end_layout

\begin_layout Standard
When loading a graph from file, one needs to specify a type of graph.
 In this example, an directed graph with bundled edges and vertices is loaded,
 as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_directed_bundled_edges_and_vertices_graph_from_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_bundled_edges_and_vertices_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loading a directed graph with bundled edges and vertices from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load directed bundled edges and vertices graph from dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:load_directed_bundled_edges_and_vertices_graph_from_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this algorithm, first it is checked if the file to load exists.
 Then an empty directed graph is created.
 Next to this, a boost::dynamic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties
\end_layout

\end_inset

 is created with its default constructor, after which we direct the boost::dynam
ic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties
\end_layout

\end_inset

 to find a 'node_id' and 'label' in the vertex name map, 'edge_id' and 'label
 to the edge name map.
 From this and the empty graph, 'boost::read_graphviz'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::read_graphviz
\end_layout

\end_inset

 is called to build up the graph.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_directed_bundled_edges_and_vertices_graph_from_dot_demo"

\end_inset

 shows how to use the 'load_directed_bundled_edges_and_vertices_graph_from_dot'
 function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_bundled_edges_and_vertices_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'load_directed_bundled_edges_and_vertices_graph_from_dot'
 function
\begin_inset CommandInset label
LatexCommand label
name "alg:load_directed_bundled_edges_and_vertices_graph_from_dot_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration shows how the Markov chain is created using the 'create_bundl
ed_edges_and_vertices_markov_chain' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_bundled_edges_and_vertices_markov_chain"

\end_inset

), saved and then loaded.
\end_layout

\begin_layout Subsection
Load an undirected graph with bundled edges and vertices from a .dot file
\begin_inset CommandInset label
LatexCommand label
name "sub:load_undirected_bundled_edges_and_vertices_graph_from_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected graph with bundled edges and vertices from .dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create undirected graph with bundled edges and vertices from .dot
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When loading a graph from file, one needs to specify a type of graph.
 In this example, an undirected graph with bundled edges and vertices is
 loaded, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_undirected_bundled_edges_and_vertices_graph_from_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_bundled_edges_and_vertices_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loading an undirected graph with bundled edges and vertices from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected bundled edges and vertices graph from dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:load_undirected_bundled_edges_and_vertices_graph_from_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The only difference with loading a directed graph, is that the initial empty
 graph is undirected instead.
 Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:sub:load_directed_bundled_edges_and_vertices_graph_from_dot"

\end_inset

 describes the rationale of this function.
 
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_undirected_bundled_edges_and_vertices_graph_from_dot_demo"

\end_inset

 shows how to use the 'load_undirected_bundled_vertices_graph_from_dot'
 function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_bundled_edges_and_vertices_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'load_undirected_bundled_edges_and_vertices_graph_from_dot'
 function
\begin_inset CommandInset label
LatexCommand label
name "alg:load_undirected_bundled_edges_and_vertices_graph_from_dot_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration shows how 
\begin_inset Formula $K_{2}$
\end_inset

 with bundled vertices is created using the 'create_bundled_vertices_k2_graph'
 function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_k2_graph"

\end_inset

), saved and then loaded.
 The loaded graph is checked to be a graph similar to the original.
\end_layout

\begin_layout Section
Building graphs with custom vertices
\begin_inset CommandInset label
LatexCommand label
name "sec:Building-graphs-with-custom-properties"

\end_inset


\end_layout

\begin_layout Standard
Instead of using bundled properties, you can also add a new custom property.
 The difference is that instead of having a class 
\emph on
as
\emph default
 a vertex, vertices have 
\emph on
an additional property
\emph default
 where the 'my_custom_vertex' is stored, next to properties like vertex
 name, edge delay (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:all_properties"

\end_inset

 for all properties).
 The following graphs will be created:
\end_layout

\begin_layout Itemize
An empty directed graph that allows for custom vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_directed_custom_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
An empty undirected graph that allows for custom vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_custom_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
A two-state Markov chain with custom vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_custom_vertices_markov_chain"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{2}$
\end_inset

with custom vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_custom_vertices_k2_graph"

\end_inset


\end_layout

\begin_layout Standard
In the process, some basic (sometimes bordering trivial) functions are shown:
\end_layout

\begin_layout Itemize
Installing a new vertex property, called 'vertex_custom_type
\begin_inset Index idx
status open

\begin_layout Plain Layout
vertex_custom_type
\end_layout

\end_inset

': chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:install_vertex_custom_type"

\end_inset


\end_layout

\begin_layout Itemize
Adding a custom vertex: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_custom_vertex"

\end_inset


\end_layout

\begin_layout Itemize
Getting the custom vertices my_vertex-es: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_my_vertexes"

\end_inset


\end_layout

\begin_layout Standard
These functions are mostly there for completion and showing which data types
 are used.
\end_layout

\begin_layout Subsection
Creating the vertex class
\begin_inset CommandInset label
LatexCommand label
name "sub:my_custom_vertex"

\end_inset


\end_layout

\begin_layout Standard
Before creating an empty graph with custom vertices, that custom vertex
 class must be created.
 In this tutorial, it is called 'my_custom_vertex'.
 'my_custom_vertex' is a class that is nonsensical, but it can be replaced
 by any other class type.
\end_layout

\begin_layout Standard
Here I will show the header file of 'my_custom_vertex', as the implementation
 of it is not important:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "my_custom_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Declaration of my_custom_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
my_custom_vertex
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_custom_vertex.h
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_custom_vertex declaration
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Declaration, my_custom_vertex 
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:my_custom_vertex_h"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
'my_custom_vertex' is a class that has multiple properties: 
\end_layout

\begin_layout Itemize
It has four private member variables: the double 'm_x' ('m_
\begin_inset Index idx
status open

\begin_layout Plain Layout
m_
\end_layout

\end_inset

' stands for member
\begin_inset Index idx
status open

\begin_layout Plain Layout
member
\end_layout

\end_inset

), the double 'm_y', the std::string m_name and the std::string m_description.
 These variables are private, but there are getters supplied
\end_layout

\begin_layout Itemize
It has a default constructor
\end_layout

\begin_layout Itemize
It is copyable
\end_layout

\begin_layout Itemize
It is comparable for equality (it has operator==), which is needed for searching
\end_layout

\begin_layout Itemize
It can be streamed (it has both operator<< and operator>>), which is needed
 for file I/O.
 
\end_layout

\begin_layout Standard
Special characters like comma's, quotes and whitespace cannot be streamed
 without problems.
 The function 'graphviz_encode' (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:graphviz_encode"

\end_inset

) can convert the elements to be streamed to a Graphviz-friendly version,
 which can be decoded by 'graphviz_decode' (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:graphviz_decode"

\end_inset

).
\end_layout

\begin_layout Subsection
Installing the new vertex property
\begin_inset CommandInset label
LatexCommand label
name "sub:install_vertex_custom_type"

\end_inset


\end_layout

\begin_layout Standard
Before creating an empty graph with custom vertices, this type must be installed
 as a vertex property.
 Installing a new property would have been easier, if 'more C++ compilers
 were standards conformant' (
\begin_inset CommandInset citation
LatexCommand cite
key "siek2001boost"

\end_inset

 chapter 3.6).
 Boost.Graph uses the BOOST_INSTALL_PROPERTY
\begin_inset Index idx
status open

\begin_layout Plain Layout
BOOST_INSTALL_PROPERTY
\end_layout

\end_inset

 macro
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
macro
\end_layout

\end_inset

 to allow using a custom property:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "install_vertex_custom_type.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Installing the vertex_custom_type property
\begin_inset Index idx
status open

\begin_layout Plain Layout
Install vertex custom type
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:install_vertex_custom_type"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The enum value 314 must be unique.
\end_layout

\begin_layout Subsection
Create the empty directed graph with custom vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_directed_custom_vertices_graph"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_custom_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty directed graph with custom vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty directed custom vertices graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_custom_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This graph:
\end_layout

\begin_layout Itemize
has its out edges stored in a std::vector (due to the first boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
has its vertices stored in a std::vector (due to the second boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
is directed (due to the boost::directedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::directedS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
The vertices have one property: they have a custom type, that is of data
 type my_vertex (due to the boost::property< boost::vertex_custom_type_t,my_vert
ex>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_custom_type_t
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_vertex
\end_layout

\end_inset

')
\end_layout

\begin_layout Itemize
The edges and graph have no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list
\end_layout

\begin_layout Standard
The boost::adjacency_list
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::adjacency_list
\end_layout

\end_inset

 has a new, fourth template argument 'boost::property< boost::vertex_custom_type
_t,my_vertex>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_custom_type_t
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_vertex
\end_layout

\end_inset

'.
 This can be read as: 
\begin_inset Quotes eld
\end_inset

vertices have the property 'boost::vertex_custom_type_t', which is of data
 type 'my_vertex'
\begin_inset Quotes erd
\end_inset

.
 Or simply: 
\begin_inset Quotes eld
\end_inset

vertices have a custom type called my_vertex
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Create the empty undirected graph with custom vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_undirected_custom_vertices_graph"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_custom_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty undirected graph with custom vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty undirected custom vertices graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_undirected_custom_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This code is very similar to the code described in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_custom_vertices_graph"

\end_inset

, except that the directedness (the third template argument) is undirected
 (due to the boost::undirectedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS
\end_layout

\end_inset

).
\end_layout

\begin_layout Subsection
Add a custom vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:add_custom_vertex"

\end_inset


\end_layout

\begin_layout Standard
Adding a custom vertex is very similar to adding a named vertex (chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_named_vertex"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_custom_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Add a custom vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
Add custom vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_custom_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When having added a new (abstract) vertex to the graph, the vertex descriptor
 is used to set the my_vertex in the graph its my_vertex map (using 'get(boost::
vertex_custom_type,g)
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_custom_type
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
get
\end_layout

\end_inset

').
\end_layout

\begin_layout Standard
Here is the demo:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_custom_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demo of 'add_custom_vertex'
\begin_inset CommandInset label
LatexCommand label
name "alg:add_custom_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Getting the vertices' my_vertexes
\begin_inset Foot
status open

\begin_layout Plain Layout
the name 'my_vertexes' is chosen to indicate this function returns a container
 of my_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:get_vertex_my_vertexes"

\end_inset


\end_layout

\begin_layout Standard
When the vertices of a graph have any associated my_vertex, one can extract
 these as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_custom_vertex_my_vertexes.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the vertices' my_vertexes
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get vertex my_vertexes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_my_vertexes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The my_vertex object associated with the vertices are obtained from a boost::pro
perty_map and then put into a std::vector.
\end_layout

\begin_layout Standard
The order of the 'my_custom_vertex' objects may be different after saving
 and loading.
\end_layout

\begin_layout Standard
When trying to get the vertices' my_vertex from a graph without my_vertex
 objects associated, you will get the error 'formed reference to void' (see
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:formed_reference_to_void"

\end_inset

).
\end_layout

\begin_layout Subsection
Creating a two-state Markov chain with custom vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_custom_vertices_markov_chain"

\end_inset


\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:custom_vertices_markov_chain"

\end_inset

 shows the graph that will be reproduced:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=4cm, semithick
]   
\end_layout

\begin_layout Plain Layout

  
\backslash
tikzstyle{every state}=[]
\end_layout

\begin_layout Plain Layout

  
\backslash
node[state] (A) 
\end_layout

\begin_layout Plain Layout

    {Sunny, You [...], 1.0, 2.0};   
\end_layout

\begin_layout Plain Layout

  
\backslash
node[state] (B) [right of=A] 
\end_layout

\begin_layout Plain Layout

    {Rainy, Many [...], 3.0, 4.0}
\end_layout

\begin_layout Plain Layout

  ;   
\end_layout

\begin_layout Plain Layout

  
\backslash
path (A) edge [loop  left] node {} (A)
\end_layout

\begin_layout Plain Layout

        (A) edge [bend  left] node {} (B)
\end_layout

\begin_layout Plain Layout

        (B) edge [bend  left] node {} (A)
\end_layout

\begin_layout Plain Layout

        (B) edge [loop right] node {} (B); 
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A two-state Markov chain where the vertices have custom properies and the
 edges have no properties.
 The vertices' properties are nonsensical
\begin_inset CommandInset label
LatexCommand label
name "fig:custom_vertices_markov_chain"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Function to create such a graph
\end_layout

\begin_layout Standard
Here is the code creating a two-state Markov chain with custom vertices:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_custom_vertices_markov_chain.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating the two-state Markov chain as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:custom_vertices_markov_chain"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create custom vertices Markov chain
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_custom_vertices_markov_chain"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Creating such a graph
\end_layout

\begin_layout Standard
Here is the demo:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_custom_vertices_markov_chain_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demo of the 'create_custom_vertices_markov_chain' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_markov_chain"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:create_custom_and_vertices_markov_chain_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .dot file produced
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_custom_vertices_markov_chain.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 'create_custom_vertices_markov_chain' function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_markov_chain"

\end_inset

), converted from graph to .dot file using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_custom_vertices_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_custom_vertices_markov_chain.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .dot file may look unexpectedly different: instead of a space, there
 is this '[[:SPACE:]]'
\begin_inset Index idx
status open

\begin_layout Plain Layout
[[:SPACE:]]
\end_layout

\end_inset

 thing.
 This is because the function 'graphviz_encode' (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:graphviz_encode"

\end_inset

) made this conversion.
 In this example, I could have simply surrounded the content by quotes,
 and this would have worked.
 I chose to use 'graphviz_encode' because it works in all contexts.
\end_layout

\begin_layout Subsubsection
The .svg file produced
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_custom_vertices_markov_chain.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the 'create_custom_vertices_markov_chain' function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_markov_chain"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:create_custom_vertices_markov_chain.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .svg file may look unexpectedly different: instead of a space, there
 is this '[[:SPACE:]]'
\begin_inset Index idx
status open

\begin_layout Plain Layout
[[:SPACE:]]
\end_layout

\end_inset

 thing.
 This is because the function 'graphviz_encode' (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:graphviz_encode"

\end_inset

) made this conversion.
\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 with custom vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_custom_vertices_k2_graph"

\end_inset


\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
We reproduce the 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_vertices_k2_graph"

\end_inset

 , but with our custom vertices intead.
\end_layout

\begin_layout Subsubsection
Function to create such a graph
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_custom_vertices_k2_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_vertices_k2_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create custom vertices K2 graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_custom_vertices_k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the code is a slight modification of the 'create_named_vertices_k2_graph
' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

).
 In the end, the my_vertices are obtained as a boost::property_map and set
 with two custom my_vertex objects.
\end_layout

\begin_layout Subsubsection
Creating such a graph
\end_layout

\begin_layout Standard
Demo:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_custom_vertices_k2_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demo of the 'create_custom_vertices_k2_graph' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:create_custom_and_vertices_k2_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .dot file produced
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_custom_vertices_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 'create_custom_vertices_k2_graph' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_k2_graph"

\end_inset

), converted from graph to .dot file using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_custom_vertices_k2_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .svg file produced
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_custom_vertices_k2_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the 'create_custom_vertices_k2_graph' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_k2_graph"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:create_custom_vertices_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Working on graphs with custom vertices (as a custom property)
\end_layout

\begin_layout Standard
When using graphs with custom vertices, their state gives a way to find
 a vertex and working with it.
 This chapter shows some basic operations on graphs with custom vertices.
\end_layout

\begin_layout Itemize
Check if there exists a vertex with a certain 'my_vertex': chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:has_custom_vertex_with_my_vertex"

\end_inset


\end_layout

\begin_layout Itemize
Find a vertex with a certain 'my_vertex': chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:find_custom_vertex_with_my_vertex"

\end_inset


\end_layout

\begin_layout Itemize
Get a vertex its 'my_vertex' from its vertex descriptor: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_custom_vertex_my_vertex"

\end_inset


\end_layout

\begin_layout Itemize
Set a vertex its 'my_vertex' using its vertex descriptor: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:set_custom_vertex_my_vertex"

\end_inset


\end_layout

\begin_layout Itemize
Setting all vertices their 'my_vertex'es: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:set_custom_vertex_my_vertexes"

\end_inset


\end_layout

\begin_layout Itemize
Storing an directed/undirected graph with custom vertices as a .dot file:
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:save_custom_vertices_graph_to_dot"

\end_inset


\end_layout

\begin_layout Itemize
Loading a directed graph with custom vertices from a .dot file: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_directed_custom_vertices_graph_from_dot"

\end_inset


\end_layout

\begin_layout Itemize
Loading an undirected directed graph with custom vertices from a .dot file:
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_undirected_custom_vertices_graph_from_dot"

\end_inset


\end_layout

\begin_layout Subsection
Has a custom vertex with a my_vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:has_custom_vertex_with_my_vertex"

\end_inset


\end_layout

\begin_layout Standard
Before modifying our vertices, let's first determine if we can find a vertex
 by its custom type ('my_vertex') in a graph.
 After obtaing a my_vertex map, we obtain the vertex iterators, dereference
 these to obtain the vertex descriptors and then compare each vertex its
 my_vertex with the one desired.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_custom_vertex_with_my_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find if there is vertex with a certain my_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
Has custom vertex with my_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:has_custom_vertex_with_my_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This function can be demonstrated as in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:has_vertex_with_my_vertex_demo"

\end_inset

, where a certain my_vertex cannot be found in an empty graph.
 After adding the desired my_vertex, it is found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_custom_vertex_with_my_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'has_custom_vertex_with_my_vertex' function
\begin_inset CommandInset label
LatexCommand label
name "alg:has_vertex_with_my_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this function only finds if there is at least one custom vertex
 with that my_vertex: it does not tell how many custom vertices with that
 my_vertex exist in the graph.
\end_layout

\begin_layout Subsection
Find a custom vertex with a certain my_vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:find_custom_vertex_with_my_vertex"

\end_inset


\end_layout

\begin_layout Standard
Where STL functions work with iterators, here we obtain a vertex descriptor
 (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

) to obtain a handle to the desired vertex.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_custom_vertex_with_my_vertex"

\end_inset

 shows how to obtain a vertex descriptor to the first vertex found with
 a specific my_vertex value.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_custom_vertex_with_my_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find the first vertex with a certain my_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
Find first custom vertex with my_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_custom_vertex_with_my_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the vertex descriptor obtained, one can read and modify the vertex
 and the edges surrounding it.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_custom_vertex_with_my_vertex_demo"

\end_inset

 shows some examples of how to do so.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_custom_vertex_with_my_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'find_first_custom_vertex_with_my_vertex' function
\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_custom_vertex_with_my_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Get a custom vertex its my_vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:get_custom_vertex_my_vertex"

\end_inset


\end_layout

\begin_layout Standard
To obtain the name from a vertex descriptor, one needs to pull out the my_vertex
es
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Bad English intended: my_vertexes = multiple my_vertex objects, vertices
 = multiple graph nodes
\end_layout

\end_inset

 map and then look up the vertex of interest.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_custom_vertex_my_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get a custom vertex its my_vertex from its vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get custom vertex my_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_my_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'get_custom_vertex_my_vertex', one first needs to obtain a vertex
 descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_my_vertex_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_custom_vertex_my_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'get_custom_vertex_my_vertex' function
\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_my_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Set a custom vertex its my_vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:set_custom_vertex_my_vertex"

\end_inset


\end_layout

\begin_layout Standard
If you know how to get the my_vertex from a vertex descriptor, setting it
 is just as easy, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_custom_vertex_my_vertex"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_custom_vertex_my_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Set a custom vertex its my_vertex from its vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set vertex my_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_custom_vertex_my_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'set_vertex_my_vertex', one first needs to obtain a vertex descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_custom_vertex_my_vertex_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_custom_vertex_my_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'set_custom_vertex_my_vertex' function
\begin_inset CommandInset label
LatexCommand label
name "alg:set_custom_vertex_my_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Setting all custom vertices' my_vertex objects
\begin_inset CommandInset label
LatexCommand label
name "sub:set_custom_vertex_my_vertexes"

\end_inset


\end_layout

\begin_layout Standard
When the vertices of a graph are associated with my_vertex objects, one
 can set these my_vertexes as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_custom_vertex_my_vertexes.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Setting the custom vertices' my_vertexes
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set custom vertex my_vertexes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_custom_vertex_my_vertexes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
An impressive feature is that getting the property map holding the graph
 its names is not a copy, but a reference.
 Otherwise, modifying 'my_vertexes_map' (obtained by non-reference) would
 only modify a copy.
\end_layout

\begin_layout Subsection
Storing a graph with custom vertices as a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:save_custom_vertices_graph_to_dot"

\end_inset


\end_layout

\begin_layout Standard
If you used the create_custom_vertices_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_k2_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{2}$
\end_inset

 graph with vertices associated with my_vertex objects, you can store these
 my_vertexes additionally with algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_custom_vertices_graph_to_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_custom_vertices_graph_to_dot_cpp14.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing a graph with custom vertices as a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Save custom vertices graph to dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_custom_vertices_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this algorithm uses C++14
\begin_inset Index idx
status open

\begin_layout Plain Layout
C++14
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The .dot file created is displayed in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the create_custom_vertices_k2_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .dot file corresponds to figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the create_custom_vertices_k2_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_k2_graph"

\end_inset

) and converted to .svg using the 'convert_dot_to_svg' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "fig:save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection
Loading a directed graph with custom vertices from a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:load_directed_custom_vertices_graph_from_dot"

\end_inset


\end_layout

\begin_layout Standard
When loading a graph from file, one needs to specify a type of graph.
 In this example, an directed graph with custom vertices is loaded, as shown
 in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_directed_custom_vertices_graph_from_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_custom_vertices_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loading a directed graph with custom vertices from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load directed custom vertices graph from dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:load_directed_custom_vertices_graph_from_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this algorithm, first it is checked if the file to load exists.
 Then an empty directed graph is created.
 Next to this, a boost::dynamic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties
\end_layout

\end_inset

 is created with its default constructor, after which we direct the boost::dynam
ic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties
\end_layout

\end_inset

 to find a 'node_id' and 'label' in the vertex name map, 'edge_id' and 'label
 to the edge name map.
 From this and the empty graph, 'boost::read_graphviz'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::read_graphviz
\end_layout

\end_inset

 is called to build up the graph.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_directed_custom_vertices_graph_from_dot_demo"

\end_inset

 shows how to use the 'load_directed_custom_vertices_graph_from_dot' function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_custom_vertices_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'load_directed_custom_vertices_graph_from_dot' function
\begin_inset CommandInset label
LatexCommand label
name "alg:load_directed_custom_vertices_graph_from_dot_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration shows how the Markov chain is created using the 'create_custo
m_vertices_markov_chain' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_markov_chain"

\end_inset

), saved and then loaded.
 The loaded graph is checked to be a directed graph similar to the Markov
 chain with the same vertex my_vertex instances (using the 'get_vertex_my_vertex
es' function).
\end_layout

\begin_layout Subsection
Loading an undirected graph with custom vertices from a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:load_undirected_custom_vertices_graph_from_dot"

\end_inset


\end_layout

\begin_layout Standard
When loading a graph from file, one needs to specify a type of graph.
 In this example, an undirected graph with custom vertices is loaded, as
 shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_undirected_custom_vertices_graph_from_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_custom_vertices_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loading an undirected graph with custom vertices from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected custom vertices graph from dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:load_undirected_custom_vertices_graph_from_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The only difference with loading a directed graph, is that the initial empty
 graph is undirected instead.
 Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_directed_custom_vertices_graph_from_dot"

\end_inset

 describes the rationale of this function.
 
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_undirected_custom_vertices_graph_from_dot_demo-1"

\end_inset

 shows how to use the 'load_undirected_custom_vertices_graph_from_dot' function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_custom_vertices_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'load_undirected_custom_vertices_graph_from_dot' function
\begin_inset CommandInset label
LatexCommand label
name "alg:load_undirected_custom_vertices_graph_from_dot_demo-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration shows how 
\begin_inset Formula $K_{2}$
\end_inset

 with custom vertices is created using the 'create_custom_vertices_k2_graph'
 function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_k2_graph"

\end_inset

), saved and then loaded.
 The loaded graph is checked to be a graph similar to the original, with
 the same vertex my_vertex instances (using the 'get_vertex_my_vertexes'
 function).
\end_layout

\begin_layout Section
Building graphs with custom edges and vertices
\end_layout

\begin_layout Standard
Up until now, the graphs created have had edges and vertices with the built-in
 name propery.
 In this chapter, graphs will be created, in which the edges and vertices
 can have a custom 'my_custom_edge' and 'my_custom_edge' type
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
I do not intend to be original in naming my data types
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
An empty directed graph that allows for custom edges and vertices: see chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_custom_edges_and_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
An empty undirected graph that allows for custom edges and vertices: see
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_undirected_custom_edges_and_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
A two-state Markov chain with custom edges and vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_custom_edges_and_vertices_markov_chain"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{3}$
\end_inset

with custom edges and vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_custom_edges_and_vertices_k3"

\end_inset


\end_layout

\begin_layout Standard
In the process, some basic (sometimes bordering trivial) functions are shown:
\end_layout

\begin_layout Itemize
Creating the custom edge class: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:my_custom_edge"

\end_inset


\end_layout

\begin_layout Itemize
Installing the new edge property: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:install_edge_custom_type"

\end_inset


\end_layout

\begin_layout Itemize
Adding a custom edge: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_custom_edge"

\end_inset


\end_layout

\begin_layout Standard
These functions are mostly there for completion and showing which data types
 are used.
\end_layout

\begin_layout Subsection
Creating the custom edge class
\begin_inset CommandInset label
LatexCommand label
name "sub:my_custom_edge"

\end_inset


\end_layout

\begin_layout Standard
In this example, I create a custom edge class.
 Here I will show the header file of it, as the implementation of it is
 not important yet.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "my_custom_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Declaration of my_custom_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
my_custom_edge
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_custom_edge.h
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_custom_edge declaration
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Declaration, my_custom_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:my_custom_edge_h"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
my_custom_edge is a class that has multiple properties: two doubles 'm_width'
 ('m_
\begin_inset Index idx
status open

\begin_layout Plain Layout
m_
\end_layout

\end_inset

' stands for member
\begin_inset Index idx
status open

\begin_layout Plain Layout
member
\end_layout

\end_inset

) and 'm_height', and two std::strings m_name and m_description.
 'my_custom_edge' is copyable, but cannot trivially be converted to a std::strin
g.' 'my_custom_edge' is comparable for equality (that is, operator== is defined).
\end_layout

\begin_layout Standard
Special characters like comma's, quotes and whitespace cannot be streamed
 without problems.
 The function 'graphviz_encode' (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:graphviz_encode"

\end_inset

) can convert the elements to be streamed to a Graphviz-friendly version,
 which can be decoded by 'graphviz_decode' (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:graphviz_decode"

\end_inset

).
\end_layout

\begin_layout Subsection
Installing the new edge property
\begin_inset CommandInset label
LatexCommand label
name "sub:install_edge_custom_type"

\end_inset


\end_layout

\begin_layout Standard
Installing a new property would have been easier, if 'more C++ compilers
 were standards conformant' (
\begin_inset CommandInset citation
LatexCommand cite
key "siek2001boost"

\end_inset

, chapter 3.6, footnote at page 52).
 Boost.Graph uses the BOOST_INSTALL_PROPERTY
\begin_inset Index idx
status open

\begin_layout Plain Layout
BOOST_INSTALL_PROPERTY
\end_layout

\end_inset

 macro
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
macro
\end_layout

\end_inset

 to allow using a custom property:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "install_edge_custom_type.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Installing the edge_custom_type property
\begin_inset Index idx
status open

\begin_layout Plain Layout
Install edge custom type
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:install_edge_custom_type"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The enum value 3142 must be unique.
\end_layout

\begin_layout Subsection
Create an empty directed graph with custom edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_directed_custom_edges_and_vertices_graph"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_custom_edges_and_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty directed graph with custom edges and vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty directed custom edges and vertices graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_custom_edges_and_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This code is very similar to the code described in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_custom_vertices_graph"

\end_inset

, except that there is a new, fifth template argument:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

boost::property<boost::edge_custom_type_t, my_edge>
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edge_custom_type_t
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_edge
\end_layout

\end_inset

This can be read as: 
\begin_inset Quotes eld
\end_inset

edges have the property 'boost::edge_custom_type_t', which is of data type
 'my_custom_edge'
\begin_inset Quotes erd
\end_inset

.
 Or simply: 
\begin_inset Quotes eld
\end_inset

edges have a custom type called my_custom_edge
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Demo:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_custom_edges_and_vertices_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'create_empty_directed_custom_edges_and_vertices_graph'
 function
\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_custom_edges_and_vertices_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Create an empty undirected graph with custom edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_undirected_custom_edges_and_vertices_graph"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_custom_edges_and_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty undirected graph with custom edges and vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty undirected custom edges and vertices graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_undirected_custom_edges_and_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This code is very similar to the code described in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_custom_edges_and_vertices_graph"

\end_inset

, except that the directedness (the third template argument) is undirected
 (due to the boost::undirectedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
Demo:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_custom_edges_and_vertices_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'create_empty_undirected_custom_edges_and_vertices_graph'
 function
\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_undirected_custom_edges_and_vertices_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Add a custom edge
\begin_inset CommandInset label
LatexCommand label
name "sub:add_custom_edge"

\end_inset


\end_layout

\begin_layout Standard
Adding a custom edge is very similar to adding a named edge (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_named_edge"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_custom_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Add a custom edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
Add custom edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_custom_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When having added a new (abstract) edge to the graph, the edge descriptor
 is used to set the my_edge in the graph its my_custom_edge map (using 'get(boos
t::edge_custom_type,g)
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edge_custom_type
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
get
\end_layout

\end_inset

').
\end_layout

\begin_layout Standard
Here is the demo:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_custom_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demo of 'add_custom_edge'
\begin_inset CommandInset label
LatexCommand label
name "alg:add_custom_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Getting the custom edges my_edges
\begin_inset CommandInset label
LatexCommand label
name "sub:get_custom_edge_my_edges"

\end_inset


\end_layout

\begin_layout Standard
When the edges of a graph have an associated 'my_custom_edge', one can extract
 these all as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_custom_edge_my_edges.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the edges' my_custom_edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get edge my_custom_edges
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_custom_edge_my_edges"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 'my_custom_edge' object associated with the edges are obtained from
 a boost::property_map and then put into a std::vector.
\end_layout

\begin_layout Standard
Note: the order of the my_custom_edge objects may be different after saving
 and loading.
\end_layout

\begin_layout Standard
When trying to get the edges' my_custom_edge objects from a graph without
 custom edges objects associated, you will get the error 'formed reference
 to void' (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:formed_reference_to_void"

\end_inset

).
\end_layout

\begin_layout Subsection
Creating a Markov-chain with custom edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_custom_edges_and_vertices_markov_chain"

\end_inset


\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:custom_edges_and_vertices_markov_chain"

\end_inset

 shows the graph that will be reproduced:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=5cm, semithick
]   
\end_layout

\begin_layout Plain Layout

  
\backslash
tikzstyle{every state}=[]
\end_layout

\begin_layout Plain Layout

  
\backslash
node[state] (A) 
\end_layout

\begin_layout Plain Layout

    {Sunny, You [...], 1.0, 2.0};   
\end_layout

\begin_layout Plain Layout

  
\backslash
node[state] (B) [right of=A] 
\end_layout

\begin_layout Plain Layout

    {Rainy, Many [...], 3.0, 4.0}
\end_layout

\begin_layout Plain Layout

  ;   
\end_layout

\begin_layout Plain Layout

  
\backslash
path (A) edge [loop above] node {AA,self,1,2} (A)
\end_layout

\begin_layout Plain Layout

        (A) edge [bend  left] node {AB,nonself,3,4} (B)
\end_layout

\begin_layout Plain Layout

        (B) edge [bend  left] node {BA,nonself,4,5} (A)
\end_layout

\begin_layout Plain Layout

        (B) edge [loop above] node {BB,self,6,7} (B); 
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A two-state Markov chain where the edges and vertices have custom properies.
 The edges' and vertices' properties are nonsensical
\begin_inset CommandInset label
LatexCommand label
name "fig:custom_edges_and_vertices_markov_chain"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Function to create such a graph
\end_layout

\begin_layout Standard
Here is the code creating a two-state Markov chain with custom edges and
 vertices:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_custom_edges_and_vertices_markov_chain.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating the two-state Markov chain as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:custom_edges_and_vertices_markov_chain"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create custom edges and vertices Markov chain
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_custom_edges_and_vertices_markov_chain"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Creating such a graph
\end_layout

\begin_layout Standard
Here is the demo:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_custom_edges_and_vertices_markov_chain_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demo of the 'create_custom_edges_and_vertices_markov_chain' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_edges_and_vertices_markov_chain"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:create_custom_edges_and_vertices_markov_chain_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .dot file produced
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_custom_edges_and_vertices_markov_chain.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 'create_custom_edges_and_vertices_markov_chain'
 function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_edges_and_vertices_markov_chain"

\end_inset

), converted from graph to .dot file using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_custom_edges_and_vertices_markov_chain.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .svg file produced
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_custom_edges_and_vertices_markov_chain.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the 'create_custom_edges_and_vertices_markov_chain'
 function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_markov_chain"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:create_custom_edges_and_vertices_markov_chain.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 with custom edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_custom_edges_and_vertices_k3"

\end_inset


\end_layout

\begin_layout Standard
Instead of using edges with a name, or other properties, here we use a custom
 edge class called 'my_custom_edge'.
\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
We reproduce the 
\begin_inset Formula $K_{3}$
\end_inset

 with named edges and vertices of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_edges_and_vertices_k3"

\end_inset

 , but with our custom edges and vertices intead:
\end_layout

\begin_layout Standard
[graph here]
\end_layout

\begin_layout Subsubsection
Function to create such a graph
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_custom_edges_and_vertices_k3_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_edges_and_vertices_k3"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create custom edges and vertices K3 graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_custom_edges_and_vertices_k3_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the code is a slight modification of algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3_graph"

\end_inset

.
 In the end, the my_edges and my_vertices are obtained as a boost::property_map
 and set with the 'my_custom_edge' and 'my_custom_vertex' objects.
\end_layout

\begin_layout Subsubsection
Creating such a graph
\end_layout

\begin_layout Standard
Here is the demo:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_custom_edges_and_vertices_k3_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demo of the 'create_custom_edges_and_vertices_k3_graph' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_edges_and_vertices_k3_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:create_custom_edges_and_vertices_k3_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .dot file produced
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_custom_edges_and_vertices_k3_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 'create_custom_edges_and_vertices_markov_chain'
 function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_edges_and_vertices_k3_graph"

\end_inset

), converted from graph to .dot file using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_custom_edges_and_vertices_k3_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .svg file produced
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_custom_edges_and_vertices_k3_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the 'create_custom_edges_and_vertices_k3_graph' function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_markov_chain"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:create_custom_edges_and_vertices_k3_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Working on graphs with custom edges and vertices
\end_layout

\begin_layout Subsection
Has a my_custom_edge
\begin_inset CommandInset label
LatexCommand label
name "sub:has_custom_edge_with_my_edge"

\end_inset


\end_layout

\begin_layout Standard
Before modifying our edges, let's first determine if we can find an edge
 by its custom type ('my_custom_edge') in a graph.
 After obtaing a my_custom_edge map, we obtain the edge iterators, dereference
 these to obtain the edge descriptors and then compare each edge its my_custom_e
dge with the one desired.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_custom_edge_with_my_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find if there is a custom edge with a certain my_custom_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
Has custom edge with my_custom_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:has_custom_edge_with_my_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This function can be demonstrated as in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:has_custom_edge_with_my_edge_demo"

\end_inset

, where a certain 'my_custom_edge' cannot be found in an empty graph.
 After adding the desired my_custom_edge, it is found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_custom_edge_with_my_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'has_custom_edge_with_my_edge' function
\begin_inset CommandInset label
LatexCommand label
name "alg:has_custom_edge_with_my_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this function only finds if there is at least one edge with that
 my_custom_edge: it does not tell how many edges with that my_custom_edge
 exist in the graph.
\end_layout

\begin_layout Subsection
Find a my_custom_edge
\begin_inset CommandInset label
LatexCommand label
name "sub:find_first_custom_edge_with_my_edge"

\end_inset


\end_layout

\begin_layout Standard
Where STL functions work with iterators, here we obtain an edge descriptor
 (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Edge-descriptors"

\end_inset

) to obtain a handle to the desired edge.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_edge_with_my_custom_edge"

\end_inset

 shows how to obtain an edge descriptor to the first edge found with a specific
 my_custom_edge value.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_custom_edge_with_my_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find the first custom edge with a certain my_custom_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
Find first custom edge with my_custom_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_edge_with_my_custom_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the edge descriptor obtained, one can read and modify the edge and
 the vertices surrounding it.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_edge_with_my_custom_edge_demo"

\end_inset

 shows some examples of how to do so.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_custom_edge_with_my_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'find_first_custom_edge_with_my_edge' function
\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_edge_with_my_custom_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Get an edge its my_custom_edge
\begin_inset CommandInset label
LatexCommand label
name "sub:get_custom_edge_my_edge"

\end_inset


\end_layout

\begin_layout Standard
To obtain the my_edeg from an edge descriptor, one needs to pull out the
 my_custom_edges map and then look up the my_edge of interest.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_custom_edge_my_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get a vertex its my_custom_vertex from its vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get custom edge my_custom_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_custom_edge_my_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'get_custom_edge_my_custom_edge', one first needs to obtain an edge
 descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_custom_edge_my_edge_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_custom_edge_my_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'get_custom_edge_my_edge' function
\begin_inset CommandInset label
LatexCommand label
name "alg:get_custom_edge_my_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Set an edge its my_custom_edge
\begin_inset CommandInset label
LatexCommand label
name "sub:set_custom_edge_my_edge"

\end_inset


\end_layout

\begin_layout Standard
If you know how to get the my_custom_edge from an edge descriptor, setting
 it is just as easy, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_edge_my_custom_edge"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_custom_edge_my_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Set a custom edge its my_custom_edge from its edge descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set custom edge my_custom_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_edge_my_custom_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'set_custom_edge_my_edge', one first needs to obtain an edge descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_custom_edge_my_edge_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_custom_edge_my_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'set_custom_edge_my_edge' function
\begin_inset CommandInset label
LatexCommand label
name "alg:set_custom_edge_my_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Storing a graph with custom edges and vertices as a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:save_custom_edges_and_vertices_graph_to_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Save graph with custom edges and vertices as .dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create .dot from graph with custom edges and vertices
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
If you used the create_custom_edges_and_vertices_k3_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_edges_and_vertices_k3_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{3}$
\end_inset

 graph with edges and vertices associated with my_custom_edge and my_custom_vert
ex objects, you can store these my_custom_edges and my_custom_vertex-es
 additionally with algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_custom_edges_and_vertices_graph_to_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_custom_edges_and_vertices_graph_to_dot_cpp14.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing a graph with custom edges and vertices as a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Save custom edges and vertices graph to dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_custom_edges_and_vertices_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this algorithm uses C++14
\begin_inset Index idx
status open

\begin_layout Plain Layout
C++14
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Load a directed graph with custom edges and vertices from a .dot file
\begin_inset CommandInset label
LatexCommand label
name "sub:sub:load_directed_custom_edges_and_vertices_graph_from_dot"

\end_inset


\end_layout

\begin_layout Standard
When loading a graph from file, one needs to specify a type of graph.
 In this example, an directed graph with custom edges and vertices is loaded,
 as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_directed_custom_edges_and_vertices_graph_from_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_custom_edges_and_vertices_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loading a directed graph with custom edges and vertices from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load directed custom edges and vertices graph from dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:load_directed_custom_edges_and_vertices_graph_from_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this algorithm, first it is checked if the file to load exists.
 Then an empty directed graph is created.
 Next to this, a boost::dynamic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties
\end_layout

\end_inset

 is created with its default constructor, after which we direct the boost::dynam
ic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties
\end_layout

\end_inset

 to find a 'node_id' and 'label' in the vertex name map, 'edge_id' and 'label
 to the edge name map.
 From this and the empty graph, 'boost::read_graphviz'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::read_graphviz
\end_layout

\end_inset

 is called to build up the graph.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_directed_custom_edges_and_vertices_graph_from_dot_demo"

\end_inset

 shows how to use the 'load_directed_custom_edges_and_vertices_graph_from_dot'
 function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_custom_edges_and_vertices_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'load_directed_custom_edges_and_vertices_graph_from_dot'
 function
\begin_inset CommandInset label
LatexCommand label
name "alg:load_directed_custom_edges_and_vertices_graph_from_dot_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration shows how the Markov chain is created using the 'create_custo
m_edges_and_vertices_markov_chain' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_edges_and_vertices_markov_chain"

\end_inset

), saved and then loaded.
\end_layout

\begin_layout Subsection
Load an undirected graph with custom edges and vertices from a .dot file
\begin_inset CommandInset label
LatexCommand label
name "sub:load_undirected_custom_edges_and_vertices_graph_from_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected graph with custom edges and vertices from .dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create undirected graph with custom edges and vertices from .dot
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When loading a graph from file, one needs to specify a type of graph.
 In this example, an undirected graph with custom edges and vertices is
 loaded, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_undirected_custom_edges_and_vertices_graph_from_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_custom_edges_and_vertices_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loading an undirected graph with custom edges and vertices from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected custom edges and vertices graph from dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:load_undirected_custom_edges_and_vertices_graph_from_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The only difference with loading a directed graph, is that the initial empty
 graph is undirected instead.
 Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:sub:load_directed_custom_edges_and_vertices_graph_from_dot"

\end_inset

 describes the rationale of this function.
 
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:load_undirected_custom_edges_and_vertices_graph_from_dot_demo"

\end_inset

 shows how to use the 'load_undirected_custom_vertices_graph_from_dot' function:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_custom_edges_and_vertices_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'load_undirected_custom_edges_and_vertices_graph_from_dot'
 function
\begin_inset CommandInset label
LatexCommand label
name "alg:load_undirected_custom_edges_and_vertices_graph_from_dot_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration shows how 
\begin_inset Formula $K_{2}$
\end_inset

 with custom vertices is created using the 'create_custom_vertices_k2_graph'
 function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_k2_graph"

\end_inset

), saved and then loaded.
 The loaded graph is checked to be a graph similar to the original.
\end_layout

\begin_layout Section
Building graphs with a graph name
\begin_inset CommandInset label
LatexCommand label
name "sec:Building-graphs-with-a-graph-name"

\end_inset


\end_layout

\begin_layout Subsection
Create an empty directed graph with a graph name property
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_directed_graph_with_graph_name"

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_directed_graph_with_graph_name"

\end_inset

 shows the function to create an empty directed graph with a graph name.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_graph_with_graph_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty directed graph with a graph name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty directed graph with graph name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_graph_with_graph_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_directed_graph_with_graph_name_demo"

\end_inset

 demonstrates the 'create_empty_directed_graph_with_graph_name' function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_graph_with_graph_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'create_empty_directed_graph_with_graph_name'
\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_graph_with_graph_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Create an empty undirected graph with a graph name property
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_undirected_graph_with_graph_name"

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_undirected_graph_with_graph_name"

\end_inset

 shows the function to create an empty undirected graph with a graph name.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_graph_with_graph_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty undirected graph with a graph name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty undirected graph with graph name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_undirected_graph_with_graph_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_undirected_graph_with_graph_name_demo"

\end_inset

 demonstrates the 'create_empty_undirected_graph_with_graph_name' function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_graph_with_graph_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'create_empty_undirected_graph_with_graph_name'
\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_undirected_graph_with_graph_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Create a directed graph with a graph name property
\begin_inset CommandInset label
LatexCommand label
name "sub:create_markov_chain_with_graph_name"

\end_inset


\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
See figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:markov_chain"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Function to create such a graph
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_markov_chain_with_graph_name"

\end_inset

 shows the function to create an empty directed graph with a graph name.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_markov_chain_with_graph_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating a two-state Markov chain with a graph name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create Markov chain with graph name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_markov_chain_with_graph_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Creating such a graph
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_markov_chain_with_graph_name_demo"

\end_inset

 demonstrates the 'create_markov_chain_with_graph_name' function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_markov_chain_with_graph_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'create_markov_chain_with_graph_name'
\begin_inset CommandInset label
LatexCommand label
name "alg:create_markov_chain_with_graph_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .dot file produced
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_markov_chain_with_graph_name.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 'create_markov_chain_with_graph_name' function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_markov_chain_with_graph_name"

\end_inset

), converted from graph to .dot file using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_markov_chain_with_graph_name.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .svg file produced
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_markov_chain_with_graph_name.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the 'create_markov_chain_with_graph_name' function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_markov_chain_with_graph_name"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:create_markov_chain_with_graph_name.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Create an undirected graph with a graph name property
\begin_inset CommandInset label
LatexCommand label
name "sub:create_k2_graph_with_graph_name"

\end_inset


\end_layout

\begin_layout Subsubsection
Graph
\end_layout

\begin_layout Standard
See figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:k2_graph"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Function to create such a graph
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph_with_graph_name"

\end_inset

 shows the function to create K2 graph with a graph name.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_k2_graph_with_graph_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating a K2 graph with a graph name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create K2 graph with graph name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_k2_graph_with_graph_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Creating such a graph
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph_with_graph_name_demo"

\end_inset

 demonstrates the 'create_k2_graph_with_graph_name' function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_k2_graph_with_graph_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'create_k2_graph_with_graph_name'
\begin_inset CommandInset label
LatexCommand label
name "alg:create_k2_graph_with_graph_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .dot file produced
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_k2_graph_with_graph_name.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 'create_k2_graph_with_graph_name' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph_with_graph_name"

\end_inset

), converted from graph to .dot file using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_k2_graph_with_graph_name.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The .svg file produced
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_k2_graph_with_graph_name.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the 'create_k2_graph_with_graph_name' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph_with_graph_name"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:convert_dot_to_svg"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:create_k2_graph_with_graph_name.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Working on graphs with a graph name
\end_layout

\begin_layout Subsection
Set a graph its name property
\begin_inset CommandInset label
LatexCommand label
name "sub:set_graph_name"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_graph_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Set a graph its name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set graph name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_graph_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_graph_name_demo"

\end_inset

 demonstrates the 'set_graph_name' function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_graph_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'set_graph_name'
\begin_inset CommandInset label
LatexCommand label
name "alg:set_graph_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Get a graph its name property
\begin_inset CommandInset label
LatexCommand label
name "sub:get_graph_name"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_graph_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get a graph its name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get graph name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_graph_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_graph_name_demo"

\end_inset

 demonstrates the 'get_graph_name' function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_graph_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'get_graph_name'
\begin_inset CommandInset label
LatexCommand label
name "alg:get_graph_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Storing a graph with a graph name property as a .dot file
\begin_inset CommandInset label
LatexCommand label
name "sub:save_graph_with_graph_name_to_dot"

\end_inset


\end_layout

\begin_layout Standard
I am unsure if this results in a .dot file that can produce a graph with
 a graph name, but this is what I came up with.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_graph_with_graph_name_to_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing a graph with a graph name as a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Save graph with graph name to dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_graph_with_graph_name_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Loading a directed graph with a graph name property from a .dot file
\begin_inset CommandInset label
LatexCommand label
name "sub:load_directed_graph_with_graph_name_from_dot"

\end_inset


\end_layout

\begin_layout Standard
This will result in a directed graph without a name [ISSUE #12].
 Please email me if you know how to do this correctly.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_graph_with_graph_name_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loading a directed graph with a graph name from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load directed custom edges and vertices graph from dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:load_directed_graph_with_graph_name_from_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note the part that I removed using #ifdef: I read that that is a valid approach,
 according to the Boost.Graph documentation (see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.boost.org/doc/libs/1_60_0/libs/graph/doc/read_graphviz.html
\end_layout

\end_inset

), but it failed to compile.
\end_layout

\begin_layout Subsection
Loading an undirected graph with a graph name property from a .dot file
\begin_inset CommandInset label
LatexCommand label
name "sub:load_undirected_graph_with_graph_name_from_dot"

\end_inset


\end_layout

\begin_layout Standard
This will result in an undirected graph without a name.
 [ISSUE #12] Please email me if you know how to do this correctly.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_graph_with_graph_name_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Loading an undirected graph with a graph name from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected custom edges and vertices graph from dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:load_undirected_graph_with_graph_name_from_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note the part that I removed using #ifdef: I read that that is a valid approach,
 according to the Boost.Graph documentation (see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.boost.org/doc/libs/1_60_0/libs/graph/doc/read_graphviz.html
\end_layout

\end_inset

), but it failed to compile.
\end_layout

\begin_layout Section
Building graphs with custom graph properties
\end_layout

\begin_layout Standard
I will write this chapter if and only if I can save and load a graph with
 a graph name (as in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Building-graphs-with-a-graph-name"

\end_inset

).
 That is, if Issue #12 is fixed.
\end_layout

\begin_layout Section
Working on graphs with custom graph properties
\end_layout

\begin_layout Standard
I will write this chapter if and only if I can save and load a graph with
 a graph name (as in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Building-graphs-with-a-graph-name"

\end_inset

).That is, if Issue #12 is fixed.
\end_layout

\begin_layout Section
Other graph functions
\begin_inset CommandInset label
LatexCommand label
name "sec:Other-graph-functions"

\end_inset


\end_layout

\begin_layout Standard
Some functions that did not fit in
\end_layout

\begin_layout Subsection
Encode a std::string to a Graphviz-friendly format
\begin_inset CommandInset label
LatexCommand label
name "sub:graphviz_encode"

\end_inset


\end_layout

\begin_layout Standard
You may want to use a label with spaces, comma's and/or quotes.
 Saving and loading these, will result in problem.
 This function replaces these special characters by a rare combination of
 ordinary characters.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "graphviz_encode.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Encode a std::string to a Graphviz-friendly format
\begin_inset Index idx
status open

\begin_layout Plain Layout
graphviz encode
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:graphviz_encode"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Decode a std::string from a Graphviz-friendly format
\begin_inset CommandInset label
LatexCommand label
name "sub:graphviz_decode"

\end_inset


\end_layout

\begin_layout Standard
This function undoes the 'graphviz_encode' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:graphviz_encode"

\end_inset

) and thus converts a Graphviz-friendly std::string to the original human-friend
ly std::string.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "graphviz_decode.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Decode a std::string from a Graphviz-friendly format to a human-friendly
 format
\begin_inset Index idx
status open

\begin_layout Plain Layout
graphviz decode
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:graphviz_decode"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Misc functions
\end_layout

\begin_layout Standard
These are some function I needed for creating this tutorial.
 Although they are not important for working with graphs, I used these heavily.
 These functions may be compiler-dependent, platform-dependent and/or there
 may be superior alternatives.
 I just add them for completeness.
\end_layout

\begin_layout Subsection
Getting a data type as a std::string
\begin_inset CommandInset label
LatexCommand label
name "sub:get_type_name"

\end_inset


\end_layout

\begin_layout Standard
This function will only work under GCC.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_type_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Getting a data type its name as a std::string
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get type name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_type_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Convert a .dot to .svg
\begin_inset CommandInset label
LatexCommand label
name "sub:convert_dot_to_svg"

\end_inset


\end_layout

\begin_layout Standard
All illustrations in this tutorial are created by converting .dot to a .svg
 ('Scalable Vector Graphic') file.
 This function assumes the program 'dot' is installed, which is part of
 Graphviz.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "convert_dot_to_svg.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Convert a .dot file to a .svg
\begin_inset Index idx
status open

\begin_layout Plain Layout
Convert dot to svg
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:convert_dot_to_svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
'convert_dot_to_svg' makes a system call to the prgram 'dot' to convert
 the .dot file to an .svg file.
\end_layout

\begin_layout Subsection
Check if a file exists
\begin_inset CommandInset label
LatexCommand label
name "sub:is_regular_file"

\end_inset


\end_layout

\begin_layout Standard
Not the most smart way perhaps, but it does only use the STL.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "is_regular_file.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Check if a file exists
\begin_inset Index idx
status open

\begin_layout Plain Layout
Is regular file
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:is_regular_file"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Errors
\end_layout

\begin_layout Standard
Some common errors.
\end_layout

\begin_layout Subsection
Formed reference to void
\begin_inset CommandInset label
LatexCommand label
name "sub:formed_reference_to_void"

\end_inset


\end_layout

\begin_layout Standard
This compile-time error occurs when you create a graph without a certain
 property, then subsequently reading that property, as in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:formed_reference_to_void"

\end_inset

: 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "formed_reference_to_void.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating the error 'formed reference to void'
\begin_inset Index idx
status open

\begin_layout Plain Layout
Formed reference to void
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:formed_reference_to_void"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:formed_reference_to_void"

\end_inset

 a graph is created with vertices of no properties.
 Then the names of these vertices, which do not exists, are tried to be
 read.
 If you want to read the names of the vertices, supply a graph that has
 this property.
\end_layout

\begin_layout Subsection
No matching function for call to 'clear_out_edges'
\begin_inset CommandInset label
LatexCommand label
name "sub:no_matching_function_for_call_to_clear_out_edges"

\end_inset


\end_layout

\begin_layout Standard
This compile-time error occurs when you want to clear the outward edges
 from a vertex in an undirected graph.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "no_matching_function_for_call_to_clear_out_edges.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating the error 'no matching function for call to clear_out_edges'
\begin_inset Index idx
status open

\begin_layout Plain Layout
No matching function for call to clear_out_edges
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:no_matching_function_for_call_to_clear_out_edges"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:no_matching_function_for_call_to_clear_out_edges"

\end_inset

 an undirected graph is created, a vertex descriptor is obtained, then its
 out edges are tried to be cleared.
 Either use a directed graph (which has out edges), or use the 'boost::clear_ver
tex' function instead.
\end_layout

\begin_layout Subsection
No matching function for call to 'clear_in_edges'
\begin_inset CommandInset label
LatexCommand label
name "sub:no_matching_function_for_call_to_clear_in_edges"

\end_inset


\end_layout

\begin_layout Standard
See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:no_matching_function_for_call_to_clear_out_edges"

\end_inset

.
\end_layout

\begin_layout Subsection
Undefined reference to boost::detail::graph::read_graphviz_new
\begin_inset CommandInset label
LatexCommand label
name "sub:undefined_reference_to_read_graphviz_new"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
read_graphviz_new
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Undefined reference to read_graphviz_new
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
read_graphviz_new, undefined reference
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You will have to link
\begin_inset Index idx
status open

\begin_layout Plain Layout
link
\end_layout

\end_inset

 against the Boost.Graph and Boost.Regex libraries.
 In Qt Creator, this is achieved by adding these lines to your Qt Creator
 project file:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

LIBS += -lboost_graph -lboost_regex 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Property not found: node_id
\begin_inset CommandInset label
LatexCommand label
name "sub:property_not_found_node_id"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
node_id
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Propery not found
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Property not found: node_id
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When loading a graph from file (as in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:load_undirected_graph_from_dot"

\end_inset

) you will be using boost::read_graphviz
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::read_graphviz
\end_layout

\end_inset

.
 boost::read_graphviz
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::read_graphviz
\end_layout

\end_inset

 needs a third argument, of type boost::dynamic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties
\end_layout

\end_inset

.
 When a graph does not have properties, do not use a default constructed
 version, but initializate with 'boost::ignore_other_properties'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::ignore_other_properties
\end_layout

\end_inset

 as a constructor argument instead.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:property_not_found_node_id"

\end_inset

 shows how to trigger this run-time error.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "property_not_found_node_id.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating the error 'Property not found: node_id'
\begin_inset Index idx
status open

\begin_layout Plain Layout
Property not found: node_id
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:property_not_found_node_id"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Appendix
\end_layout

\begin_layout Subsection
List of all edge, graph and vertex properties
\begin_inset CommandInset label
LatexCommand label
name "sub:all_properties"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
All edge properties
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
All graph properties
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
All vertex properties
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge properties
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Graph properties
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex properties
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following list is obtained from the file 'boost/graph/properties.hpp'.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="29" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Edge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Graph
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vertex
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_all
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
graph_all
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_all
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_bundle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
graph_bundle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_bundle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_capacity
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
graph_name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_centrality
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_centrality
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
graph_visitor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_color
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_color
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_current_degree
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_discover_time
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_degree
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_finished
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_discover_time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_flow
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_distance
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_global
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_distance2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_index
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_finish_time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_local
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_global
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_local_index
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_in_degree
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_index
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_owner
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_index1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_residual_capacity
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_index2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_reverse
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_local
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_underlying
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_local_index
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_update
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_lowpoint
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_weight
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_name
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_weight2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_out_degree
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_owner
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_potential
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_predecessor
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_priority
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_rank
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_root
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_underlying
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_update
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "boost_graph_tutorial"
options "plain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset


\end_layout

\end_body
\end_document
