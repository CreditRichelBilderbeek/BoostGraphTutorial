//#include <boost/graph/adjacency_list.hpp>
#include "create_empty_undirected_custom_vertices_graph.h"
#include "install_vertex_custom_type.h"
//#include "my_custom_vertex.h"

template<class my_custom_vertex_type = my_custom_vertex>
boost::adjacency_list<
  boost::vecS,
  boost::vecS,
  boost::undirectedS,
  boost::property<
    boost::vertex_custom_type_t, my_custom_vertex_type
  >
>
create_custom_vertices_k2_graph() noexcept
{
  auto g = create_empty_undirected_custom_vertices_graph();
  const auto vd_a = boost::add_vertex(g);
  const auto vd_b = boost::add_vertex(g);
  const auto aer = boost::add_edge(vd_a, vd_b, g);
  assert(aer.second);

  auto my_custom_vertex_map = get( //not boost::get
    boost::vertex_custom_type,g
  );
  my_custom_vertex_map[vd_a]
    = my_custom_vertex("A","source",0.0,0.0);
  my_custom_vertex_map[vd_b]
    = my_custom_vertex("B","target",3.14,3.14);

  return g;
}
