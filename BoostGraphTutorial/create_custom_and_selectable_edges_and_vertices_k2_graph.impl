#include "create_empty_undirected_custom_and_selectable_edges_and_vertices_graph.h"

boost::adjacency_list<
  boost::vecS,
  boost::vecS,
  boost::undirectedS,
  boost::property<
    boost::vertex_custom_type_t, my_custom_vertex,
    boost::property<
      boost::vertex_is_selected_t, bool
    >
  >,
  boost::property<
    boost::edge_custom_type_t, my_custom_edge,
    boost::property<
      boost::edge_is_selected_t, bool
    >
  >
>
create_custom_and_selectable_edges_and_vertices_k2_graph() noexcept
{
  auto g
    = create_empty_undirected_custom_and_selectable_edges_and_vertices_graph();
  const auto vd_a = boost::add_vertex(g);
  const auto vd_b = boost::add_vertex(g);
  const auto aer = boost::add_edge(vd_a, vd_b, g);
  assert(aer.second);

  auto my_custom_vertexes_map = get(
    boost::vertex_custom_type,
    g
  );
  put(my_custom_vertexes_map, vd_a,
    my_custom_vertex("A","source",0.0,0.0)
  );
  put(my_custom_vertexes_map, vd_b,
    my_custom_vertex("B","target",3.14,3.14)
  );

  auto is_selected_map = get(
    boost::vertex_is_selected,
    g
  );
  put(is_selected_map, vd_a, true);
  put(is_selected_map, vd_b, false);
  return g;
}
