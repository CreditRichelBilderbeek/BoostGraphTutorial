#include <string>
#include <boost/graph/adjacency_list.hpp>
#include "create_empty_undirected_named_edges_and_vertices_graph.h"
#include "add_named_vertex.h"

boost::adjacency_list<
  boost::vecS,
  boost::vecS,
  boost::undirectedS,
  boost::property<boost::vertex_name_t,std::string>,
  boost::property<boost::edge_name_t,std::string>
>
create_named_edges_and_vertices_k3_graph() noexcept
{
  auto g
    = create_empty_undirected_named_edges_and_vertices_graph();
  const auto vd_a = add_named_vertex("top", g);
  const auto vd_b = add_named_vertex("right", g);
  const auto vd_c = add_named_vertex("left", g);
  const auto aer_ab = boost::add_edge(vd_a, vd_b, g);
  assert(aer_ab.second);
  const auto aer_bc = boost::add_edge(vd_b, vd_c, g);
  assert(aer_bc.second);
  const auto aer_ca = boost::add_edge(vd_c, vd_a, g);
  assert(aer_ca.second);

  auto edge_name_map = get(boost::edge_name,g);
  put(edge_name_map, aer_ab.first, "AB");
  put(edge_name_map, aer_bc.first, "BC");
  put(edge_name_map, aer_ca.first, "CA");

  return g;
}

