#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/graphviz.hpp>
#include "create_empty_undirected_bundled_edges_and_vertices_graph.h"
#include "is_regular_file.h"
#include "my_bundled_edge.h"
#include "my_bundled_vertex.h"

///Load a undirected graph with custom edges and
///vertices from a .dot file.
///Assumes the file exists
boost::adjacency_list<
  boost::vecS,
  boost::vecS,
  boost::undirectedS,
  my_bundled_vertex,
  my_bundled_edge
>
load_undirected_bundled_edges_and_vertices_graph_from_dot(
  const std::string& dot_filename
)
{
  assert(is_regular_file(dot_filename));
  std::ifstream f(dot_filename.c_str());
  auto g = create_empty_undirected_bundled_edges_and_vertices_graph();

  //Something like this...
  boost::dynamic_properties p; //_do_ default construct
  p.property("node_id",get(&my_bundled_vertex::m_name, g));
  p.property("label",get(&my_bundled_vertex::m_name, g));
  p.property("edge_id",get(&my_bundled_edge::m_name, g));
  p.property("label",get(&my_bundled_edge::m_name, g));

  boost::read_graphviz(f,g,p);
  return g;
}
