#include <cassert>
#include <boost/graph/graph_traits.hpp>
#include "install_edge_custom_type.h"
#include "my_custom_edge.h"

template <typename graph, typename function>
typename boost::graph_traits<graph>::edge_descriptor
find_first_custom_edge(
  const function& predicate,
  const graph& g
)
{
  using ed = typename boost::graph_traits<graph>::edge_descriptor;
  const auto eip = edges(g);
  const auto i = std::find_if(
    eip.first, eip.second,
    [g,predicate](const ed d) {
      const auto my_edges_map = get(boost::edge_custom_type, g);
      const auto edge = get(my_edges_map, d);
      return predicate(edge);
    }
  );
  if (i == eip.second)
  {
    std::stringstream msg;
    msg << __func__ << ": "
      << "could not find a custom_edge satisfying the predicate"
    ;
    throw std::invalid_argument(msg.str());
  }
  return *i;
}
