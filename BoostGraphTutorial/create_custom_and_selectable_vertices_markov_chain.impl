#include <cassert>
//#include <boost/graph/adjacency_list.hpp>
#include "create_empty_directed_custom_and_selectable_vertices_graph.h"
//#include "install_vertex_custom_type.h"
//#include "my_custom_and_selectable_vertex.h"

///Create a two-state Markov chain with custom vertices
///for any my_custom_vertex_type (which is
///'my_custom_vertex' by default) and any is_selected_type
///(which is bool by default)
template<
  typename my_custom_vertex_type = my_custom_vertex,
  typename is_selected_type = bool
>
boost::adjacency_list<
  boost::vecS,
  boost::vecS,
  boost::directedS,
  boost::property<
    boost::vertex_custom_type_t, my_custom_vertex_type,
    boost::property<
      boost::vertex_is_selected_t, is_selected_type
    >
  >
>
create_custom_and_selectable_vertices_markov_chain() noexcept
{
  auto g
    = create_empty_directed_custom_and_selectable_vertices_graph();
  const auto vd_a = boost::add_vertex(g);
  const auto vd_b = boost::add_vertex(g);
  const auto aer_aa = boost::add_edge(vd_a, vd_a, g);
  assert(aer_aa.second);
  const auto aer_ab = boost::add_edge(vd_a, vd_b, g);
  assert(aer_ab.second);
  const auto aer_ba = boost::add_edge(vd_b, vd_a, g);
  assert(aer_ba.second);
  const auto aer_bb = boost::add_edge(vd_b, vd_b, g);
  assert(aer_bb.second);

  auto my_custom_vertex_map
    = get( //not boost::get
    boost::vertex_custom_type,g
  );
  my_custom_vertex_map[vd_a] = my_custom_vertex("Sunny",
    "Yellow thing",1.0,2.0
  );
  my_custom_vertex_map[vd_b] = my_custom_vertex("Rainy",
    "Grey things",3.0,4.0
  );

  auto is_selected_map
    = get( //not boost::get
    boost::vertex_is_selected, g
  );
  is_selected_map[vd_a] = true;
  is_selected_map[vd_b] = false;

  return g;
}
