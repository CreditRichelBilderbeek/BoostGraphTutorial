#include "install_vertex_custom_type.h"
#include "my_custom_vertex.h"
#include "create_empty_undirected_custom_edges_and_vertices_graph.h"
#include <boost/graph/adjacency_list.hpp>

boost::adjacency_list<
  boost::vecS,
  boost::vecS,
  boost::undirectedS,
  boost::property<
    boost::vertex_custom_type_t,my_custom_vertex
  >,
  boost::property<
    boost::edge_custom_type_t,my_custom_edge
  >
>
create_custom_edges_and_vertices_k3_graph() noexcept
{
  auto g
    = create_empty_undirected_custom_edges_and_vertices_graph();
  const auto vd_a = boost::add_vertex(g);
  const auto vd_b = boost::add_vertex(g);
  const auto vd_c = boost::add_vertex(g);
  const auto aer_a = boost::add_edge(vd_a, vd_b, g);
  const auto aer_b = boost::add_edge(vd_b, vd_c, g);
  const auto aer_c = boost::add_edge(vd_c, vd_a, g);
  assert(aer_a.second);
  assert(aer_b.second);
  assert(aer_c.second);

  auto my_custom_vertex_map
    = get(  //not boost::get
      boost::vertex_custom_type,g
    );
  my_custom_vertex_map[vd_a]
    = my_custom_vertex("top","source",0.0,0.0);
  my_custom_vertex_map[vd_b]
    = my_custom_vertex("right","target",3.14,0);
  my_custom_vertex_map[vd_c]
    = my_custom_vertex("left","target",0,3.14);

  auto my_edge_map = get(boost::edge_custom_type,g);
  my_edge_map[aer_a.first]
    = my_custom_edge("AB","first",0.0,0.0);
  my_edge_map[aer_b.first]
    = my_custom_edge("BC","second",3.14,3.14);
  my_edge_map[aer_c.first]
    = my_custom_edge("CA","third",3.14,3.14);

  return g;
}
