#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{tikz}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Boost.Graph tutorial
\end_layout

\begin_layout Author
Richel Bilderbeek
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
I needed this tutorial in 2006, when I started experimenting with Boost.Graph.
 More specifically, I needed a tutorial that:
\end_layout

\begin_layout Itemize
Orders concepts chronologically
\end_layout

\begin_layout Itemize
Increases complexity gradually
\end_layout

\begin_layout Itemize
Shows complete pieces of code
\end_layout

\begin_layout Standard
What I had were the book 
\begin_inset CommandInset citation
LatexCommand cite
key "siek2001boost"

\end_inset

 and the Boost.Graph website, both did not satisfy these requirements.
\end_layout

\begin_layout Subsection
Coding style used
\end_layout

\begin_layout Standard
I use the coding style from the Core C++ Guidelines.
\end_layout

\begin_layout Standard
I prefer to use the keyword auto over doubling the lines of code for using
 statements.
 There are plenty of algorithms that return an explicit data type, which
 can be used for reference.
\end_layout

\begin_layout Standard
All coding snippets are taken from compiled C++ code.
\end_layout

\begin_layout Subsection
Pitfalls
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset

The choice between 'boost::get', 'std::get' and 'get'.
 AFAIKS, when in doubt, use 'get'.
\end_layout

\begin_layout Section
Building graphs
\end_layout

\begin_layout Standard
Boost.Graph is about creating graphs.
 In this chapter we create graphs, starting from simple to more complex:
\end_layout

\begin_layout Itemize
An empty (directed) graph, which is the default type: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_graph"

\end_inset


\end_layout

\begin_layout Itemize
An empty (undirected) graph: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_undirected_graph"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{2}$
\end_inset

, an undirected graph with two vertices and one edge, chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_k2"

\end_inset


\end_layout

\begin_layout Itemize
An empty (undirected) graph that allows for vertices with names: see chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_named_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{2}$
\end_inset

with named vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_vertices_k2"

\end_inset


\end_layout

\begin_layout Itemize
An empty (undirected) graph that allows for edges and vertices with names:
 see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_named_edges_and_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{3}$
\end_inset

with named edges and vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_edges_and_vertices_k3"

\end_inset


\end_layout

\begin_layout Itemize
An empty (undirected) graph that allows for custom vertices: see chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_custom_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{2}$
\end_inset

with custom vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_custom_vertices_k2"

\end_inset


\end_layout

\begin_layout Itemize
An empty (undirected) graph that allows for custom edges and vertices: see
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_custom_edges_and_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{3}$
\end_inset

with custom edges and vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_custom_edges_and_vertices_k3"

\end_inset


\end_layout

\begin_layout Subsection
Creating an empty (directed) graph
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_directed_graph"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Create an empty directed graph
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Empty directed graph, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's create a trivial empty graph:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty (directed) graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
create_empty_directed_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Congratulations, you've just created a boost::adjacency_list
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::adjacency_list
\end_layout

\end_inset

 in which:
\end_layout

\begin_layout Itemize
The out edges are stored in a std::vector
\end_layout

\begin_layout Itemize
The vertices are stored in a std::vector
\end_layout

\begin_layout Itemize
The graph is directed
\end_layout

\begin_layout Itemize
Vertices, edges and graph have no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Why specify edge storage twice?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The boost::adjacency_list is the most commonly used graph type, the other
 is the boost::adjacency_matrix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::adjacency_matrix
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Creating an empty undirected graph
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_undirected_graph"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Create an empty graph
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Empty graph, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's create a trivial empty graph:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
create_empty_undirected_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_graph-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Congratulations, you've just created a boost::adjacency_list
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::adjacency_list
\end_layout

\end_inset

 in which:
\end_layout

\begin_layout Itemize
The out edges are stored in a std::vector
\end_layout

\begin_layout Itemize
The vertices are stored in a std::vector
\end_layout

\begin_layout Itemize
The graph is undirected
\end_layout

\begin_layout Itemize
Vertices, edges and graph have no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Why specify edge storage twice?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The boost::adjacency_list is the most commonly used graph type, the other
 is the boost::adjacency_matrix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::adjacency_matrix
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Add a vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
Add a vertex
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex, add
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Add-a-vertex"

\end_inset


\end_layout

\begin_layout Standard
To add a vertex to a graph, the boost::add_vertex
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::add_vertex
\end_layout

\end_inset

 function is used as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Adding a vertex to a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
add_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that boost::add_vertex returns a vertex descriptor, which is ignored
 for now.
 Vertex descriptors are looked at in more details at the chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

.
\end_layout

\begin_layout Subsection
Vertex descriptors
\begin_inset CommandInset label
LatexCommand label
name "sub:Vertex-descriptors"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex descriptor
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A vertex descriptor is a handle to a vertex within a graph.
 Vertex descriptors are used to:
\end_layout

\begin_layout Itemize
boost::add_edge: connects two vertices by an edge
\end_layout

\begin_layout Itemize
obtain the name of vertex
\end_layout

\begin_layout Standard
In this tutorial, vertex descriptors have named prefixed with 'vd_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
vd_
\end_layout

\end_inset

, for example 'vd_1'.
\end_layout

\begin_layout Subsection
Add an edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
Add an edge
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge, add
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To add an edge to a graph, two vertex descriptors are needed.
 A vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex descriptor
\end_layout

\end_inset

 is a handle to the vertex with in graph (vertex descriptors are looked
 at in more details in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

).
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_edge"

\end_inset

 adds two vertices to a graph, and connects these two using boost::add_edge
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::add_edge
\end_layout

\end_inset

: 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Adding (two vertices and) an edge to a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
add_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This algorithm only shows how to add an isolated edge to a graph, instead
 of allowing for graphs with higher connectivities.
 The function boost::add_vertex returns a vertex descriptor, which I prefix
 with 'vd'
\begin_inset Index idx
status open

\begin_layout Plain Layout
vd
\end_layout

\end_inset

.
 The function boost::add_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge
\end_layout

\end_inset

 returns a std::pair
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::pair
\end_layout

\end_inset

, consisting of an edge descriptor and a boolean success indicator.
 In algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_edge"

\end_inset

 we assert
\begin_inset Index idx
status open

\begin_layout Plain Layout
assert
\end_layout

\end_inset

 that this insertion was successfull.
 Insertion can fail if an edge is already present and duplicates are not
 allowed.
\end_layout

\begin_layout Subsection
boost::add_edge result
\begin_inset CommandInset label
LatexCommand label
name "sub:boost::add_edge result"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge result
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When using the function 'boost::add_edge', a 'std::pair<edge_descriptor,bool>'
 is returned.
 It contains both the edge descriptor (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Edge-descriptors"

\end_inset

) and a boolean indicating insertion success.
\end_layout

\begin_layout Standard
In this tutorial, boost::add_edge results have named prefixed with 'aer_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
aer_
\end_layout

\end_inset

, for example 'aer_1'.
\end_layout

\begin_layout Subsection
Edge descriptors
\begin_inset CommandInset label
LatexCommand label
name "sub:Edge-descriptors"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge descriptor
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An edge descriptor is a handle to an edge within a graph.
 Edge descriptors are used to:
\end_layout

\begin_layout Itemize
obtain the name, or other properties, of an edge
\end_layout

\begin_layout Standard
In this tutorial, edge descriptors have named prefixed with 'ed_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
ed_
\end_layout

\end_inset

, for example 'ed_1'.
\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{2}$
\end_inset

, a fully connected graph with two vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_k2"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create 
\begin_inset Formula $K_{2}$
\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To create a fully connected graph with two vertices (also called 
\begin_inset Formula $K_{2}$
\end_inset

), one needs two vertices and one (undirected) edge, as depicted in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:k2_graph"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (0,0) node[fill=black,shape=circle,text=white] {$a$} 
\end_layout

\begin_layout Plain Layout

    -- (5,1) node[fill=black,shape=circle,text=white] {$b$} 
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

: a fully connected graph with two vertices named 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To create 
\begin_inset Formula $K_{2}$
\end_inset

, the following code can be used:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_k2_graph.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:k2_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
create_k2_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this code has more lines of using statements than actual code!
 In this code, the third template argument of boost::adjacency_list
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::adjacency_list
\end_layout

\end_inset

 is boost::undirectedS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::undirectedS
\end_layout

\end_inset

, to select (that is what the S means) for an undirected graph.
 Adding a vertex with boost::add_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_vertex
\end_layout

\end_inset

 results in a vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex descriptor
\end_layout

\end_inset

, which is a handle to the vertex added to the graph.
 Two vertex descriptors are then used to add an edge to the graph.
 Adding an edge using boost::add_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge
\end_layout

\end_inset

 returns two things: an edge descriptor and a boolean indicating success.
 In the code example, we assume insertion is successfull.
\end_layout

\begin_layout Standard
Note that the graph lacks all properties: nodes do not have names, nor do
 edges.
\end_layout

\begin_layout Subsection
Creating an empty graph with named vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_named_vertices_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create an empty graph with named vertices
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Named vertices, create empty graph
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Empty graph with named vertices, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's create a trivial empty graph, in which the vertices can have a name:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_named_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty graph with named vertices
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
create_empty_named_vertices_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_named_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This graph:
\end_layout

\begin_layout Itemize
has its out edges stored in a std::vector (due to the first boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
has its vertices stored in a std::vector (due to the second boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
is undirected (due to the boost::undirectedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
The vertices have one property: they have a name, that is of data type std::stri
ng (due to the boost::property< boost::vertex_name_t,std::string>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_name_t
\end_layout

\end_inset

')
\end_layout

\begin_layout Itemize
Edges and graph have no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Why specify edge storage twice?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The boost::adjacency_list
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::adjacency_list
\end_layout

\end_inset

 has a new, fourth template argument 'boost::property< boost::vertex_name_t,std:
:string>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_name_t
\end_layout

\end_inset

'.
 This can be read as: 
\begin_inset Quotes eld
\end_inset

vertices have the property 'boost::vertex_name_t', that is of data type
 'std::string'
\begin_inset Quotes erd
\end_inset

.
 Or simply: 
\begin_inset Quotes eld
\end_inset

vertices have a name that is stored as a std::string
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Add a vertex with a name
\begin_inset CommandInset label
LatexCommand label
name "sub:add_named_vertex"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Add named vertex
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Named vertex, add
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Vertex, add named
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Adding a vertex without a name was trivially easy (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_vertex"

\end_inset

).
 Adding a vertex with a name is less easy:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_named_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Add a vertex with a name
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
add_named_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_named_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Instead of calling 'boost::add_vertex' with an additional argument containing
 the name of the vertex, multiple things need to be done.
 When adding a new vertex to the graph, the vertex descriptor is stored.
 After obtaining the name map from the graph (using 'boost::get(boost::vertex_na
me,g)
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::get
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_name
\end_layout

\end_inset

'), the name of the vertex is set using that vertex descriptor.
\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_named_vertices_k2"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Create 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We extend 
\begin_inset Formula $K_{2}$
\end_inset

 of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_k2"

\end_inset

 by naming the vertices 'from' and 'to', as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_vertices_k2_graph"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (0,0) node[fill=black,shape=circle,text=white] {from} 
\end_layout

\begin_layout Plain Layout

    -- (5,0) node[fill=black,shape=circle,text=white] {to} 
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

: a fully connected graph with two vertices with the text 'from' and 'to'
 
\begin_inset CommandInset label
LatexCommand label
name "fig:named_vertices_k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To create 
\begin_inset Formula $K_{2}$
\end_inset

, the following code can be used:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_named_vertices_k2_graph.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_vertices_k2_graph"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
create_named_vertices_k2_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_vertices_k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the code is a repeat of algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

.
 In the end, the names are obtained as a boost::property_map and set.
\end_layout

\begin_layout Subsection
Creating an empty graph with named edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_named_edges_and_vertices_graph"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Create an empty graph with named edges and vertices
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Named edges and vertices, create empty graph
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Empty graph with named edges and vertices, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's create a trivial empty graph, in which the both the edges and vertices
 can have a name:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_named_edges_and_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty graph with named edges and vertices
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
create_empty_named_edges_and_vertices_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_named_edges_and_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This graph:
\end_layout

\begin_layout Itemize
has its out edges stored in a std::vector (due to the first boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
has its vertices stored in a std::vector (due to the second boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
is undirected (due to the boost::undirectedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
The vertices have one property: they have a name, that is of data type std::stri
ng (due to the boost::property< boost::vertex_name_t,std::string>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_name_t
\end_layout

\end_inset

')
\end_layout

\begin_layout Itemize
The edges have one property: they have a name, that is of data type std::string
 (due to the boost::property< boost::edge_name_t,std::string>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edge_name_t
\end_layout

\end_inset

')
\end_layout

\begin_layout Itemize
The graph has no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Why specify edge storage twice?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The boost::adjacency_list
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::adjacency_list
\end_layout

\end_inset

 has a new, fifth template argument 'boost::property< boost::edge_name_t,std::st
ring>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edge_name_t
\end_layout

\end_inset

'.
 This can be read as: 
\begin_inset Quotes eld
\end_inset

edges have the property 'boost::edge_name_t', that is of data type 'std::string'
\begin_inset Quotes erd
\end_inset

.
 Or simply: 
\begin_inset Quotes eld
\end_inset

edges have a name that is stored as a std::string
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Add an edge with a name
\begin_inset CommandInset label
LatexCommand label
name "sub:add_named_edge"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Add named edge
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Named edge, add
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Adding an edge with a name:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_named_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Add a vertex with a name
\begin_inset Index idx
status open

\begin_layout Plain Layout
add_named_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_named_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this code snippet, the edge descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
edge descriptor
\end_layout

\end_inset

 when using 'boost::add_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge
\end_layout

\end_inset

' is used as a key to change the edge name map.
\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 with named edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_named_edges_and_vertices_k3"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create 
\begin_inset Formula $K_{3}$
\end_inset

 with named edges and vertices
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $K_{3}$
\end_inset

 with named edges and vertices, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We extend the graph 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_vertices_k2"

\end_inset

 by adding names to the edges, as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_edges_and_vertices_k3"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (2,4) node[fill=black,shape=circle,text=white] {top} 
\end_layout

\begin_layout Plain Layout

   -- (3,2) node[anchor=west] {AB} 
\end_layout

\begin_layout Plain Layout

   -- (4,0) node[fill=black,shape=circle,text=white] {right} 
\end_layout

\begin_layout Plain Layout

   -- (2,0) node[anchor=north] {BC} 
\end_layout

\begin_layout Plain Layout

   -- (0,0) node[fill=black,shape=circle,text=white] {left} 
\end_layout

\begin_layout Plain Layout

   -- (1,2) node[anchor=east] {CA} 
\end_layout

\begin_layout Plain Layout

   -- (2,4)
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Formula $K_{3}$
\end_inset

: a fully connected graph with three named edges and vertices 
\begin_inset CommandInset label
LatexCommand label
name "fig:named_edges_and_vertices_k3"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To create 
\begin_inset Formula $K_{3}$
\end_inset

, the following code can be used:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_named_edges_and_vertices_k3_graph.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_edges_and_vertices_k3"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
create_named_edges_and_vertices_k3
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_edges_and_vertices_k3"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the code is a repeat of algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

.
 In the end, the edge names are obtained as a boost::property_map and set.
\end_layout

\begin_layout Subsection
Create an empty graph with custom vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_custom_vertices_graph"

\end_inset


\end_layout

\begin_layout Standard
Say we want to use our own vertex class as graph nodes.
 This is done in multiple steps:
\end_layout

\begin_layout Enumerate
Create a custom vertex class, called 'my_vertex'
\end_layout

\begin_layout Enumerate
Install a new property, called 'vertex_custom_type
\begin_inset Index idx
status open

\begin_layout Plain Layout
vertex_custom_type
\end_layout

\end_inset

'
\end_layout

\begin_layout Enumerate
Use the new property in creating a boost::adjacency_list
\end_layout

\begin_layout Subsubsection
Creating the custom vertex class
\end_layout

\begin_layout Standard
In this example, I create a custom vertex class.
 Here I will show the header file of it, as the implementation of it is
 not important yet.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "my_vertex.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Declaration of my_vertex
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
my_vertex
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
my_vertex.h
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
my_vertex declaration
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Declaration, my_vertex 
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:my_vertex_h"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
my_vertex is a class that has multiple properties: two doubles 'm_x' ('m_
\begin_inset Index idx
status open

\begin_layout Plain Layout
m_
\end_layout

\end_inset

' stands for member
\begin_inset Index idx
status open

\begin_layout Plain Layout
member
\end_layout

\end_inset

) and 'm_y', and two std::strings m_name and m_description.
 my_vertex is copyable, but cannot trivially be converted to a std::string.
\end_layout

\begin_layout Subsubsection
Installing the new property
\end_layout

\begin_layout Standard
Installing a new property would have been easier, if 'more C++ compilers
 were standards conformant' (
\begin_inset CommandInset citation
LatexCommand cite
key "siek2001boost"

\end_inset

, chapter 3.6, footnote at page 52).
 Boost.Graph uses the BOOST_INSTALL_PROPERTY
\begin_inset Index idx
status open

\begin_layout Plain Layout
BOOST_INSTALL_PROPERTY
\end_layout

\end_inset

 macro
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
macro
\end_layout

\end_inset

 to allow using a custom property:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "install_vertex_custom_type.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Installing the vertex_custom_type property
\begin_inset Index idx
status open

\begin_layout Plain Layout
install_vertex_custom_type
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:install_vertex_custom_type"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The enum value 314
\begin_inset Index idx
status open

\begin_layout Plain Layout
pi
\end_layout

\end_inset

 must be unique.
\end_layout

\begin_layout Subsubsection
Create the empty graph with custom vertices
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_custom_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty graph with custom vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
create_empty_custom_vertices_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_custom_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This graph:
\end_layout

\begin_layout Itemize
has its out edges stored in a std::vector (due to the first boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
has its vertices stored in a std::vector (due to the second boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
is undirected (due to the boost::undirectedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
The vertices have one property: they have a custom type, that is of data
 type my_vertex (due to the boost::property< boost::vertex_custom_type_t,my_vert
ex>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_custom_type_t
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_vertex
\end_layout

\end_inset

')
\end_layout

\begin_layout Itemize
The edges and graph have no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Why specify edge storage twice?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The boost::adjacency_list
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::adjacency_list
\end_layout

\end_inset

 has a new, fourth template argument 'boost::property< boost::vertex_custom_type
_t,my_vertex>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_custom_type_t
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_vertex
\end_layout

\end_inset

'.
 This can be read as: 
\begin_inset Quotes eld
\end_inset

vertices have the property 'boost::vertex_custom_type_t', which is of data
 type 'my_vertex'
\begin_inset Quotes erd
\end_inset

.
 Or simply: 
\begin_inset Quotes eld
\end_inset

vertices have a custom type called my_vertex
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Add a custom vertex
\end_layout

\begin_layout Standard
Adding a custom vertex is very similar to adding a named vertex (chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_named_vertex"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_custom_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Add a vertex with a name
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
add_named_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_custom_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When having added a new (abstract) vertex to the graph, the vertex descriptor
 is used to set the my_vertex in the graph its my_vertex map (using 'boost::get(
boost::vertex_custom_type,g)
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_custom_type
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::get
\end_layout

\end_inset

').
\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 with custom vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_custom_vertices_k2"

\end_inset


\end_layout

\begin_layout Standard
We reproduce the 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_vertices_k2"

\end_inset

 , but with our custom vertices intead:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_custom_vertices_k2_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_vertices_k2_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
create_custom_vertices_k2_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_custom_vertices_k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the code is a slight modification of algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

.
 In the end, the my_vertices are obtained as a boost::property_map and set
 with two custom my_vertex objects.
\end_layout

\begin_layout Subsection
Create an empty graph with custom edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_custom_edges_and_vertices_graph"

\end_inset


\end_layout

\begin_layout Subsection
Add a custom edge
\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 with custom edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_custom_edges_and_vertices_k3"

\end_inset


\end_layout

\begin_layout Standard
Instead of using edges with a name, or other properties, here we use a custom
 edge class called 'my_edge'.
\end_layout

\begin_layout Section
Measuring simple graphs traits
\end_layout

\begin_layout Standard
Measuring simple traits of the graphs created allows you to deb ug your
 code.
\end_layout

\begin_layout Subsection
Getting the vertices
\end_layout

\begin_layout Standard
You can use boost::vertices to obtain an iterator pair.
 The first iterator points to the first vertex, the second points to beyond
 the last vertex.
\end_layout

\begin_layout Subsection
Getting the edges
\end_layout

\begin_layout Standard
You can use boost::edges to obtain an iterator pair.
 The first iterator points to the first edge, the second points to beyond
 the last edge.
\end_layout

\begin_layout Subsection
Counting the number of vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertices, counting
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Counting the number of vertices
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Use boost::num_vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::num_vertices
\end_layout

\end_inset

, as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_n_vertices.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Count the numbe of vertices
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
get_n_vertices
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_n_vertices"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Counting the number of edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
Edges, counting
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Counting the number of edges
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Use boost::num_edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::num_edges
\end_layout

\end_inset

, as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_n_edges.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Count the number of edges
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
get_n_edges
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_n_edges"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Getting the vertices' names
\end_layout

\begin_layout Standard
When the vertices of a graph have named vertices
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: replace std::string as the hardcoded type of a vertex property
\end_layout

\end_inset

, one can extract them as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_names.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the vertices' names
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_vertex_names
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_names"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The names of the vertices are obtained from a boost::property_map and then
 put into a std::vector.
\end_layout

\begin_layout Standard
When trying to get the vertices' names from a graph without vertices with
 names, you will get the error 'formed reference to void
\begin_inset Index idx
status open

\begin_layout Plain Layout
formed reference to void
\end_layout

\end_inset

' (for example, with the code 'get_vertex_names(create_k2_graph());').
\end_layout

\begin_layout Subsection
Getting the edges' names
\end_layout

\begin_layout Standard
When the edges of a graph have named vertices
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: replace std::string as the hardcoded type of a vertex property
\end_layout

\end_inset

, one can extract them as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_names.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the edges' names
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
get_edge_names
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_names"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The names of the edges are obtained from a boost::property_map and then
 put into a std::vector.
\end_layout

\begin_layout Standard
When trying to get the edges' names from a graph without vertices with names,
 you will get the error 'formed reference to void' (for example, with the
 code 'get_vertex_names(create_k2_graph());').
\end_layout

\begin_layout Subsection
Getting the vertices' my_vertexes
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
the name 'my_vertexes' is chosen to indicate this function returns a container
 of my_vertex
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the vertices of a graph have any associated my_vertex, one can extract
 these as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_my_vertexes.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the vertices' my_vertexes
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_vertex_my_vertexes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_my_vertexes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The my_vertex object associated with the vertices are obtained from a boost::pro
perty_map and then put into a std::vector.
\end_layout

\begin_layout Standard
When trying to get the vertices' my_vertex from a graph without my_vertex
 objects associated, you will get the error 'formed reference to void
\begin_inset Index idx
status open

\begin_layout Plain Layout
formed reference to void
\end_layout

\end_inset

' (for example, with the code 'get_vertex_my_vertexes(create_k2_graph());').
\end_layout

\begin_layout Subsection
Count vertex name
\end_layout

\begin_layout Standard
count_vertices_with_name
\end_layout

\begin_layout Subsection
Find a vertex by its name
\end_layout

\begin_layout Standard
find_vertex_with_name
\end_layout

\begin_layout Subsection
Get a named vertex its in-degree
\end_layout

\begin_layout Standard
get_named_vertex_in_degree
\end_layout

\begin_layout Itemize
degree_size_type in_degree(vertex_descriptor u, const adjacency_list& g)
 .
 Returns the in-degree of a vertex
\end_layout

\begin_layout Subsection
Get a named vertex its out-degree
\end_layout

\begin_layout Standard
get_named_vertex_out_degree
\end_layout

\begin_layout Itemize
degree_size_type in_degree(vertex_descriptor u, const adjacency_list& g)
 .
 Returns the in-degree of a vertex
\end_layout

\begin_layout Subsection
Count vertex my_vertex
\end_layout

\begin_layout Standard
count_vertex_my_vertex
\end_layout

\begin_layout Subsection
Find a my_vertex
\end_layout

\begin_layout Standard
find_my_vertex
\end_layout

\begin_layout Subsection
Find the vertices connected to a certain my_vertex
\end_layout

\begin_layout Standard
find_vertices_connected_to_my_vertex
\end_layout

\begin_layout Section
Modifying simple graphs traits
\end_layout

\begin_layout Standard
It is useful to be able to modify every aspect of a graph.
 Adding nodes and edges are found in earlier chapters.
\end_layout

\begin_layout Subsection
Setting all vertices' names
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set vertices names
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertices, set names
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the vertices of a graph have named vertices
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: replace std::string as the hardcoded type of a vertex property
\end_layout

\end_inset

, one set their names as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_vertex_names.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Setting the vertices' names
\begin_inset Index idx
status open

\begin_layout Plain Layout
set_vertex_names
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_vertex_names"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
An impressive feature is that getting the property map holding the graph
 its names is not a copy, but a reference.
 Otherwise, modifying 'name_map' (obtained by non-reference) would only
 modify a copy.
\end_layout

\begin_layout Subsection
Setting all vertices' my_vertex objects
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set vertices my_vertexes
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertices, set my_vertexes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the vertices of a graph are associated with my_vertex objects, one
 can set these my_vertexes as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_vertex_my_vertexes.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Setting the vertices' my_vertexes
\begin_inset Index idx
status open

\begin_layout Plain Layout
set_vertex_my_vertexes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_vertex_my_vertexes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
An impressive feature is that getting the property map holding the graph
 its names is not a copy, but a reference.
 Otherwise, modifying 'my_vertexes_map' (obtained by non-reference) would
 only modify a copy.
\end_layout

\begin_layout Subsection
Replace a vertex its name
\end_layout

\begin_layout Standard
rename_vertex
\end_layout

\begin_layout Subsection
Replace an edge its name
\end_layout

\begin_layout Standard
rename_edge
\end_layout

\begin_layout Subsection
Replace a my_vertex
\end_layout

\begin_layout Standard
replace_my_vertex
\end_layout

\begin_layout Subsection
Clear a named vertex
\end_layout

\begin_layout Standard
clear_named_vertex
\end_layout

\begin_layout Itemize
void clear_vertex(vertex_descriptor u, adjacency_list& g) .
 Removes all edges to and from u 
\end_layout

\begin_layout Itemize
void clear_out_edges(vertex_descriptor u, adjacency_list& g) .
 Removes all outgoing edges from vertex u in the directed graph g (not applicabl
e for undirected graphs) 
\end_layout

\begin_layout Itemize
void clear_in_edges(vertex_descriptor u, adjacency_list& g) .
 Removes all incoming edges from vertex u in the directed graph g (not applicabl
e for undirected graphs)
\end_layout

\begin_layout Subsection
Remove a named vertex
\end_layout

\begin_layout Standard
remove_named_vertex
\end_layout

\begin_layout Subsection
Remove a named edge
\end_layout

\begin_layout Standard
remove_named_vertex
\end_layout

\begin_layout Itemize
void remove_edge(vertex_descriptor u, vertex_descriptor v, adjacency_list&
 g) .
 Removes an edge from g 
\end_layout

\begin_layout Itemize
void remove_edge(edge_descriptor e, adjacency_list& g) .
 Removes an edge from g 
\end_layout

\begin_layout Subsection
Remove a my_vertex
\end_layout

\begin_layout Standard
remove_my_vertex
\end_layout

\begin_layout Itemize
void remove_vertex(vertex_descriptor u, adjacency_list& g) .
 Removes a vertex from graph g (It is expected that all edges associated
 with this vertex have already been removed using clear_vertex or another
 appropriate function.)
\end_layout

\begin_layout Section
Visualizing graphs
\end_layout

\begin_layout Standard
Before graphs are visualized, they are stored as a file first.
 Here, I use the .dot file format.
\end_layout

\begin_layout Subsection
Storing a graph as a .dot
\begin_inset Index idx
status open

\begin_layout Plain Layout
Save graph as .dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create .dot from graph
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Graph are easily saved to a .dot file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_graph_to_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing a graph as a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
save_graph_to_dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using the create_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

) to create a 
\begin_inset Formula $K_{2}$
\end_inset

 graph, the .dot file created is displayed in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot_test_k2_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_graph_to_dot_test_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the create_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_graph_to_dot_test_k2_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .dot file corresponds to figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:save_graph_to_dot_test_k2_graph.svg"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename save_graph_to_dot_test_k2_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the create_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "fig:save_graph_to_dot_test_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you used the create_named_vertices_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{2}$
\end_inset

 graph with named vertices, you see that the .dot file does not have stored
 the vertex names:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_graph_to_dot_test_named_vertices_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the create_named_vertices_k2_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_graph_to_dot_test_named_vertices_k2_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
So, the 'save_graph_to_dot' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset

) saves the structure of the graph.
\end_layout

\begin_layout Subsection
Storing a graph with named vertices as a .dot
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Save graph with name vertices as .dot
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Create .dot from graph with named vertices
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
If you used the create_named_vertices_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{2}$
\end_inset

 graph with named vertices, you can store these names additionally with
 algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_vertices_graph_to_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_named_vertices_graph_to_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing a graph with named vertices as a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
save_named_vertices_graph_to_dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_vertices_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The .dot file created is displayed in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the create_named_vertices_k2_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .dot file corresponds to figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.svg"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the create_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "fig:save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you used the create_named_edges_and_vertices_k3_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3"

\end_inset

) to produce a 
\begin_inset Formula $K_{3}$
\end_inset

 graph with named edges and vertices, you see that the .dot file does not
 have stored the edge names:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_named_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the create_named_edges_and_vertices_k3_graph function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
So, the 'save_named_vertices_graph_to_dot' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset

) saves only the structure of the graph and its vertex names.
\end_layout

\begin_layout Subsection
Storing a graph with named vertices and edges as a .dot
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Save graph with name edges and vertices as .dot
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Create .dot from graph with named edges and vertices
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you used the create_named_edges_and_vertices_k3_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3"

\end_inset

) to produce a 
\begin_inset Formula $K_{3}$
\end_inset

 graph with named edges and vertices, you can store these names additionally
 with algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_edges_and_vertices_graph_to_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_named_edges_and_vertices_graph_to_dot_cpp17.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing a graph with named edges and vertices as a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
save_named_edges_and_vertices_graph_to_dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_edges_and_vertices_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this algorithm uses C++17
\begin_inset Index idx
status open

\begin_layout Plain Layout
C++17
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The .dot file created is displayed in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_edges_and_vertices_graph_to_dot_test_named_vertices_k3_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_named_edges_and_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the create_named_edges_and_vertices_k3_graph function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_edges_and_vertices_graph_to_dot_test_named_vertices_k3_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .dot file corresponds to figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:save_named_edges_and_vertices_graph_to_dot_test_named_vertices_k2_graph.svg"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename save_named_edges_and_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the create_named_edges_and_vertices_k3_graph function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "fig:save_named_edges_and_vertices_graph_to_dot_test_named_vertices_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you used the 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset

MORE_COMPLEX_create_named_edges_and_vertices_k3_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3"

\end_inset

) to produce a 
\begin_inset Formula $K_{3}$
\end_inset

 graph with named edges and vertices, you see that the .dot file does not
 have stored the edge names:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: show true other output
\end_layout

\end_inset


\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_named_edges_and_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset

MORE_COMPLEX_create_named_edges_and_vertices_k3_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_edges_and_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.dot-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
So, the 'save_named_edges_and_vertices_graph_to_dot' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset

) saves only the structure of the graph and its edge and vertex names.
\end_layout

\begin_layout Subsection
Storing a graph with custom vertices as a .dot
\begin_inset Index idx
status open

\begin_layout Plain Layout
Save graph with custom vertices as .dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create .dot from graph with custom vertices
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
If you used the create_custom_vertices_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_k2_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{2}$
\end_inset

 graph with vertices associated with my_vertex objects, you can store these
 my_vertexes additionally with algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_custom_vertices_graph_to_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_custom_vertices_graph_to_dot_cpp17.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing a graph with custom vertices as a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
save_custom_vertices_graph_to_dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_custom_vertices_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this algorithm uses C++17
\begin_inset Index idx
status open

\begin_layout Plain Layout
C++17
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The .dot file created is displayed in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the create_custom_vertices_k2_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .dot file corresponds to figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the create_custom_vertices_k2_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_k2_graph"

\end_inset

)
\begin_inset Index idx
status open

\begin_layout Plain Layout
pi
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Measuring more complex graphs traits
\end_layout

\begin_layout Subsection
Count the number of self-loops
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "boost_graph_tutorial"
options "plain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset


\end_layout

\end_body
\end_document
