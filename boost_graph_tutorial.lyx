#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{tikz}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Boost.Graph tutorial
\end_layout

\begin_layout Author
Richel Bilderbeek
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
I think that Boost.Graph is designed very well.
 Drawback is IMHO that there are only few and even fewer complete examples
 using Boost.Graph.
 
\end_layout

\begin_layout Standard
The book 
\begin_inset CommandInset citation
LatexCommand cite
key "siek2001boost"

\end_inset

 is IMHO not suited best for a tutorial as it contains heavy templated code,
 and an unchronological ordering of subjects.
 More experienced programmers can appreciate that the authors took great
 care that the code snippets written in the book were correct: all snippets
 are numbered, and I'd bet they are tested to compile.
 
\end_layout

\begin_layout Subsection
Coding style used
\end_layout

\begin_layout Standard
I use the coding style from the Core C++ Guidelines.
\end_layout

\begin_layout Standard
I prefer not to use the keyword auto, but to explicitly mention the type
 instead.
 I think this is beneficial to beginners.
 When using Boost.Graph in production code, I do prefer to use auto.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset

OTOH, while writing this tutorial, I use auto when I loose too much time
 figuring out the type
\end_layout

\begin_layout Standard
All coding snippets are taken from compiled C++ code.
\end_layout

\begin_layout Subsection
Pitfalls
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset

The choice between 'boost::get', 'std::get' and 'get'.
 AFAIKS, when in doubt, use 'get'.
\end_layout

\begin_layout Section
Building graphs
\end_layout

\begin_layout Standard
Boost.Graph is about creating graphs.
 In this chapter we create graphs, starting from simple to more complex.
 
\end_layout

\begin_layout Subsection
Creating an empty graph
\end_layout

\begin_layout Standard
Let's create a trivial empty graph:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_graph.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating an empty graph
\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Congratulations, you've just created a boost::adjacency_list in which:
\end_layout

\begin_layout Itemize
The out edges are stored in a std::vector
\end_layout

\begin_layout Itemize
The vertices are stored in a std::vector
\end_layout

\begin_layout Itemize
The graph is directed
\end_layout

\begin_layout Itemize
Vertices, edges and graph have no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Why specify edge storage twice?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The boost::adjacency_list is the most commonly used graph type, the other
 is the boost::adjacency_matrix.
\end_layout

\begin_layout Subsection
Add a vertex
\end_layout

\begin_layout Standard
To add a vertex to a graph, the boost::add_vertex function is used as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Adding a vertex to a graph
\begin_inset CommandInset label
LatexCommand label
name "alg:add_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that boost::add_vertex returns a vertex descriptor, which is ignored
 for now.
 This vertex descriptor can be used to connect two vertices by an edge
\end_layout

\begin_layout Subsection
Add an edge
\end_layout

\begin_layout Standard
To add an edge to a graph, two vertex descriptors are needed.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_edge"

\end_inset

 adds two vertices to a graph, and connects these two using boost::add_edge:
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Adding (two vertices and) an edge to a graph
\begin_inset CommandInset label
LatexCommand label
name "alg:add_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that half of the code consists out of using statements.
 This algorithm only shows how to add an isolated edge to a graph, instead
 of allowing for graphs with higher connectivities.
 The function boost::add_edge returns a pair, consisting of an edge descriptor
 and a boolean success indicator.
 In algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_edge"

\end_inset

 we assert that insertion was successfull.
 Insertion can fail if an edge is already present and duplicates are not
 allowed.
\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{2}$
\end_inset

, a fully connected graph with two vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_k2"

\end_inset


\end_layout

\begin_layout Standard
To create a fully connected graph with two vertices (also called 
\begin_inset Formula $K_{2}$
\end_inset

), one needs two vertices and one (undirected) edge, as depicted in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:k2_graph"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (0,0) node[fill=black,shape=circle,text=white] {$a$} 
\end_layout

\begin_layout Plain Layout

    -- (5,1) node[fill=black,shape=circle,text=white] {$b$} 
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

: a fully connected graph with two vertices named 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To create 
\begin_inset Formula $K_{2}$
\end_inset

, the following code can be used:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_k2_graph.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 as depicted in figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:k2_graph"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this code has more lines of using statements than actual code!
 In this code, the third template argument of boost::adjacency_list is boost::un
directedS, to select (that is what the S means) for an undirected graph.
 Adding a vertex with boost::add_vertex results in a vertex descriptor,
 which is a handle to the vertex added to the graph.
 Two vertex descriptors are then used to add an edge to the graph.
 Adding an edge using boost::add_edge returns two things: an edge descriptor
 and a boolean indicating success.
 In the code example, we assume insertion is successfull.
\end_layout

\begin_layout Standard
Note that the graph lacks all properties: nodes do not have names, nor do
 edges.
\end_layout

\begin_layout Subsection
Creating an empty graph with named vertices
\end_layout

\begin_layout Standard
Let's create a trivial empty graph, in which the vertices can have a name:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_named_vertices_graph.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating an empty graph
\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_named_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The difference with creating an ordinary empty graphs (as in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_graph"

\end_inset

) is the fourth template argument of boost::adjacency_list.
 The notation 'boost::property<boost::vertex_name_t,std::string>' can be
 read as: 
\begin_inset Quotes eld
\end_inset

there is a vertex property, called 'boost::vertex_name' that has data type
 'std::string'
\begin_inset Quotes erd
\end_inset

.
 Sure, we have not added any vertex to this graph yet, we did create a data
 type that allows for doing so.
\end_layout

\begin_layout Subsection
Add a vertex with a name
\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_named_vertices_k2"

\end_inset


\end_layout

\begin_layout Standard
We extend 
\begin_inset Formula $K_{2}$
\end_inset

 of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_k2"

\end_inset

 by naming the vertices 'from' and 'to', as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_vertices_k2_graph"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (0,0) node[fill=black,shape=circle,text=white] {from} 
\end_layout

\begin_layout Plain Layout

    -- (5,0) node[fill=black,shape=circle,text=white] {to} 
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

: a fully connected graph with two vertices with the text 'from' and 'to'
 
\begin_inset CommandInset label
LatexCommand label
name "fig:named_vertices_k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To create 
\begin_inset Formula $K_{2}$
\end_inset

, the following code can be used:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_named_vertices_k2_graph.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_vertices_k2_graph"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_vertices_k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the code is a repeat of algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

.
 In the end, the names are obtained as a boost::property_map and set.
\end_layout

\begin_layout Subsection
Add an edge with a name
\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 with named edges and vertices
\end_layout

\begin_layout Standard
We extend the graph 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_vertices_k2"

\end_inset

 by adding names to the edges, as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_edges_and_vertices_k3"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (2,4) node[fill=black,shape=circle,text=white] {top} 
\end_layout

\begin_layout Plain Layout

   -- (3,2) node[anchor=west] {AB} 
\end_layout

\begin_layout Plain Layout

   -- (4,0) node[fill=black,shape=circle,text=white] {right} 
\end_layout

\begin_layout Plain Layout

   -- (2,0) node[anchor=north] {BC} 
\end_layout

\begin_layout Plain Layout

   -- (0,0) node[fill=black,shape=circle,text=white] {left} 
\end_layout

\begin_layout Plain Layout

   -- (1,2) node[anchor=east] {CA} 
\end_layout

\begin_layout Plain Layout

   -- (2,4)
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $K_{3}$
\end_inset

: a fully connected graph with three named edges and vertices 
\begin_inset CommandInset label
LatexCommand label
name "fig:named_edges_and_vertices_k3"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To create 
\begin_inset Formula $K_{3}$
\end_inset

, the following code can be used:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_named_edges_and_vertices_k3_graph.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_edges_and_vertices_k3"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_edges_and_vertices_k3"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the code is a repeat of algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

.
 In the end, the edge names are obtained as a boost::property_map and set.
\end_layout

\begin_layout Subsection
Add a custom vertex
\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 with custom vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_custom_vertices_k2"

\end_inset


\end_layout

\begin_layout Standard
Instead of using vertices with a name, or other properties, here we use
 a custom vertex class called 'my_vertex'.
 A 'my_vertex' has an x coordinat, y coordinat, a name and a description.
\end_layout

\begin_layout Subsection
Add a custom edge
\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 with custom edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_custom_edges_and_vertices_k2"

\end_inset


\end_layout

\begin_layout Standard
Instead of using edges with a name, or other properties, here we use a custom
 edge class called 'my_edge'.
\end_layout

\begin_layout Section
Measuring simple graphs traits
\end_layout

\begin_layout Standard
Measuring simple traits of the graphs created allows you to debug your code.
\end_layout

\begin_layout Subsection
Getting the vertices
\end_layout

\begin_layout Standard
You can use boost::vertices to obtain an iterator pair.
 The first iterator points to the first vertex, the second points to beyond
 the last vertex.
\end_layout

\begin_layout Subsection
Getting the edges
\end_layout

\begin_layout Standard
You can use boost::edges to obtain an iterator pair.
 The first iterator points to the first edge, the second points to beyond
 the last edge.
\end_layout

\begin_layout Subsection
Counting the number of vertices
\end_layout

\begin_layout Standard
Use boost::num_vertices, as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_n_vertices.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Count the numbe of vertices
\begin_inset CommandInset label
LatexCommand label
name "alg:get_n_vertices"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Counting the number of edges
\end_layout

\begin_layout Standard
Use boost::num_edges, as show here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_n_edges.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Count the number of edges
\begin_inset CommandInset label
LatexCommand label
name "alg:get_n_edges"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Getting the vertices' names
\end_layout

\begin_layout Standard
When the vertices of a graph have named vertices
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: replace std::string as the hardcoded type of a vertex property
\end_layout

\end_inset

, one can extract them as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_names.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get the vertices' names
\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_names"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The names of the vertices are obtained from a boost::property_map and then
 put into a std::vector.
\end_layout

\begin_layout Standard
When trying to get the vertices' names from a graph without vertices with
 names, you will get the error 'formed reference to void' (for example,
 with the code 'get_vertex_names(create_k2_graph());').
\end_layout

\begin_layout Subsection
Getting the edges' names
\end_layout

\begin_layout Standard
When the edges of a graph have named vertices
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: replace std::string as the hardcoded type of a vertex property
\end_layout

\end_inset

, one can extract them as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_names.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get the edges' names
\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_names"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The names of the edges are obtained from a boost::property_map and then
 put into a std::vector.
\end_layout

\begin_layout Standard
When trying to get the edges' names from a graph without vertices with names,
 you will get the error 'formed reference to void' (for example, with the
 code 'get_vertex_names(create_k2_graph());').
\end_layout

\begin_layout Subsection
Find a vertex by its name
\end_layout

\begin_layout Subsection
Replace a vertex its name
\end_layout

\begin_layout Section
Modifying simple graphs traits
\end_layout

\begin_layout Standard
It is useful to be able to modify every aspect of a graph.
 Adding nodes and edges are found in earlier chapters.
\end_layout

\begin_layout Subsection
Setting all vertices' names
\end_layout

\begin_layout Standard
When the vertices of a graph have named vertices
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: replace std::string as the hardcoded type of a vertex property
\end_layout

\end_inset

, one set their names as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_vertex_names.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Setting the vertices' names
\begin_inset CommandInset label
LatexCommand label
name "alg:set_vertex_names"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
An impressive feature is that getting the property map holding the graph
 its names is not a copy, but a reference.
 Otherwise, modifying 'name_map' (obtained by non-reference) would only
 modify a copy.
\end_layout

\begin_layout Section
Visualizing graphs
\end_layout

\begin_layout Standard
Before graphs are visualized, they are stored as a file first.
 Here, I use the .dot file format.
\end_layout

\begin_layout Subsection
Storing a graph as a .dot 
\end_layout

\begin_layout Standard
Graph are easily saved to a .dot file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_graph_to_dot.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Storing a graph as a .dot file
\begin_inset CommandInset label
LatexCommand label
name "alg:save_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using the create_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

) to create a 
\begin_inset Formula $K_{2}$
\end_inset

 graph, the .dot file created is displayed in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot_test_k2_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_graph_to_dot_test_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the create_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_graph_to_dot_test_k2_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .dot file corresponds to figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:save_graph_to_dot_test_k2_graph.svg"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename save_graph_to_dot_test_k2_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.svg file created from the create_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "fig:save_graph_to_dot_test_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you used the create_named_vertices_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{2}$
\end_inset

 graph with named vertices, you see that the .dot file does not have stored
 the vertex names:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_graph_to_dot_test_named_vertices_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the create_named_vertices_k2_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_graph_to_dot_test_named_vertices_k2_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
So, the 'save_graph_to_dot' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset

) saves the structure of the graph.
\end_layout

\begin_layout Subsection
Storing a graph with named vertices as a .dot 
\end_layout

\begin_layout Standard
If you used the create_named_vertices_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{2}$
\end_inset

 graph with named vertices, you can store these names additionally with
 algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_vertices_graph_to_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_named_vertices_graph_to_dot.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Storing a graph with named vertices as a .dot file
\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_vertices_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The .dot file created is displayed in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the create_named_vertices_k2_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .dot file corresponds to figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.svg"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.svg file created from the create_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "fig:save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you used the create_named_edges_and_vertices_k3_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3"

\end_inset

) to produce a 
\begin_inset Formula $K_{3}$
\end_inset

 graph with named edges and vertices, you see that the .dot file does not
 have stored the edge names:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_named_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the create_named_edges_and_vertices_k3_graph function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
So, the 'save_named_vertices_graph_to_dot' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset

) saves only the structure of the graph and its vertex names.
\end_layout

\begin_layout Subsection
Storing a graph with named vertices and edges as a .dot
\end_layout

\begin_layout Standard
If you used the create_named_edges_and_vertices_k3_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3"

\end_inset

) to produce a 
\begin_inset Formula $K_{3}$
\end_inset

 graph with named edges and vertices, you can store these names additionally
 with algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_edges_and_vertices_graph_to_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_named_edges_and_vertices_graph_to_dot.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Storing a graph with named edges and vertices as a .dot file
\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_edges_and_vertices_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The .dot file created is displayed in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_edges_and_vertices_graph_to_dot_test_named_vertices_k3_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_named_edges_and_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the create_named_edges_and_vertices_k3_graph function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_edges_and_vertices_graph_to_dot_test_named_vertices_k3_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .dot file corresponds to figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:save_named_edges_and_vertices_graph_to_dot_test_named_vertices_k2_graph.svg"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename save_named_edges_and_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.svg file created from the create_named_edges_and_vertices_k3_graph function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "fig:save_named_edges_and_vertices_graph_to_dot_test_named_vertices_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you used the 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset

MORE_COMPLEX_create_named_edges_and_vertices_k3_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3"

\end_inset

) to produce a 
\begin_inset Formula $K_{3}$
\end_inset

 graph with named edges and vertices, you see that the .dot file does not
 have stored the edge names:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: show true other output
\end_layout

\end_inset


\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_named_edges_and_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset

MORE_COMPLEX_create_named_edges_and_vertices_k3_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_edges_and_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.dot-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
So, the 'save_named_edges_and_vertices_graph_to_dot' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset

) saves only the structure of the graph and its edge and vertex names.
\end_layout

\begin_layout Section
TODO's in general
\end_layout

\begin_layout Subsection
Personal experciences with Boost.Graph
\end_layout

\begin_layout Standard
I have been experimenting with Boost.Graph since 2006 and I both use the
 documentation on the Boost website [1] and the book 
\begin_inset CommandInset citation
LatexCommand cite
key "siek2001boost"

\end_inset

.
\end_layout

\begin_layout Itemize
Boost.Graph seems like the most type-safe extendable graph library around:
 learning it will pay off! 
\end_layout

\begin_layout Itemize
Boost.Graph requires a good compiler, like GCC 
\end_layout

\begin_layout Itemize
The book [2] will not help a beginner: all code snippets are written 'too
 smart', where a beginner might prefer four easy-to-understand lines, instead
 of one using magic.
 Most code snippets are scattered as part of a complete project, where a
 beginner might prefer simple short projects 
\end_layout

\begin_layout Itemize
The website [1] will not help a beginner, for the same reasons as above
 
\end_layout

\begin_layout Itemize
I have never found Boost.Graph documentation or code snippets a beginner
 would understand (except for (hopefully) at my website), as if nobody understan
ds Boost.Graph and/or everybody that understands Boost.Graph cannot explain
 simply anymore 
\end_layout

\begin_layout Itemize
I learned most of Boost.Graph from my IDE ( the helpful Qt Creator): by viewing
 the code that failed, I could understand what was expected for me.
 I would never have understood Boost.Graph if I would have used a text editor
 for programming 
\end_layout

\begin_layout Subsection
To add
\end_layout

\begin_layout Standard
Code snippets show include guards , use header_imp instead.
\end_layout

\begin_layout Itemize
std::pair<edge_iterator, edge_iterator> edges(const adjacency_list& g) .
 Returns an iterator pair corresponding to the edges in graph g
\end_layout

\begin_layout Itemize
vertex_descriptor source(edge_descriptor e, const adjacency_list& g) .
 Returns the source vertex of an edge
\end_layout

\begin_layout Itemize
vertex_descriptor target(edge_descriptor e, const adjacency_list& g) .
 Returns the target vertex of an edge
\end_layout

\begin_layout Itemize
degree_size_type in_degree(vertex_descriptor u, const adjacency_list& g)
 .
 Returns the in-degree of a vertex
\end_layout

\begin_layout Itemize
degree_size_type out_degree(vertex_descriptor u, const adjacency_list& g)
 .
 Returns the out-degree of a vertex 
\end_layout

\begin_layout Itemize
void remove_edge(vertex_descriptor u, vertex_descriptor v, adjacency_list&
 g) .
 Removes an edge from g 
\end_layout

\begin_layout Itemize
void remove_edge(edge_descriptor e, adjacency_list& g) .
 Removes an edge from g 
\end_layout

\begin_layout Itemize
void clear_vertex(vertex_descriptor u, adjacency_list& g) .
 Removes all edges to and from u 
\end_layout

\begin_layout Itemize
void clear_out_edges(vertex_descriptor u, adjacency_list& g) .
 Removes all outgoing edges from vertex u in the directed graph g (not applicabl
e for undirected graphs) 
\end_layout

\begin_layout Itemize
void clear_in_edges(vertex_descriptor u, adjacency_list& g) .
 Removes all incoming edges from vertex u in the directed graph g (not applicabl
e for undirected graphs)
\end_layout

\begin_layout Itemize
void remove_vertex(vertex_descriptor u, adjacency_list& g) .
 Removes a vertex from graph g (It is expected that all edges associated
 with this vertex have already been removed using clear_vertex or another
 appropriate function.)
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "boost_graph_tutorial"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
