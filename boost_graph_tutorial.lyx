#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{tikz}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Boost.Graph tutorial
\end_layout

\begin_layout Author
Richel Bilderbeek
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
I needed this tutorial in 2006, when I started experimenting with Boost.Graph.
 More specifically, I needed a tutorial that:
\end_layout

\begin_layout Itemize
Orders concepts chronologically
\end_layout

\begin_layout Itemize
Increases complexity gradually
\end_layout

\begin_layout Itemize
Shows complete pieces of code
\end_layout

\begin_layout Standard
What I had were the book 
\begin_inset CommandInset citation
LatexCommand cite
key "siek2001boost"

\end_inset

 and the Boost.Graph website, both did not satisfy these requirements.
 
\end_layout

\begin_layout Standard
This tutorial is intended to take the reader to the level of understanding
 the book 
\begin_inset CommandInset citation
LatexCommand cite
key "siek2001boost"

\end_inset

 and the Boost.Graph website require.
\end_layout

\begin_layout Standard
The chapters of this tutorial are also like a well-connected graph.
 To allow for quicker learners to skim chapters, or for beginners looking
 to find the patterns, some chapters are repetitions of each other (for
 example, getting an edge its name is very similar to getting a vertex its
 name).
\end_layout

\begin_layout Standard
A pivorial chapter is chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:find_first_vertex_with_name"

\end_inset

, 'Finding the first vertex with a name', as this opens up the door to finding
 a vertex and manipulating it.
\end_layout

\begin_layout Subsection
Code snippets
\end_layout

\begin_layout Standard
For every concept, I will show
\end_layout

\begin_layout Itemize
the 'do' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
'do' function
\end_layout

\end_inset

: a function that achieves a goal, for example 'create_empty_undirected_graph'
\end_layout

\begin_layout Itemize
the 'demo' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
'demo' function
\end_layout

\end_inset

: a function that demonstrates how to call the first, for example 'demonstrate_c
reate_empty_undirected_graph'
\end_layout

\begin_layout Standard
I enjoy to show concepts by putting those in (long-named) functions.
 These functions sometimes border the trivial, by, for example, only calling
 a Boost.Graph function.
 On the other hand, these functions have more English-sounding names, resulting
 in demonstration code that is readable.
\end_layout

\begin_layout Standard
All coding snippets are taken from compiled C++ code.
\end_layout

\begin_layout Subsection
Coding style
\end_layout

\begin_layout Standard
I use the coding style from the Core C++ Guidelines.
 At the time of this writing, the Core C++ Guidelines were still in early
 development, so I can only hope the conventions I then chose to follow
 are still Good Ideas.
\end_layout

\begin_layout Standard
I prefer to use the keyword auto over doubling the lines of code for using
 statements.
 Because the 'do' functions return an explicit data type, these can be used
 for reference.
 If you really want to know a type, you can use the 'get_type_name' function
 (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_type_name"

\end_inset

).
 On the other hand, I am explicit of which data types I choose: I will prefix
 the types by thir namespace, so to distinguish between types like 'std::array'
 and 'boost::array'.
 Note that the heavily-use 'get'
\begin_inset Index idx
status open

\begin_layout Plain Layout
get
\end_layout

\end_inset

 function must reside in the namespace of the graph to work on.
 In this tutorial, this is in the global namespace.
 Thus, I will write 'get', instead of 'boost::get'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::get
\end_layout

\end_inset

, as the latter does not compile.
\end_layout

\begin_layout Subsection
Feedback
\end_layout

\begin_layout Standard
I have tried hard to strictly follow the style as described above.
 If you find I deviated from these decisions somewhere, I would be grateful
 if you'd let know.
 
\end_layout

\begin_layout Section
Building a graph without properties
\end_layout

\begin_layout Standard
Boost.Graph is about creating graphs.
 In this chapter we create the simplest of graphs, in which edges and nodes
 have no properties (e.g.
 having a name).
 We will build:
\end_layout

\begin_layout Itemize
An empty (directed) graph, which is the default type: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_directed_graph"

\end_inset


\end_layout

\begin_layout Itemize
An empty (undirected) graph: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_undirected_graph"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{2}$
\end_inset

, an undirected graph with two vertices and one edge, chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_k2"

\end_inset


\end_layout

\begin_layout Standard
In the process, some basic (sometimes bordering trivial) functions are shown:
\end_layout

\begin_layout Itemize
Adding a vertex: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_vertex"

\end_inset


\end_layout

\begin_layout Itemize
Getting all vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertices"

\end_inset


\end_layout

\begin_layout Itemize
Getting all vertex descriptors: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_descriptors"

\end_inset


\end_layout

\begin_layout Itemize
Adding an edge: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_edge"

\end_inset


\end_layout

\begin_layout Itemize
Getting all edges: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_edges"

\end_inset


\end_layout

\begin_layout Itemize
Getting all edge descriptors: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_edge_descriptors"

\end_inset


\end_layout

\begin_layout Standard
These functions are mostly there for completion and showing which data types
 are used.
\end_layout

\begin_layout Subsection
Creating an empty (directed) graph
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_directed_graph"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Create an empty directed graph
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Empty directed graph, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's create a trivial empty graph!
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_directed_graph"

\end_inset

 shows the function to create an empty (directed) graph.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty (directed) graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
create_empty_directed_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_directed_graph_demo"

\end_inset

 demonstrates the 'create_empty_directed_graph' function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'create_empty_directed_graph'
\begin_inset Index idx
status open

\begin_layout Plain Layout
create_empty_directed_graph_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_directed_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Congratulations, you've just created a boost::adjacency_list
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::adjacency_list
\end_layout

\end_inset

 with its default template arguments.
 For your reference, these default template argument denote that you've
 just created a graph, in which:
\end_layout

\begin_layout Itemize
The out edges are stored in a std::vector
\end_layout

\begin_layout Itemize
The vertices are stored in a std::vector
\end_layout

\begin_layout Itemize
The edges have a direction
\end_layout

\begin_layout Itemize
The vertices, edges and graph have no properties
\end_layout

\begin_layout Itemize
The edges are stored in a std::list 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Why specify edge storage twice?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The boost::adjacency_list is the most commonly used graph type, the other
 is the boost::adjacency_matrix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::adjacency_matrix
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Creating an empty undirected graph
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_undirected_graph"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Create an empty graph
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Empty graph, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's create another trivial empty graph! This time, we make the graph undirecte
d.
\end_layout

\begin_layout Standard
Algorith 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_undirected_graph"

\end_inset

 shows how to create an undirected graph.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty undirected graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
create_empty_undirected_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_undirected_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_undirected_graph_demo"

\end_inset

 demonstrates the 'create_empty_undirected_graph' function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'create_empty_undirected_graph'
\begin_inset Index idx
status open

\begin_layout Plain Layout
create_empty_undirected_graph_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_undirected_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Congratulations, you've just created an undirected graph in which:
\end_layout

\begin_layout Itemize
The out edges are stored in a std::vector.
 This way to store out edges is selected by the first 'boost::vecS'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The vertices are stored in a std::vector.
 This way to store vertices is selected by the second 'boost::vecS'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The graph is undirected.
 This directionality is selected for by the third template argument, 'boost::und
irectedS'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Vertices, edges and graph have no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Why specify edge storage twice?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The difference between directed and undirected graphs is in the edges: in
 an undirected graph, an edge connects two vertices without any directionality.
 In a directed graph, an edge goes from a certain vertex, its source, to
 another (which may actually be the same), its target.
 
\end_layout

\begin_layout Subsection
Add a vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:add_vertex"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Add a vertex
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex, add
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Empty graphs are nice, now its time to add a vertex!
\end_layout

\begin_layout Standard
To add a vertex to a graph, the boost::add_vertex
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::add_vertex
\end_layout

\end_inset

 function is used as shows in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_vertex"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Adding a vertex to a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
add_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_vertex_demo"

\end_inset

 shows how to add a vertex to a directed and undirected graph.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'add_vertex' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
add_vertex_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that boost::add_vertex (in the 'add_vertex' function) returns a vertex
 descriptor, which is ignored for now.
 Vertex descriptors are looked at in more details at the chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

.
\end_layout

\begin_layout Subsection
Vertex descriptors
\begin_inset CommandInset label
LatexCommand label
name "sub:Vertex-descriptors"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex descriptor
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A vertex descriptor is a handle to a vertex within a graph.
 
\end_layout

\begin_layout Standard
Vertex descriptors can be obtained by:
\end_layout

\begin_layout Itemize
dereference a vertex iterator, see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_descriptors"

\end_inset


\end_layout

\begin_layout Standard
Vertex descriptors are used to:
\end_layout

\begin_layout Itemize
add and edge between two vertices, see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_edge"

\end_inset


\end_layout

\begin_layout Itemize
obtain properties of vertex a vertex, for example the vertex its out degrees
 (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_out_degrees"

\end_inset

), the vertex its name (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_names"

\end_inset

), or a custom vertex property (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_my_vertexes"

\end_inset

)
\end_layout

\begin_layout Standard
In this tutorial, vertex descriptors have named prefixed with 'vd_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
vd_
\end_layout

\end_inset

, for example 'vd_1'.
\end_layout

\begin_layout Subsection
Get the vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:get_vertices"

\end_inset


\end_layout

\begin_layout Standard
You cannot get the vertices.
 This may sound unexpected, as it must be possible to work on the vertices
 of a graph.
 Working on the vertices of a graph is done throught these steps:
\end_layout

\begin_layout Itemize
Obtain a vertex iterator pair from the graph
\end_layout

\begin_layout Itemize
Dereference a vertex iterator to obtain a vertex descriptor
\end_layout

\begin_layout Standard
boost::vertices
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::vertices
\end_layout

\end_inset

 is used to obtain a vertex iterator pair
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex iterator pair
\end_layout

\end_inset

, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertices"

\end_inset

.
 The first vertex iterator
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex iterator
\end_layout

\end_inset

 points to the first vertex (its descriptor, to be precise), the second
 points to beyond the last vertex.
 In this tutorial, vertex iterator pairs have named prefixed with 'vip_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
vip_
\end_layout

\end_inset

, for example 'vip_1'.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertices.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the vertex iterators of a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_vertices
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertices"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
These vertex iterators can be dereferenced to obtain the vertex descriptors.
 Note that 'get_vertices' will not be used often in isolation: usually one
 obtains the vertex descriptors immediatly.
 Just for your references, algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertices_demo"

\end_inset

 demonstrates of the 'get_vertices' function, by showing that the vertex
 iterators of an empty graph point to the same location.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertices_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'get_vertices'
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_vertices_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertices_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Get all vertex descriptors
\begin_inset CommandInset label
LatexCommand label
name "sub:get_vertex_descriptors"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex descriptors, get
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Vertex descriptors are the way to manipulate those vertices.
 Let's get the all!
\end_layout

\begin_layout Standard
Vertex descriptors are obtained from dereferencing vertex iterators.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_descriptors"

\end_inset

 shows how to obtain all vertex descriptors from a graph.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_descriptors.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get all vertex descriptors of a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_vertex_descriptors
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_descriptors"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 'get_vertex_descripors' function shows an important concept of the Boost.Grap
h library: boost::vertices returns two vertex iterators
\begin_inset Index idx
status open

\begin_layout Plain Layout
vertex iterator
\end_layout

\end_inset

, which in turn can be dereferenced to obtain the vertex descriptors.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_descriptors_demo"

\end_inset

 demonstrates that an empty graph has no vertex descriptors.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_descriptors_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'get_vertex_descriptors'
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_vertex_descriptors_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_descriptors_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Add an edge
\begin_inset CommandInset label
LatexCommand label
name "sub:add_edge"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Add an edge
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge, add
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To add an edge to a graph, two vertex descriptors are needed.
 A vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex descriptor
\end_layout

\end_inset

 is a handle to the vertex with in graph (vertex descriptors are looked
 at in more details in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

).
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_edge"

\end_inset

 adds two vertices to a graph, and connects these two using boost::add_edge
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::add_edge
\end_layout

\end_inset

: 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Adding (two vertices and) an edge to a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
add_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This algorithm only shows how to add an isolated edge to a graph, instead
 of allowing for graphs with higher connectivities.
 The function boost::add_vertex returns a vertex descriptor, which I prefix
 with 'vd'
\begin_inset Index idx
status open

\begin_layout Plain Layout
vd
\end_layout

\end_inset

.
 The function boost::add_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge
\end_layout

\end_inset

 returns a std::pair
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::pair
\end_layout

\end_inset

, consisting of an edge descriptor and a boolean success indicator.
 In algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_edge"

\end_inset

 we assert
\begin_inset Index idx
status open

\begin_layout Plain Layout
assert
\end_layout

\end_inset

 that this insertion was successfull.
 Insertion can fail if an edge is already present and duplicates are not
 allowed.
\end_layout

\begin_layout Standard
A demonstration of add_edge is shown in algorith 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_edge_demo"

\end_inset

, in which an edge is added to both a directed and undirected graph.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of add_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
add_edge_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
boost::add_edge result
\begin_inset CommandInset label
LatexCommand label
name "sub:boost::add_edge result"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge result
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When using the function 'boost::add_edge', a 'std::pair<edge_descriptor,bool>'
 is returned.
 It contains both the edge descriptor (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Edge-descriptors"

\end_inset

) and a boolean indicating insertion success.
\end_layout

\begin_layout Standard
In this tutorial, boost::add_edge results have named prefixed with 'aer_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
aer_
\end_layout

\end_inset

, for example 'aer_1'.
\end_layout

\begin_layout Subsection
Getting the edges
\begin_inset CommandInset label
LatexCommand label
name "sub:get_edges"

\end_inset


\end_layout

\begin_layout Standard
You cannot get the edges directly.
 Working on the edges of a graph is done throught these steps:
\end_layout

\begin_layout Itemize
Obtain an edge iterator pair from the graph
\end_layout

\begin_layout Itemize
Dereference an edge iterator to obtain an edge descriptor
\end_layout

\begin_layout Standard
boost::edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edges
\end_layout

\end_inset

 is used to obtain an edge iterator pair
\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge iterator pair
\end_layout

\end_inset

.
 The first edge iterator
\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge iterator
\end_layout

\end_inset

 points to the first edge (its descriptor, to be precise), the second points
 to beyond the last edge.
 In this tutorial, edge iterator pairs have named prefixed with 'eip_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
eip_
\end_layout

\end_inset

, for example 'eip_1'.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edges.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the edge iterators of a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_edges
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_edges"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
These edge iterators can be dereferenced to obtain the edge descriptors.
 Note that this function will not be used often in isolation: usually one
 obtains the edge descriptors immediatly.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_edges_demo"

\end_inset

 demonstrates 'get_edges' by showing that both iterators of the edge iterator
 pair point to the same location, when the graph is empty.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edges_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of get_edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_edges_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_edges_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Edge descriptors
\begin_inset CommandInset label
LatexCommand label
name "sub:Edge-descriptors"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge descriptor
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An edge descriptor is a handle to an edge within a graph.
 Edge descriptors are used to:
\end_layout

\begin_layout Itemize
obtain the name, or other properties, of an edge
\end_layout

\begin_layout Standard
In this tutorial, edge descriptors have named prefixed with 'ed_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
ed_
\end_layout

\end_inset

, for example 'ed_1'.
\end_layout

\begin_layout Subsection
Get all edge descriptors
\begin_inset CommandInset label
LatexCommand label
name "sub:get_edge_descriptors"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge descriptors, get
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Get edge descriptors
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Obtaining all edge descriptors is not as simple of a function as you'd guess:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_descriptors.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get all edge descriptors of a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_edge_descriptors
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_descriptors"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This does show an important concept of the Boost.Graph library: boost::edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edges
\end_layout

\end_inset

 returns to vertex iterators
\begin_inset Index idx
status open

\begin_layout Plain Layout
vertex iterator
\end_layout

\end_inset

, that can be dereferenced to obtain the vertex descriptors.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_edge_descriptors_demo"

\end_inset

 demonstrates the 'get_edge_descriptor', by showing that empty graphs do
 not have any edge descriptors.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_descriptors_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of get_edge_descriptors
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_edge_descriptors_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_descriptors_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{2}$
\end_inset

, a fully connected graph with two vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_k2"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create 
\begin_inset Formula $K_{2}$
\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, we are going to create a graph!
\end_layout

\begin_layout Standard
To create a fully connected graph with two vertices (also called 
\begin_inset Formula $K_{2}$
\end_inset

), one needs two vertices and one (undirected) edge, as depicted in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:k2_graph"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (0,0) node[fill=black,shape=circle,text=white] {$a$} 
\end_layout

\begin_layout Plain Layout

    -- (5,1) node[fill=black,shape=circle,text=white] {$b$} 
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

: a fully connected graph with two vertices named 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To create 
\begin_inset Formula $K_{2}$
\end_inset

, the following code can be used:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_k2_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:k2_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
create_k2_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To save defining the type, we call the 'create_empty_undirected_graph' function.
 The vertex descriptors (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

) created by two boost::add_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_vertex
\end_layout

\end_inset

 calls are stored to add an edge to the graph.
 From boost::add_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge
\end_layout

\end_inset

 its return type (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:boost::add_edge result"

\end_inset

), it is only checked that insertion has been successfull.
\end_layout

\begin_layout Standard
Note that the graph lacks all properties: nodes do not have names, nor do
 edges.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph_demo"

\end_inset

 demonstrates how to 'create_k2_graph' and uses all functions currently
 described by this tutorial.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_k2_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'create_k2_graph' 
\begin_inset Index idx
status open

\begin_layout Plain Layout
create_k2_graph_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_k2_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Working on a graph without properties
\end_layout

\begin_layout Standard
Graphs without edge and vertex properties have plenty of things to measure.
 These simple getters and setters will allow you to work with, test and
 debug your code:
\end_layout

\begin_layout Itemize
Counting the number of vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_n_vertices"

\end_inset


\end_layout

\begin_layout Itemize
Counting the number of edges: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_n_edges"

\end_inset


\end_layout

\begin_layout Itemize
Getting the vertices' out degrees: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_out_degrees"

\end_inset


\end_layout

\begin_layout Subsection
Counting the number of vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:get_n_vertices"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertices, counting
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Counting the number of vertices
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Use boost::num_vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::num_vertices
\end_layout

\end_inset

, as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_n_vertices.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Count the numbe of vertices
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
get_n_vertices
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_n_vertices"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function 'get_n_vertices' is demonstrated in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_n_vertices_demo"

\end_inset

, to measure the number of vertices of an empty (zero) and 
\begin_inset Formula $K_{2}$
\end_inset

 (two) graph.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_n_vertices_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'get_n_vertices' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_n_vertices_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_n_vertices_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Counting the number of edges
\begin_inset CommandInset label
LatexCommand label
name "sub:get_n_edges"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edges, counting
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Counting the number of edges
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Use boost::num_edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::num_edges
\end_layout

\end_inset

, as shown here:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_n_edges.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Count the number of edges
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
get_n_edges
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_n_edges"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function 'get_n_edges' is demonstrated in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_n_edges_demo"

\end_inset

, to measure the number of vertices of an empty (zero) and 
\begin_inset Formula $K_{2}$
\end_inset

 (one) graph.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_n_edges_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'get_n_edges' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_n_edges_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_n_edges_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Getting the vertices' out degree
\begin_inset CommandInset label
LatexCommand label
name "sub:get_vertex_out_degrees"

\end_inset


\end_layout

\begin_layout Standard
The out degree of a vertex is the number of edges that originate at it.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_out_degrees.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the vertices' out degrees
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_vertex_out_degrees
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_out_degrees"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The out degrees of the vertices are obtained directly from the vertex descriptor
 and then put into a std::vector.
 Note that the std::vector has element type 'int', instead of 'graph::degree_siz
e_type', as one should prefer using int (over unsigned int) in an interface
 
\begin_inset CommandInset citation
LatexCommand cite
key "lakos1996large"

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Chapter 9.2.2
\end_layout

\end_inset

.
 Also, avoid using an unsigned an int for the sake of gaining that one more
 bit 
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup1997"

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Chapter 4.4
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Albeit 
\begin_inset Formula $K_{2}$
\end_inset

 is a simple graph, we can use it to demonstrate 'get_vertex_out_degrees'
 on, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_out_degrees_demo"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_out_degrees_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'get_vertex_out_degrees' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_vertex_out_degrees_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_out_degrees_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Storing a graph as a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:save_graph_to_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Save graph as .dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create .dot from graph
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Graph are easily saved to a .dot file:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_graph_to_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing a graph as a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
save_graph_to_dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot_demo"

\end_inset

 shows how to use this function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_graph_to_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'save_graph_to_dot' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
save_graph_to_dot_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_graph_to_dot_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When using the 'create_k2_graph function' (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

) to create a 
\begin_inset Formula $K_{2}$
\end_inset

 graph, the .dot file created is displayed in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot_test_k2_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_graph_to_dot_test_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the create_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_graph_to_dot_test_k2_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .dot file corresponds to figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:save_graph_to_dot_test_k2_graph.svg"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename save_graph_to_dot_test_k2_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the create_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "fig:save_graph_to_dot_test_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you used the create_named_vertices_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{2}$
\end_inset

 graph with named vertices, you see that the .dot file does not have stored
 the vertex names:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_graph_to_dot_test_named_vertices_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the create_named_vertices_k2_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_graph_to_dot_test_named_vertices_k2_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
So, the 'save_graph_to_dot' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset

) saves only the structure of the graph.
\end_layout

\begin_layout Section
Building graphs with built-in properties
\end_layout

\begin_layout Standard
Up until now, the graphs created have had edges and vertices without any
 propery.
 In this chapter, graphs will be created, in which edges vertices can have
 a (std::string) name.
 There are many more built-in properties edges and nodes can have (see the
 boost/graph/properties.hpp file for these).
\end_layout

\begin_layout Standard
In this chapter, we will build the following graphs:
\end_layout

\begin_layout Itemize
An empty (undirected) graph that allows for vertices with names: see chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_named_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{2}$
\end_inset

with named vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_vertices_k2"

\end_inset


\end_layout

\begin_layout Itemize
An empty (undirected) graph that allows for edges and vertices with names:
 see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_named_edges_and_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{3}$
\end_inset

with named edges and vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_edges_and_vertices_k3"

\end_inset


\end_layout

\begin_layout Standard
In the process, some basic (sometimes bordering trivial) functions are shown:
\end_layout

\begin_layout Itemize
Adding a named vertex: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_named_vertex"

\end_inset


\end_layout

\begin_layout Itemize
Getting the vertices' names: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_names"

\end_inset


\end_layout

\begin_layout Itemize
Adding an named edge: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_named_edge"

\end_inset


\end_layout

\begin_layout Itemize
Getting the edges' names: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_edge_names"

\end_inset


\end_layout

\begin_layout Standard
These functions are mostly there for completion and showing which data types
 are used.
\end_layout

\begin_layout Subsection
Creating an empty graph with named vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_named_vertices_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create an empty graph with named vertices
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Named vertices, create empty graph
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Empty graph with named vertices, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's create a trivial empty graph, in which the vertices can have a name:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_named_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty graph with named vertices
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
create_empty_named_vertices_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_named_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This graph:
\end_layout

\begin_layout Itemize
has its out edges stored in a std::vector (due to the first boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
has its vertices stored in a std::vector (due to the second boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
is undirected (due to the boost::undirectedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
The vertices have one property: they have a name, that is of data type std::stri
ng (due to the boost::property< boost::vertex_name_t,std::string>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_name_t
\end_layout

\end_inset

')
\end_layout

\begin_layout Itemize
Edges and graph have no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Why specify edge storage twice?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The boost::adjacency_list
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::adjacency_list
\end_layout

\end_inset

 has a new, fourth template argument 'boost::property< boost::vertex_name_t,std:
:string>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_name_t
\end_layout

\end_inset

'.
 This can be read as: 
\begin_inset Quotes eld
\end_inset

vertices have the property 'boost::vertex_name_t', that is of data type
 'std::string'
\begin_inset Quotes erd
\end_inset

.
 Or simply: 
\begin_inset Quotes eld
\end_inset

vertices have a name that is stored as a std::string
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_named_vertices_graph_demo"

\end_inset

 shows how to create this graph.
 Note that all the earlier functions defined in this tutorial keep working
 as expected.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_named_vertices_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'create_empty_named_vertices_graph' function 
\begin_inset Index idx
status open

\begin_layout Plain Layout
create_empty_named_vertices_graph_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_named_vertices_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Add a vertex with a name
\begin_inset CommandInset label
LatexCommand label
name "sub:add_named_vertex"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Add named vertex
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Named vertex, add
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Vertex, add named
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Adding a vertex without a name was trivially easy (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_vertex"

\end_inset

).
 Adding a vertex with a name is less easy:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_named_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Add a vertex with a name
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
add_named_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_named_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Instead of calling 'boost::add_vertex' with an additional argument containing
 the name of the vertex
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
I am unsure if this would have been a good interface.
 I am sure I expected this interface myself.
 I do see a problem with multiple properties and the order of initialization,
 but initialization can follow the same order as the the property list.
\end_layout

\end_inset

 , multiple things need to be done.
 When adding a new vertex to the graph, the vertex descriptor (as describes
 in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

) is stored.
 After obtaining the name map from the graph (using 'boost::get(boost::vertex_na
me,g)
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::get
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_name
\end_layout

\end_inset

'), the name of the vertex is set using that vertex descriptor.
\end_layout

\begin_layout Standard
Using add_named_vertex is straightforward, as demonstrated by algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_named_vertex_demo"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_named_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'add_named_vertex'
\begin_inset Index idx
status open

\begin_layout Plain Layout
add_named_vertex_demo
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Reference to Superman
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_named_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Getting the vertices' names
\begin_inset CommandInset label
LatexCommand label
name "sub:get_vertex_names"

\end_inset


\end_layout

\begin_layout Standard
When the vertices of a graph have named vertices
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: replace std::string as the hardcoded type of a vertex property
\end_layout

\end_inset

, one can extract them as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_names.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the vertices' names
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_vertex_names
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_names"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The names of the vertices are obtained from a boost::property_map and then
 put into a std::vector.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset

Note that the std::vector has element type 'std::string', instead of extracting
 the type from the graph.
 If you know how to do so, please email me.
\end_layout

\begin_layout Standard
When trying to get the vertices' names from a graph without vertices with
 names, you will get the error 'formed reference to void' (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:formed_reference_to_void"

\end_inset

).
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_names_demo"

\end_inset

 shows how to add two named vertices and how to get their names.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_names_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of 'get_vertex_names'
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_vertex_names_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_names_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_named_vertices_k2"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Create 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We extend 
\begin_inset Formula $K_{2}$
\end_inset

 of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_k2"

\end_inset

 by naming the vertices 'from' and 'to', as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_vertices_k2_graph"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (0,0) node[fill=black,shape=circle,text=white] {from} 
\end_layout

\begin_layout Plain Layout

    -- (5,0) node[fill=black,shape=circle,text=white] {to} 
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

: a fully connected graph with two vertices with the text 'from' and 'to'
 
\begin_inset CommandInset label
LatexCommand label
name "fig:named_vertices_k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To create 
\begin_inset Formula $K_{2}$
\end_inset

, the following code can be used:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_named_vertices_k2_graph.cpp"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_vertices_k2_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
create_named_vertices_k2_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_vertices_k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the code is a repeat of algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_k2_graph"

\end_inset

.
 In the end, the names are obtained as a boost::property_map and set.
\end_layout

\begin_layout Standard
Also the demonstration code (algorithm ) is very similar to the demonstration
 code of the create_k2_graph function ().
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_named_vertices_k2_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstrating the 'create_k2_graph' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
create_named_vertices_k2_graph_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_vertices_k2_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Creating an empty graph with named edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_named_edges_and_vertices_graph"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Create an empty graph with named edges and vertices
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Named edges and vertices, create empty graph
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Empty graph with named edges and vertices, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's create a trivial empty graph, in which the both the edges and vertices
 can have a name:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_named_edges_and_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty graph with named edges and vertices
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
create_empty_named_edges_and_vertices_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_named_edges_and_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This graph:
\end_layout

\begin_layout Itemize
has its out edges stored in a std::vector (due to the first boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
has its vertices stored in a std::vector (due to the second boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
is undirected (due to the boost::undirectedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
The vertices have one property: they have a name, that is of data type std::stri
ng (due to the boost::property< boost::vertex_name_t,std::string>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_name_t
\end_layout

\end_inset

')
\end_layout

\begin_layout Itemize
The edges have one property: they have a name, that is of data type std::string
 (due to the boost::property< boost::edge_name_t,std::string>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edge_name_t
\end_layout

\end_inset

')
\end_layout

\begin_layout Itemize
The graph has no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Why specify edge storage twice?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The boost::adjacency_list
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::adjacency_list
\end_layout

\end_inset

 has a new, fifth template argument 'boost::property< boost::edge_name_t,std::st
ring>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edge_name_t
\end_layout

\end_inset

'.
 This can be read as: 
\begin_inset Quotes eld
\end_inset

edges have the property 'boost::edge_name_t', that is of data type 'std::string'
\begin_inset Quotes erd
\end_inset

.
 Or simply: 
\begin_inset Quotes eld
\end_inset

edges have a name that is stored as a std::string
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_empty_named_edges_and_vertices_graph_demo"

\end_inset

 shows how to create this graph.
 Note that all the earlier functions defined in this tutorial keep working
 as expected.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_named_edges_and_vertices_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'create_empty_named_edges_and_vertices_graph' function
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
create_empty_named_edges_and_vertices_graph_demo
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Reference to Fantastic Four
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_named_edges_and_vertices_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Adding a named edge
\begin_inset CommandInset label
LatexCommand label
name "sub:add_named_edge"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Add named edge
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Named edge, add
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Adding an edge with a name:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_named_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Add a vertex with a name
\begin_inset Index idx
status open

\begin_layout Plain Layout
add_named_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_named_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this code snippet, the edge descriptor (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Edge-descriptors"

\end_inset

 if you need to refresh your memory) when using 'boost::add_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge
\end_layout

\end_inset

' is used as a key to change the edge its name map.
\end_layout

\begin_layout Standard
The algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:add_named_edge_demo"

\end_inset

 shows how to add a named edge to an empty graph.
 When trying to add named vertices to graph without this property, you will
 get the error 'formed reference to void' (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:formed_reference_to_void"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_named_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'add_named_edge' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
add_named_edge_demo
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Reference to Fantastic Four
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_named_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Getting the edges' names
\begin_inset CommandInset label
LatexCommand label
name "sub:get_edge_names"

\end_inset


\end_layout

\begin_layout Standard
When the edges of a graph have named vertices
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: replace std::string as the hardcoded type of a vertex property
\end_layout

\end_inset

, one can extract them as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_names.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the edges' names
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
get_edge_names
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_names"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The names of the edges are obtained from a boost::property_map and then
 put into a std::vector.
 The algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_edge_names_demo"

\end_inset

 shows how to apply this function.
 
\end_layout

\begin_layout Standard
Would you dare to try to get the edges' names from a graph without vertices
 with names, you will get the error 'formed reference to void' (see chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:formed_reference_to_void"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_names_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'get_edge_names' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_edge_names_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_names_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 with named edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_named_edges_and_vertices_k3"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create 
\begin_inset Formula $K_{3}$
\end_inset

 with named edges and vertices
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $K_{3}$
\end_inset

 with named edges and vertices, create
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We extend the graph 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_vertices_k2"

\end_inset

 by adding names to the edges, as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_edges_and_vertices_k3"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (2,4) node[fill=black,shape=circle,text=white] {top} 
\end_layout

\begin_layout Plain Layout

   -- (3,2) node[anchor=west] {AB} 
\end_layout

\begin_layout Plain Layout

   -- (4,0) node[fill=black,shape=circle,text=white] {right} 
\end_layout

\begin_layout Plain Layout

   -- (2,0) node[anchor=north] {BC} 
\end_layout

\begin_layout Plain Layout

   -- (0,0) node[fill=black,shape=circle,text=white] {left} 
\end_layout

\begin_layout Plain Layout

   -- (1,2) node[anchor=east] {CA} 
\end_layout

\begin_layout Plain Layout

   -- (2,4)
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Formula $K_{3}$
\end_inset

: a fully connected graph with three named edges and vertices 
\begin_inset CommandInset label
LatexCommand label
name "fig:named_edges_and_vertices_k3"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To create 
\begin_inset Formula $K_{3}$
\end_inset

, the following code can be used:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_named_edges_and_vertices_k3_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_edges_and_vertices_k3"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
create_named_edges_and_vertices_k3_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_edges_and_vertices_k3_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the code is a repeat of algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

.
 In the end, the edge names are obtained as a boost::property_map and set.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3_graph_demo"

\end_inset

 shows how to create the graph and measure its edge and vertex names.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_named_edges_and_vertices_k3_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'create_named_edges_and_vertices_k3' function
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
create_named_edges_and_vertices_k3_graph_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_named_edges_and_vertices_k3_graph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Working with graphs with named edges and vertices
\end_layout

\begin_layout Standard
Measuring simple traits of the graphs created allows
\end_layout

\begin_layout Itemize
Check if there exists a vertex with a certain name: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:has_vertex_with_name"

\end_inset


\end_layout

\begin_layout Itemize
Find a (named) vertex by its name: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:find_first_vertex_with_name"

\end_inset


\end_layout

\begin_layout Itemize
Get a (named) vertex its degree, in degree and out degree: chapter: 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_first_vertex_with_name_out_degree"

\end_inset


\end_layout

\begin_layout Itemize
Get a (named) vertex its name from its vertex descriptor: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_name"

\end_inset


\end_layout

\begin_layout Itemize
Set a (named) vertex its name using its vertex descriptor: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:set_vertex_name"

\end_inset


\end_layout

\begin_layout Itemize
Setting all vertices' names: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:set_vertex_names"

\end_inset


\end_layout

\begin_layout Itemize
Clear a named vertex its edges: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:clear_first_vertex_with_name"

\end_inset


\end_layout

\begin_layout Itemize
Remove a named vertex: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:remove_first_vertex_with_name"

\end_inset


\end_layout

\begin_layout Itemize
Check if there exists an edge with a certain name: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:has_edge_with_name"

\end_inset


\end_layout

\begin_layout Itemize
Find a (named) edge by its name: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:find_first_edge_with_name"

\end_inset


\end_layout

\begin_layout Itemize
Get a (named) edge its name from its edge descriptor: chapter 
\end_layout

\begin_layout Itemize
Set a (named) edge its name using its edge descriptor: chapter 
\end_layout

\begin_layout Itemize
Remove a named edge: chapter 
\end_layout

\begin_layout Itemize
Storing a graph with named vertices as a .dot: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:save_named_vertices_graph_to_dot"

\end_inset


\end_layout

\begin_layout Itemize
Storing a graph with named edges and vertices as a .dot: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:save_named_edges_and_vertices_graph_to_dot"

\end_inset


\end_layout

\begin_layout Standard
Especially the first paragraph is important: 'find_first_vertex_by_name'
 shows how to obtain a vertex descriptor, which is used in later algorithms.
\end_layout

\begin_layout Subsection
Check if there exists a vertex with a certain name
\begin_inset CommandInset label
LatexCommand label
name "sub:has_vertex_with_name"

\end_inset


\end_layout

\begin_layout Standard
Before modifying our vertices, let's first determine if we can find a vertex
 by its name in a graph.
 After obtaing a name map, we obtain the vertex iterators, dereference these
 to obtain the vertex descriptors and then compare each vertex its name
 with the one desired.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_vertex_with_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find if there is vertex with a certain name
\begin_inset Index idx
status open

\begin_layout Plain Layout
has_vertex_with_name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:has_vertex_with_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This function can be demonstrated as in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:has_vertex_with_name_demo"

\end_inset

, where a certain name cannot be found in an empty graph.
 After adding the desired name, it is found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_vertex_with_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'has_vertex_with_name' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
has_vertex_with_name_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:has_vertex_with_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this function only finds if there is at least one vertex with
 that name: it does not tell how many vertices with that name exist in the
 graph.
\end_layout

\begin_layout Subsection
Find a vertex by its name
\begin_inset CommandInset label
LatexCommand label
name "sub:find_first_vertex_with_name"

\end_inset


\end_layout

\begin_layout Standard
Where STL functions work with iterators, here we obtain a vertex descriptor
 (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

) to obtain a handle to the desired vertex.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_vertex_with_name"

\end_inset

 shows how to obtain a vertex descriptor to the first (name) vertex found
 with a specific name.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_vertex_with_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find the first vertex by its name
\begin_inset Index idx
status open

\begin_layout Plain Layout
find_first_vertex_by_name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_vertex_with_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the vertex descriptor obtained, one can read and modify the vertex
 and the edges surrounding it.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_vertex_with_name_demo"

\end_inset

 shows some examples of how to do so.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_vertex_with_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'find_first_vertex_by_name' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
find_first_vertex_by_name_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_vertex_with_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Get a (named) vertex its degree, in degree and out degree
\begin_inset CommandInset label
LatexCommand label
name "sub:get_first_vertex_with_name_out_degree"

\end_inset


\end_layout

\begin_layout Standard
We already obtained all out degrees of all vertices in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_out_degrees"

\end_inset

 by just collecting all vertex descriptors.
 Here, we will search for a vertex with a certain name, obtain its vertex
 descriptor and find the number of connections it has.
 The number of connections is called the 'degree' of the vertex.
 There are three types of degrees:
\end_layout

\begin_layout Itemize
in degree: the number of incoming connections, using boost::in_degree
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::in_degree
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
out degree: the number of outgoing connections, using boost::in_degree
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::out_degree
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
degree: sum of the in degree and out degree, using boost::in_degree
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::degree
\end_layout

\end_inset


\end_layout

\begin_layout Standard
With a vertex descriptor, we can read a vertex its types of degrees.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_out_degrees"

\end_inset

 shows how to find a vertex, obtain its vertex descriptor and then obtain
 the out degree from it.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_first_vertex_with_name_out_degree.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the first vertex with a certain name its out degree from its vertex
 descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_first_vertex_with_name_out_degree
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_first_vertex_with_name_out_degree"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_names_demo"

\end_inset

 shows how to use this function.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_first_vertex_with_name_out_degree_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'get_first_vertex_with_name_out_degree' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_first_vertex_with_name_out_degree_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_first_vertex_with_name_out_degree_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Get a (named) vertex its name from its vertex descriptor
\begin_inset CommandInset label
LatexCommand label
name "sub:get_vertex_name"

\end_inset


\end_layout

\begin_layout Standard
This may seem a trivial paragraph, as chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_vertex_names"

\end_inset

 describes the 'get_vertex_names' algorithm, in which we get all vertices'
 names.
 But it does not allow to first find a vertex of interest and subsequently
 getting only that one its name.
\end_layout

\begin_layout Standard
To obtain the name from a vertex descriptor, one needs to pull out the name
 map and then look up the vertex of interest (I like to compare it as such:
 the vertex descriptor is a last name, the name map is a phone book, the
 desired info a phone number).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get a vertex its name from its vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_vertex_name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'get_vertex_name', one first needs to obtain a vertex descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_names_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'get_vertex_name' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_vertex_name_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Set a (named) vertex its name from its vertex descriptor
\begin_inset CommandInset label
LatexCommand label
name "sub:set_vertex_name"

\end_inset


\end_layout

\begin_layout Standard
If you know how to get the name from a vertex descriptor, setting it is
 just as easy, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_vertex_name"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_vertex_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Set a vertex its name from its vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
set_vertex_name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_vertex_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'set_vertex_name', one first needs to obtain a vertex descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_vertex_name_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_vertex_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'set_vertex_name' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
set_vertex_name_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_vertex_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Setting all vertices' names
\begin_inset CommandInset label
LatexCommand label
name "sub:set_vertex_names"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Set vertices names
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertices, set names
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the vertices of a graph have named vertices
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: replace std::string as the hardcoded type of a vertex property
\end_layout

\end_inset

 and you want to set all their names at once:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_vertex_names.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Setting the vertices' names
\begin_inset Index idx
status open

\begin_layout Plain Layout
set_vertex_names
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_vertex_names"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
An impressive feature is that getting the property map holding the graph
 its names is not a copy, but a reference.
 Otherwise, modifying 'name_map' (obtained by non-reference) would only
 modify a copy.
\end_layout

\begin_layout Subsection
Clear the edges of a named vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:clear_first_vertex_with_name"

\end_inset


\end_layout

\begin_layout Standard
A vertex descriptor can be used to clear all in/out/both edges connected
 to a vertex.
 It is necessary to remove these connections before the vertex itself can
 be removed.
 There are three functions to remove the edges connected to a vertex:
\end_layout

\begin_layout Itemize
boost::clear_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::clear_vertex
\end_layout

\end_inset

: removes all edges to and from the vertex 
\end_layout

\begin_layout Itemize
boost::clear_out_edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::clear_out_edges
\end_layout

\end_inset

: removes all outgoing edges from the vertex (in directed graphs only, else
 you will get a 'error: no matching function for call to clear_out_edges',
 as described in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:no_matching_function_for_call_to_clear_out_edges"

\end_inset

)
\end_layout

\begin_layout Itemize
boost::clear_in_edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::clear_in_edges
\end_layout

\end_inset

: removes all incoming edges from the vertex (in directed graphs only, else
 you will get a 'error: no matching function for call to clear_in_edges',
 as described in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:no_matching_function_for_call_to_clear_in_edges"

\end_inset

)
\end_layout

\begin_layout Standard
In the algorithm 'clear_first_vertex_with_name' the 'boost::clear_vertex'
 algorithm is used, as the graph used is undirectional:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "clear_first_vertex_with_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Clear the first vertex with a certain name
\begin_inset Index idx
status open

\begin_layout Plain Layout
clear_first_vertex_with_name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:clear_first_vertex_with_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:clear_first_vertex_with_name_demo"

\end_inset

 shows the clearing of the first named vertex found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "clear_first_vertex_with_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'clear_first_vertex_with_name' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
clear_first_vertex_with_name_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:clear_first_vertex_with_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Remove a named vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:remove_first_vertex_with_name"

\end_inset


\end_layout

\begin_layout Standard
A vertex descriptor can be used to remove a vertex from a graph.
 It is necessary to remove these connections (e.g.
 using clear_first_vertex_with_name', algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:clear_first_vertex_with_name"

\end_inset

) before the vertex itself can be removed.
 
\end_layout

\begin_layout Standard
Removing a named vertex goes as follows: use the name of the vertex to get
 a first vertex descriptor, then call 'boost::remove_vertex'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::remove_vertex
\end_layout

\end_inset

, shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:clear_first_vertex_with_name"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "remove_first_vertex_with_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Remove the first vertex with a certain name
\begin_inset Index idx
status open

\begin_layout Plain Layout
remove_first_vertex_with_name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:remove_first_vertex_with_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:remove_first_vertex_with_name_demo"

\end_inset

 shows the removal of the first named vertex found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "remove_first_vertex_with_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'remove_first_vertex_with_name' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
remove_first_vertex_with_name_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:remove_first_vertex_with_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Again, be sure that the vertex removed does not have any connections!
\end_layout

\begin_layout Subsection
Check if there exists an edge with a certain name
\begin_inset CommandInset label
LatexCommand label
name "sub:has_edge_with_name"

\end_inset


\end_layout

\begin_layout Standard
Before modifying our edges, let's first determine if we can find an edge
 by its name in a graph.
 After obtaing a name map, we obtain the edge iterators, dereference these
 to obtain the edge descriptors and then compare each edge its name with
 the one desired.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_edge_with_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find if there is an edge with a certain name
\begin_inset Index idx
status open

\begin_layout Plain Layout
has_edge_with_name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:has_edge_with_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This function can be demonstrated as in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:has_edge_with_name_demo"

\end_inset

, where a certain name cannot be found in an empty graph.
 After adding the desired name, it is found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_edge_with_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'has_edge_with_name' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
has_vertex_with_name_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:has_edge_with_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this function only finds if there is at least one edge with that
 name: it does not tell how many edges with that name exist in the graph.
\end_layout

\begin_layout Subsection
Find an edge by its name
\begin_inset CommandInset label
LatexCommand label
name "sub:find_first_edge_with_name"

\end_inset


\end_layout

\begin_layout Standard
Where STL functions work with iterators, here we obtain an edge descriptor
 (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Edge-descriptors"

\end_inset

) to obtain a handle to the desired edge.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_edge_with_name"

\end_inset

 shows how to obtain an edge descriptor to the first (name) edge found with
 a specific name.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_edge_with_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find the first edge by its name
\begin_inset Index idx
status open

\begin_layout Plain Layout
find_first_edge_by_name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_edge_with_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the edge descriptor obtained, one can read and modify the graph.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_edge_with_name_demo"

\end_inset

 shows some examples of how to do so.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_edge_with_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'find_first_edge_by_name' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
find_first_edge_by_name_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_edge_with_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Get a (named) edge its name from its edge descriptor
\begin_inset CommandInset label
LatexCommand label
name "sub:get_edge_name"

\end_inset


\end_layout

\begin_layout Standard
This may seem a trivial paragraph, as chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:get_edge_names"

\end_inset

 describes the 'get_edge_names' algorithm, in which we get all edges' names.
 But it does not allow to first find an edge of interest and subsequently
 getting only that one its name.
\end_layout

\begin_layout Standard
To obtain the name from an edgedescriptor, one needs to pull out the name
 map and then look up the edge of interest.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get an edge its name from its edge descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_edge_name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'get_edge_name', one first needs to obtain an edge descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_names_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'get_edge_name' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_edge_name_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Set a (named) edge its name from its edge descriptor
\begin_inset CommandInset label
LatexCommand label
name "sub:set_edge_name"

\end_inset


\end_layout

\begin_layout Standard
If you know how to get the name from an edge descriptor, setting it is just
 as easy, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_edge_name"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_edge_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Set an edge its name from its edge descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
set_edge_name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_edge_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'set_edge_name', one first needs to obtain an edge descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_edge_name_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_edge_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'set_edge_name' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
set_edge_name_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_edge_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Removing a named edge
\end_layout

\begin_layout Standard
There are two ways to remove an edge: 
\end_layout

\begin_layout Enumerate
Get an edge descriptor and call 'boost::remove_edge'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::remove_edge
\end_layout

\end_inset

 on that descriptor: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:remove_first_edge_with_name"

\end_inset


\end_layout

\begin_layout Enumerate
Get two vertex descriptors and call 'boost::remove_edge'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::remove_edge
\end_layout

\end_inset

 on those two descriptors: chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:remove_edge_between_vertices_with_names"

\end_inset


\end_layout

\begin_layout Subsubsection
Removing the first edge with a certain name
\begin_inset CommandInset label
LatexCommand label
name "sub:remove_first_edge_with_name"

\end_inset


\end_layout

\begin_layout Standard
An edge descriptor can be used to remove an edge from a graph.
 
\end_layout

\begin_layout Standard
Removing a named edge goes as follows: use the name of the edge to get a
 first edge descriptor, then call 'boost::remove_edge'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::remove_edge
\end_layout

\end_inset

, shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:clear_first_vertex_with_name"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "remove_first_edge_with_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Remove the first edge with a certain name
\begin_inset Index idx
status open

\begin_layout Plain Layout
remove_first_edge_with_name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:remove_first_edge_with_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:remove_first_edge_with_name_demo"

\end_inset

 shows the removal of the first named edge found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "remove_first_edge_with_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'remove_first_edge_with_name' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
remove_first_edge_with_name_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:remove_first_edge_with_name_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Removing the edge between two named vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:remove_edge_between_vertices_with_names"

\end_inset


\end_layout

\begin_layout Standard
Instead of looking for an edge descriptor, one can also remove an edge from
 two vertex descriptors (which is: the edge between the two vertices).
 Removing an edge between two named vertices named edge goes as follows:
 use the names of the vertices to get both vertex descriptors, then call
 'boost::remove_edge'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::remove_edge
\end_layout

\end_inset

 on those two, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:clear_first_vertex_with_name"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "remove_edge_between_vertices_with_names.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Remove the first edge with a certain name
\begin_inset Index idx
status open

\begin_layout Plain Layout
remove_edge_between_vertices_with_names
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:remove_edge_between_vertices_with_names"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:remove_edge_between_vertices_with_names_demo"

\end_inset

 shows the removal of the first named edge found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "remove_edge_between_vertices_with_names_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'remove_edge_between_vertices_with_names' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
remove_edge_between_vertices_with_names_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:remove_edge_between_vertices_with_names_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Storing a graph with named vertices as a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:save_named_vertices_graph_to_dot"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Save graph with name vertices as .dot
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Create .dot from graph with named vertices
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
If you used the create_named_vertices_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{2}$
\end_inset

 graph with named vertices, you can store these names additionally with
 algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_vertices_graph_to_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_named_vertices_graph_to_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing a graph with named vertices as a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
save_named_vertices_graph_to_dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_vertices_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The .dot file created is displayed in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the create_named_vertices_k2_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .dot file corresponds to figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.svg"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the create_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "fig:save_named_vertices_graph_to_dot_test_named_vertices_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you used the create_named_edges_and_vertices_k3_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{3}$
\end_inset

 graph with named edges and vertices, you see that the .dot file does not
 have stored the edge names:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_named_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the create_named_edges_and_vertices_k3_graph function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
So, the 'save_named_vertices_graph_to_dot' function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset

) saves only the structure of the graph and its vertex names.
\end_layout

\begin_layout Subsection
Storing a graph with named vertices and edges as a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:save_named_edges_and_vertices_graph_to_dot"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Save graph with name edges and vertices as .dot
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Create .dot from graph with named edges and vertices
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you used the create_named_edges_and_vertices_k3_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{3}$
\end_inset

 graph with named edges and vertices, you can store these names additionally
 with algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_edges_and_vertices_graph_to_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_named_edges_and_vertices_graph_to_dot_cpp17.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing a graph with named edges and vertices as a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
save_named_edges_and_vertices_graph_to_dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_edges_and_vertices_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this algorithm uses C++17
\begin_inset Index idx
status open

\begin_layout Plain Layout
C++17
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The .dot file created is displayed in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_named_edges_and_vertices_graph_to_dot_test_named_vertices_k3_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_named_edges_and_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the create_named_edges_and_vertices_k3_graph function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_named_edges_and_vertices_graph_to_dot_test_named_vertices_k3_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .dot file corresponds to figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:save_named_edges_and_vertices_graph_to_dot_test_named_vertices_k2_graph.svg"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename save_named_edges_and_vertices_graph_to_dot_test_named_edges_and_vertices_k3_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the create_named_edges_and_vertices_k3_graph function
 (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "fig:save_named_edges_and_vertices_graph_to_dot_test_named_vertices_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you created a graph with edges more complex than just a name, you will
 still just write these to the .dot file.
 Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:save_custom_vertices_graph_to_dot"

\end_inset

 shows how to write custom vertices to a .dot file.
\end_layout

\begin_layout Standard
So, the 'save_named_edges_and_vertices_graph_to_dot' function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_graph_to_dot"

\end_inset

) saves only the structure of the graph and its edge and vertex names.
\end_layout

\begin_layout Section
Building graphs with custom properties
\end_layout

\begin_layout Standard
Up until now, the graphs created have had edges and vertices with the built-in
 name propery.
 In this chapter, graphs will be created, in which the edges and vertices
 can have a custom 'my_edge' and 'my_edge' type
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
I do not intend to be original in naming my data types
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
An empty (undirected) graph that allows for custom vertices: see chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_custom_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{2}$
\end_inset

with custom vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_custom_vertices_k2"

\end_inset


\end_layout

\begin_layout Itemize
An empty (undirected) graph that allows for custom edges and vertices: see
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_empty_custom_edges_and_vertices_graph"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $K_{3}$
\end_inset

with custom edges and vertices: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_custom_edges_and_vertices_k3"

\end_inset


\end_layout

\begin_layout Standard
In the process, some basic (sometimes bordering trivial) functions are shown:
\end_layout

\begin_layout Itemize
Adding a custom vertex: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_custom_vertex"

\end_inset


\end_layout

\begin_layout Itemize
Adding a custom edge: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_custom_edge"

\end_inset


\end_layout

\begin_layout Standard
These functions are mostly there for completion and showing which data types
 are used.
\end_layout

\begin_layout Subsection
Create an empty graph with custom vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_custom_vertices_graph"

\end_inset


\end_layout

\begin_layout Standard
Say we want to use our own vertex class as graph nodes.
 This is done in multiple steps:
\end_layout

\begin_layout Enumerate
Create a custom vertex class, called 'my_vertex'
\end_layout

\begin_layout Enumerate
Install a new property, called 'vertex_custom_type
\begin_inset Index idx
status open

\begin_layout Plain Layout
vertex_custom_type
\end_layout

\end_inset

'
\end_layout

\begin_layout Enumerate
Use the new property in creating a boost::adjacency_list
\end_layout

\begin_layout Subsubsection
Creating the custom vertex class
\end_layout

\begin_layout Standard
In this example, I create a custom vertex class.
 Here I will show the header file of it, as the implementation of it is
 not important yet.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "my_vertex.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Declaration of my_vertex
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
my_vertex
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
my_vertex.h
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
my_vertex declaration
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Declaration, my_vertex 
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:my_vertex_h"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
my_vertex is a class that has multiple properties: two doubles 'm_x' ('m_
\begin_inset Index idx
status open

\begin_layout Plain Layout
m_
\end_layout

\end_inset

' stands for member
\begin_inset Index idx
status open

\begin_layout Plain Layout
member
\end_layout

\end_inset

) and 'm_y', and two std::strings m_name and m_description.
 my_vertex is copyable, but cannot trivially be converted to a std::string.
\end_layout

\begin_layout Subsubsection
Installing the new property
\end_layout

\begin_layout Standard
Installing a new property would have been easier, if 'more C++ compilers
 were standards conformant' (
\begin_inset CommandInset citation
LatexCommand cite
key "siek2001boost"

\end_inset

, chapter 3.6, footnote at page 52).
 Boost.Graph uses the BOOST_INSTALL_PROPERTY
\begin_inset Index idx
status open

\begin_layout Plain Layout
BOOST_INSTALL_PROPERTY
\end_layout

\end_inset

 macro
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
macro
\end_layout

\end_inset

 to allow using a custom property:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "install_vertex_custom_type.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Installing the vertex_custom_type property
\begin_inset Index idx
status open

\begin_layout Plain Layout
install_vertex_custom_type
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:install_vertex_custom_type"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The enum value 314
\begin_inset Index idx
status open

\begin_layout Plain Layout
pi
\end_layout

\end_inset

 must be unique.
\end_layout

\begin_layout Subsubsection
Create the empty graph with custom vertices
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_custom_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty graph with custom vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
create_empty_custom_vertices_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_custom_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This graph:
\end_layout

\begin_layout Itemize
has its out edges stored in a std::vector (due to the first boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
has its vertices stored in a std::vector (due to the second boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
is undirected (due to the boost::undirectedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
The vertices have one property: they have a custom type, that is of data
 type my_vertex (due to the boost::property< boost::vertex_custom_type_t,my_vert
ex>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_custom_type_t
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_vertex
\end_layout

\end_inset

')
\end_layout

\begin_layout Itemize
The edges and graph have no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Why specify edge storage twice?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The boost::adjacency_list
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::adjacency_list
\end_layout

\end_inset

 has a new, fourth template argument 'boost::property< boost::vertex_custom_type
_t,my_vertex>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_custom_type_t
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_vertex
\end_layout

\end_inset

'.
 This can be read as: 
\begin_inset Quotes eld
\end_inset

vertices have the property 'boost::vertex_custom_type_t', which is of data
 type 'my_vertex'
\begin_inset Quotes erd
\end_inset

.
 Or simply: 
\begin_inset Quotes eld
\end_inset

vertices have a custom type called my_vertex
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Add a custom vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:add_custom_vertex"

\end_inset


\end_layout

\begin_layout Standard
Adding a custom vertex is very similar to adding a named vertex (chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_named_vertex"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_custom_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Add a custom vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
add_custom_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_custom_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When having added a new (abstract) vertex to the graph, the vertex descriptor
 is used to set the my_vertex in the graph its my_vertex map (using 'boost::get(
boost::vertex_custom_type,g)
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_custom_type
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::get
\end_layout

\end_inset

').
\end_layout

\begin_layout Subsection
Getting the vertices' my_vertexes
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
the name 'my_vertexes' is chosen to indicate this function returns a container
 of my_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:get_vertex_my_vertexes"

\end_inset


\end_layout

\begin_layout Standard
When the vertices of a graph have any associated my_vertex, one can extract
 these as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_my_vertexes.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get the vertices' my_vertexes
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_vertex_my_vertexes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_my_vertexes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The my_vertex object associated with the vertices are obtained from a boost::pro
perty_map and then put into a std::vector.
\end_layout

\begin_layout Standard
When trying to get the vertices' my_vertex from a graph without my_vertex
 objects associated, you will get the error 'formed reference to void' (see
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:formed_reference_to_void"

\end_inset

).
\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 with custom vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_custom_vertices_k2"

\end_inset


\end_layout

\begin_layout Standard
We reproduce the 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_vertices_k2"

\end_inset

 , but with our custom vertices intead:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_custom_vertices_k2_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_vertices_k2_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
create_custom_vertices_k2_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_custom_vertices_k2_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the code is a slight modification of algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

.
 In the end, the my_vertices are obtained as a boost::property_map and set
 with two custom my_vertex objects.
\end_layout

\begin_layout Subsection
Create an empty graph with custom edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_empty_custom_edges_and_vertices_graph"

\end_inset


\end_layout

\begin_layout Standard
Say we want to use our own edge class as graph nodes.
 This is done in multiple steps:
\end_layout

\begin_layout Enumerate
Create a custom edge class, called 'my_edge'
\end_layout

\begin_layout Enumerate
Install a new property, called 'edge_custom_type
\begin_inset Index idx
status open

\begin_layout Plain Layout
edge_custom_type
\end_layout

\end_inset

'
\end_layout

\begin_layout Enumerate
Use the new property in creating a boost::adjacency_list
\end_layout

\begin_layout Subsubsection
Creating the custom edge class
\end_layout

\begin_layout Standard
In this example, I create a custom edge class.
 Here I will show the header file of it, as the implementation of it is
 not important yet.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "my_edge.h"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Declaration of my_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
my_edge
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_edge.h
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_edge declaration
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Declaration, my_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:my_edge_h"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
my_edge is a class that has multiple properties: two doubles 'm_width' ('m_
\begin_inset Index idx
status open

\begin_layout Plain Layout
m_
\end_layout

\end_inset

' stands for member
\begin_inset Index idx
status open

\begin_layout Plain Layout
member
\end_layout

\end_inset

) and 'm_height', and two std::strings m_name and m_description.
 my_edge is copyable, but cannot trivially be converted to a std::string.
\end_layout

\begin_layout Subsubsection
Installing the new property
\end_layout

\begin_layout Standard
Installing a new property would have been easier, if 'more C++ compilers
 were standards conformant' (
\begin_inset CommandInset citation
LatexCommand cite
key "siek2001boost"

\end_inset

, chapter 3.6, footnote at page 52).
 Boost.Graph uses the BOOST_INSTALL_PROPERTY
\begin_inset Index idx
status open

\begin_layout Plain Layout
BOOST_INSTALL_PROPERTY
\end_layout

\end_inset

 macro
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
macro
\end_layout

\end_inset

 to allow using a custom property:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "install_edge_custom_type.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Installing the edge_custom_type property
\begin_inset Index idx
status open

\begin_layout Plain Layout
install_vertex_custom_type
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:install_edge_custom_type"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The enum value 3142
\begin_inset Index idx
status open

\begin_layout Plain Layout
pi
\end_layout

\end_inset

 must be unique.
\end_layout

\begin_layout Subsubsection
Create the empty graph with custom edges and vertices
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_custom_edges_and_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating an empty graph with custom vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
create_empty_custom_vertices_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_empty_custom_edges_and_vertices_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This graph:
\end_layout

\begin_layout Itemize
has its out edges stored in a std::vector (due to the first boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
has its vertices stored in a std::vector (due to the second boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
is undirected (due to the boost::undirectedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
The vertices have one property: they have a custom type, that is of data
 type my_vertex (due to the boost::property< boost::vertex_custom_type_t,
 my_vertex>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertex_custom_type_t
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_vertex
\end_layout

\end_inset

')
\end_layout

\begin_layout Itemize
The edges have one property: they have a custom type, that is of data type
 my_edge (due to the boost::property< boost::edge_custom_type_t, my_edge>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edge_custom_type_t
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_edge
\end_layout

\end_inset

')
\end_layout

\begin_layout Itemize
The graph has no properties
\end_layout

\begin_layout Itemize
Edges are stored in a std::list 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Why specify edge storage twice?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The boost::adjacency_list
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::adjacency_list
\end_layout

\end_inset

 has a new, fifth template argument 'boost::property< boost::edge_custom_type_t,
 my_edge>
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edge_custom_type_t
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_edge
\end_layout

\end_inset

'.
 This can be read as: 
\begin_inset Quotes eld
\end_inset

edges have the property 'boost::edge_custom_type_t', which is of data type
 'my_edge'
\begin_inset Quotes erd
\end_inset

.
 Or simply: 
\begin_inset Quotes eld
\end_inset

edges have a custom type called my_edge
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Add a custom edge
\begin_inset CommandInset label
LatexCommand label
name "sub:add_custom_edge"

\end_inset


\end_layout

\begin_layout Standard
Adding a custom edge is very similar to adding a named edge (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:add_named_edge"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_custom_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Add a custom edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
add_custom_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:add_custom_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When having added a new (abstract) edge to the graph, the edge descriptor
 is used to set the my_edge in the graph its my_edge map (using 'boost::get(boos
t::edge_custom_type,g)
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edge_custom_type
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::get
\end_layout

\end_inset

').
\end_layout

\begin_layout Subsection
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 with custom edges and vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:create_custom_edges_and_vertices_k3"

\end_inset


\end_layout

\begin_layout Standard
Instead of using edges with a name, or other properties, here we use a custom
 edge class called 'my_edge'.
\end_layout

\begin_layout Standard
We reproduce the 
\begin_inset Formula $K_{3}$
\end_inset

 with named edges and vertices of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:create_named_edges_and_vertices_k3"

\end_inset

 , but with our custom edges and vertices intead:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_custom_edges_and_vertices_k3_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:named_edges_and_vertices_k3"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
create_custom_edges_and_vertices_k3_graph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_custom_edges_and_vertices_k3_graph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the code is a slight modification of algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_edges_and_vertices_k3_graph"

\end_inset

.
 In the end, the my_edges and my_vertices are obtained as a boost::property_map
 and set with the custom my_edge and my_vertex objects.
\end_layout

\begin_layout Section
Measuring simple graphs traits of a graph with custom edges and vertices
\end_layout

\begin_layout Subsection
Has a my_vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:has_vertex_with_my_vertex"

\end_inset


\end_layout

\begin_layout Standard
Before modifying our vertices, let's first determine if we can find a vertex
 by its custom type ('my_vertex') in a graph.
 After obtaing a my_vertex map, we obtain the vertex iterators, dereference
 these to obtain the vertex descriptors and then compare each vertex its
 my_vertex with the one desired.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_vertex_with_my_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find if there is vertex with a certain my_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
has_vertex_with_my_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:has_vertex_with_my_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This function can be demonstrated as in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:has_vertex_with_my_vertex_demo"

\end_inset

, where a certain my_vertex cannot be found in an empty graph.
 After adding the desired my_vertex, it is found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_vertex_with_my_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'has_vertex_with_my_vertex' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
has_vertex_with_my_vertex_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:has_vertex_with_my_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this function only finds if there is at least one vertex with
 that my_vertex: it does not tell how many vertices with that my_vertex
 exist in the graph.
\end_layout

\begin_layout Subsection
Find a vertex with a certain my_vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:find_vertex_with_my_vertex"

\end_inset


\end_layout

\begin_layout Standard
Where STL functions work with iterators, here we obtain a vertex descriptor
 (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Vertex-descriptors"

\end_inset

) to obtain a handle to the desired vertex.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_vertex_with_my_vertex"

\end_inset

 shows how to obtain a vertex descriptor to the first vertex found with
 a specific my_vertex value.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_vertex_with_my_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find the first vertex with a certain my_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
find_first_vertex_with_my_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_vertex_with_my_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the vertex descriptor obtained, one can read and modify the vertex
 and the edges surrounding it.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_vertex_with_my_vertex_demo"

\end_inset

 shows some examples of how to do so.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_vertex_with_my_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'find_first_vertex_with_my_vertex' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
find_first_vertex_by_name_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_vertex_with_my_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Get a vertex its my_vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:get_vertex_my_vertex"

\end_inset


\end_layout

\begin_layout Standard
To obtain the name from a vertex descriptor, one needs to pull out the my_vertex
es
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Bad English intended: my_vertexes = multiple my_vertex objects, vertices
 = multiple graph nodes
\end_layout

\end_inset

 map and then look up the vertex of interest.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_my_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get a vertex its my_vertex from its vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_vertex_my_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_my_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'get_vertex_my_vertex', one first needs to obtain a vertex descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_vertex_my_vertex_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_my_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'get_vertex_my_vertex' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_vertex_my_vertex_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_vertex_my_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Set a vertex its my_vertex
\begin_inset CommandInset label
LatexCommand label
name "sub:set_vertex_my_vertex"

\end_inset


\end_layout

\begin_layout Standard
If you know how to get the my_vertex from a vertex descriptor, setting it
 is just as easy, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_vertex_my_vertex"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_vertex_my_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Set a vertex its my_vertex from its vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
set_vertex_my_vertex
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_vertex_my_vertex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'set_vertex_my_vertex', one first needs to obtain a vertex descriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_vertex_my_vertex_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_vertex_my_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'set_vertex_my_vertex' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
set_vertex_my_vertex_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_vertex_my_vertex_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Setting all vertices' my_vertex objects
\begin_inset CommandInset label
LatexCommand label
name "sub:set_vertex_my_vertexes"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Set vertices my_vertexes
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertices, set my_vertexes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the vertices of a graph are associated with my_vertex objects, one
 can set these my_vertexes as such:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_vertex_my_vertexes.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Setting the vertices' my_vertexes
\begin_inset Index idx
status open

\begin_layout Plain Layout
set_vertex_my_vertexes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_vertex_my_vertexes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
An impressive feature is that getting the property map holding the graph
 its names is not a copy, but a reference.
 Otherwise, modifying 'my_vertexes_map' (obtained by non-reference) would
 only modify a copy.
\end_layout

\begin_layout Subsection
Has a my_edge
\begin_inset CommandInset label
LatexCommand label
name "sub:has_edge_with_my_edge"

\end_inset


\end_layout

\begin_layout Standard
Before modifying our edges, let's first determine if we can find an edge
 by its custom type ('my_edge') in a graph.
 After obtaing a my_edge map, we obtain the edge iterators, dereference
 these to obtain the edge descriptors and then compare each edge its my_edge
 with the one desired.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_edge_with_my_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find if there is an edge with a certain my_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
has_edge_with_my_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:has_edge_with_my_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This function can be demonstrated as in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:has_edge_with_my_edge_demo"

\end_inset

, where a certain my_edge cannot be found in an empty graph.
 After adding the desired my_edge, it is found.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_edge_with_my_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'has_edge_with_my_edge' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
has_edge_with_my_edge_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:has_edge_with_my_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this function only finds if there is at least one edge with that
 my_edge: it does not tell how many edges with that my_edge exist in the
 graph.
\end_layout

\begin_layout Subsection
Find a my_edge
\begin_inset CommandInset label
LatexCommand label
name "sub:find_first_edge_with_my_edge"

\end_inset


\end_layout

\begin_layout Standard
Where STL functions work with iterators, here we obtain an edge descriptor
 (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Edge-descriptors"

\end_inset

) to obtain a handle to the desired edge.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_edge_with_my_edeg"

\end_inset

 shows how to obtain an edge descriptor to the first edge found with a specific
 my_edge value.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_edge_with_my_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Find the first edge with a certain my_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
find_first_edge_with_my_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_edge_with_my_edeg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the edge descriptor obtained, one can read and modify the edge and
 the vertices surrounding it.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:find_first_edge_with_my_edge_demo"

\end_inset

 shows some examples of how to do so.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_edge_with_my_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration of the 'find_first_edge_with_my_edge' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
find_first_edge_with_my_edge_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:find_first_edge_with_my_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Get an edge its my_edge
\begin_inset CommandInset label
LatexCommand label
name "sub:get_edge_my_edge"

\end_inset


\end_layout

\begin_layout Standard
To obtain the my_edeg from an edge descriptor, one needs to pull out the
 my_edges map and then look up the my_edge of interest.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_my_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get a vertex its my_vertex from its vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_edge_my_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_my_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'get_edge_my_edge', one first needs to obtain an edgedescriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:get_edge_my_edge_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_my_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'get_edge_my_edge' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_edge_my_edge_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_edge_my_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Set an edge its my_edge
\begin_inset CommandInset label
LatexCommand label
name "sub:set_edge_my_edge"

\end_inset


\end_layout

\begin_layout Standard
If you know how to get the my_edge from an edge descriptor, setting it is
 just as easy, as shown in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_edge_my_edge"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_edge_my_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Set an edge its my_edge from its edge descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
set_edge_my_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_edge_my_edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use 'set_edge_my_edge', one first needs to obtain an edgedescriptor.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:set_edge_my_edge_demo"

\end_inset

 shows a simple example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_edge_my_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Demonstration if the 'set_edge_my_edge' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
set_edge_my_edge_demo
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:set_edge_my_edge_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Storing a graph with custom vertices as a .dot
\begin_inset CommandInset label
LatexCommand label
name "sub:save_custom_vertices_graph_to_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Save graph with custom vertices as .dot
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create .dot from graph with custom vertices
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
If you used the create_custom_vertices_k2_graph function (algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_k2_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{2}$
\end_inset

 graph with vertices associated with my_vertex objects, you can store these
 my_vertexes additionally with algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_custom_vertices_graph_to_dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_custom_vertices_graph_to_dot_cpp17.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing a graph with custom vertices as a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
save_custom_vertices_graph_to_dot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:save_custom_vertices_graph_to_dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this algorithm uses C++17
\begin_inset Index idx
status open

\begin_layout Plain Layout
C++17
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The .dot file created is displayed in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.dot file created from the create_custom_vertices_k2_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_named_vertices_k2_graph"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.dot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This .dot file corresponds to figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.dot"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
.svg file created from the create_custom_vertices_k2_graph function (algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:create_custom_vertices_k2_graph"

\end_inset

)
\begin_inset Index idx
status open

\begin_layout Plain Layout
pi
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:save_custom_vertices_graph_to_dot_test_custom_vertices_k2_graph.svg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Measuring more complex graphs traits
\end_layout

\begin_layout Subsection
Count the number of self-loops
\end_layout

\begin_layout Section
Misc functions
\end_layout

\begin_layout Subsection
Getting a data type as a std::string
\begin_inset CommandInset label
LatexCommand label
name "sub:get_type_name"

\end_inset


\end_layout

\begin_layout Standard
This function will only work under GCC.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_type_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Getting a data type its name as a std::string
\begin_inset Index idx
status open

\begin_layout Plain Layout
get_type_name
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:get_type_name"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Errors
\end_layout

\begin_layout Standard
Some common errors.
\end_layout

\begin_layout Subsection
Formed reference to void
\begin_inset CommandInset label
LatexCommand label
name "sub:formed_reference_to_void"

\end_inset


\end_layout

\begin_layout Standard
This compile-time error occurs when you create a graph without a certain
 property, then subsequently reading that property, as in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:formed_reference_to_void"

\end_inset

: 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "formed_reference_to_void.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating the error 'formed reference to void'
\begin_inset Index idx
status open

\begin_layout Plain Layout
formed_reference_to_void
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:formed_reference_to_void"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:formed_reference_to_void"

\end_inset

 a graph is created with vertices of no properties.
 Then the names of these vertices, which do not exists, are tried to be
 read.
 If you want to read the names of the vertices, supply a graph that has
 this property.
\end_layout

\begin_layout Subsection
No matching function for call to 'clear_out_edges'
\begin_inset CommandInset label
LatexCommand label
name "sub:no_matching_function_for_call_to_clear_out_edges"

\end_inset


\end_layout

\begin_layout Standard
This compile-time error occurs when you want to clear the outward edges
 from a vertex in an undirected graph.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "no_matching_function_for_call_to_clear_out_edges.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Creating the error 'formed reference to void'
\begin_inset Index idx
status open

\begin_layout Plain Layout
formed_reference_to_void
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:no_matching_function_for_call_to_clear_out_edges"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:no_matching_function_for_call_to_clear_out_edges"

\end_inset

 an undirected graph is created, a vertex descriptor is obtained, then its
 out edges are tried to be cleared.
 Either use a directed graph (which has out edges), or use the 'boost::clear_ver
tex' function instead.
\end_layout

\begin_layout Subsection
No matching function for call to 'clear_in_edges'
\begin_inset CommandInset label
LatexCommand label
name "sub:no_matching_function_for_call_to_clear_in_edges"

\end_inset


\end_layout

\begin_layout Standard
See chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:no_matching_function_for_call_to_clear_out_edges"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "boost_graph_tutorial"
options "plain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset


\end_layout

\end_body
\end_document
