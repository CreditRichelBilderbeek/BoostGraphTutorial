#include <vector>
#include <boost/graph/graph_traits.hpp>
#include <boost/graph/properties.hpp>
#include "install_vertex_custom_type.h"
#include "my_vertex.h"

//TODO: generalize to return any type
template <typename graph>
std::vector<my_vertex> get_vertex_my_vertexes(const graph& g)
{
  using vertex_iterator
    = typename boost::graph_traits<graph>::vertex_iterator;
  using vertex_iterators
    = std::pair<vertex_iterator,vertex_iterator>;

  std::vector<my_vertex> v;

  //TODO: remove auto
  const auto my_vertexes_map = get(boost::vertex_custom_type,g);

  for (vertex_iterators p = vertices(g);
    p.first != p.second;
    ++p.first)
  {
    v.emplace_back(get(my_vertexes_map, *p.first));
  }
  return v;
}

/*
  using vertex_descriptor
    = typename boost::graph_traits<graph>::vertex_descriptor;
  using my_vertex_map_t
    = typename property_map<graph,vertex_custom_type_t>::type;

  const vertex_descriptor vd{
    boost::add_vertex(g)
  };

  my_vertex_map_t name_map{boost::get(boost::vertex_custom_type,g)};
  name_map[vd] = v;

*/
