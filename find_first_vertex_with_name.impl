#include <cassert>
#include <boost/graph/graph_traits.hpp>
#include <boost/graph/properties.hpp>
#include "has_vertex_with_name.h"

///Find the first vertex with a certain
///name and return its vertex descriptor.
///Assumes that there exists a vertex with
///such a name
///TODO: extract vertex_name_type from the graph
template <
  typename graph,
  typename vertex_name_type
>
typename boost::graph_traits<graph>::vertex_descriptor
find_first_vertex_with_name(
  const vertex_name_type& name,
  const graph& g
) noexcept
{
  assert(has_vertex_with_name(name, g));
  const auto vertex_name_map
    = get(boost::vertex_name,g);
  const auto vip
    = vertices(g); //_not_ boost::vertices!
  const auto j = vip.second;

  for (auto i = vip.first; i!=j; ++i) {
    const std::string s{
      get( //_not_ boost::get!
        vertex_name_map,
        *i
      )
    };
    if (s == name) { return *i; }
  }
  assert(!"Should not get here");
  throw; //Will crash the program
}
